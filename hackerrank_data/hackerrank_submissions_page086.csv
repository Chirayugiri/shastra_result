submission_id,username,problem_name,language,code,page,url
1390054363,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054363
1390054365,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();  // Number of test cases
7
        8
        while (T-- > 0) {
9
            String rack = sc.next();  // Binary string representing server rack
10
            int n = rack.length();
11
            int[] servers = new int[n];
12
            for (int i = 0; i < n; i++) {
13
                servers[i] = rack.charAt(i) - '0';  // Convert string to int array
14
            }
15
            16
            int minCost = n;  // Maximum possible cost is n
17
            18
            // Count total 0s and 1s
19
            int totalZeros = 0, totalOnes = 0;
20
            for (int server : servers) {
21
                if (server == 0) totalZeros++;
22
                else totalOnes++;
23
            }
24
            25
            // Try all possible lengths of middle segment to keep
26
            for (int length = 0; length <= n; length++) {
27
                // For each length, slide the window and calculate cost
28
                for (int start = 0; start + length <= n; start++) {
29
                    int end = start + length;
30
                    int remainingZeros = 0, decommissionedOnes = 0;
31
                    32
                    // Count remaining 0s in the middle segment
33
                    for (int i = start; i < end; i++) {
34
                        if (servers[i] == 0) remainingZeros++;
35
                    }
36
                    37
                    // Decommissioned 1s are those outside the segment
38
                    for (int i = 0; i < start; i++) {
39
                        if (servers[i] == 1) decommissionedOnes++;
40
                    }
41
                    for (int i = end; i < n; i++) {
42
                        if (servers[i] == 1) decommissionedOnes++;
43
                    }
44
                    45
                    // Cost is max of remaining 0s and decommissioned 1s
46
                    int cost = Math.max(remainingZeros, decommissionedOnes);
47
                    minCost = Math.min(minCost, cost);
48
                }
49
            }
50
            51
            System.out.println(minCost);
52
        }
53
        54
        sc.close();
55
    }
56
}",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054365
1390054366,unknown,unknown,unknown,"1
def breach(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n, k, firewalls = test_cases[t]
6
        7
       8
        initial_effort = sum(firewalls)
9
        min_effort = initial_effort
10
11
     12
        prefix_sum = [0] * (n + 1)
13
        14
    15
        for i in range(1, n + 1):
16
            prefix_sum[i] = prefix_sum[i - 1] + firewalls[i - 1]
17
18
        19
        for skip_count in range(1, k + 1):
20
            for i in range(n - skip_count + 1):
21
                skipped_firewalls = prefix_sum[i + skip_count] - prefix_sum[i]
22
                increased_cost = (n - (i + skip_count)) * skip_count 
23
                total_effort = initial_effort - skipped_firewalls + increased_cost
24
                min_effort = min(min_effort, total_effort)
25
26
        results.append(min_effort)
27
    28
    return results
29
30
31
T = 2
32
test_cases = [
33
    (4, 1, [5, 10, 11, 5]),  
34
    (4, 4, [5, 10, 11, 5])   
35
]
36
37
print(breach(T, test_cases))
38",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054366
1390054357,unknown,unknown,unknown,"1
import sys
2
3
def solve():
4
    # Read number of test cases
5
    T = int(sys.stdin.readline().strip())
6
    7
    for _ in range(T):
8
        # Read n and k
9
        n, k = map(int, sys.stdin.readline().split())
10
        a = list(map(int, sys.stdin.readline().split()))
11
        12
        # INF for impossible states
13
        INF = 10**18
14
        15
        # Previous DP state
16
        prev = [INF] * (k + 1)
17
        prev[0] = 0
18
        19
        for i in range(n):
20
            curr = [INF] * (k + 1)
21
            for s in range(k + 1):
22
                # Don't skip i
23
                curr[s] = prev[s] + a[i] + s
24
                # Skip i (if possible)
25
                if s > 0:
26
                    curr[s] = min(curr[s], prev[s - 1])
27
            prev = curr
28
        29
        # Get the minimum value from the final state
30
        ans = min(prev)
31
        print(ans)
32
33
if __name__ == ""__main__"":
34
    solve()",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054357
1390054360,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    """"""
3
    Calculate minimum effort to breach n firewalls with optimal strategy.
4
    5
    Args:
6
        n: Number of firewalls
7
        k: Maximum number of firewalls that can be skipped
8
        firewalls: List of firewall strengths
9
        10
    Returns:
11
        Minimum effort required
12
    """"""
13
    # If we can skip all firewalls, return 0
14
    if k >= n:
15
        return 0
16
    17
    # Initialize dp array with infinity
18
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
19
    20
    # Base case: no firewalls, no effort
21
    dp[0][0] = 0
22
    23
    for i in range(1, n + 1):
24
        firewall_idx = i - 1  # Convert to 0-indexed
25
        26
        for j in range(k + 1):
27
            # Option 1: Don't skip the current firewall
28
            if j <= i - 1:  # Ensure we have processed enough firewalls
29
                dp[i][j] = min(dp[i][j], dp[i-1][j] + firewalls[firewall_idx] + j)
30
            31
            # Option 2: Skip the current firewall
32
            if j > 0:  # We must have at least one skip available
33
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
34
    35
    # Return the minimum effort after processing all firewalls
36
    return dp[n][k]
37
38
def main():
39
    t = int(input())  # Number of test cases
40
    41
    for _ in range(t):
42
        n, k = map(int, input().split())
43
        firewalls = list(map(int, input().split()))
44
        45
        min_effort = min_effort_to_breach(n, k, firewalls)
46
        print(min_effort)
47
48
if __name__ == ""__main__"":
49
    main()",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054360
1390054359,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); 
8
        9
        while(T-- > 0) {
10
            int n = sc.nextInt();
11
            int k = sc.nextInt();
12
            int[] a = new int[n];
13
            for (int i = 0; i < n; i++){
14
                a[i] = sc.nextInt();
15
            }
16
            17
           18
            if(k >= n) {
19
                System.out.println(0);
20
                continue;
21
            }
22
            23
         24
            long INF = Long.MAX_VALUE / 2;
25
            long[] dp = new long[k+1];
26
            Arrays.fill(dp, INF);
27
            dp[0] = 0;
28
            29
            30
            for (int i = 0; i < n; i++) {
31
                int lim = Math.min(i+1, k);
32
                long[] newdp = new long[k+1];
33
                Arrays.fill(newdp, INF);
34
                35
               36
                for (int j = lim; j >= 0; j--) {
37
                   38
                    newdp[j] = Math.min(newdp[j], dp[j] + a[i] + j);
39
                    40
                   41
                    if(j < k) {
42
                        newdp[j+1] = Math.min(newdp[j+1], dp[j]);
43
                    }
44
                }
45
                dp = newdp;
46
            }
47
            48
           49
            long ans = INF;
50
            for (int j = 0; j <= k; j++) {
51
                ans = Math.min(ans, dp[j]);
52
            }
53
            System.out.println(ans);
54
        }
55
        sc.close();
56
    }
57
}
58",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054359
1390054351,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    """"""
3
    Calculates the minimum effort needed to breach a network of firewalls.
4
5
    Args:
6
        n: The number of firewalls.
7
        k: The number of firewalls that can be skipped.
8
        firewalls: A list of integers representing the strength of each firewall.
9
10
    Returns:
11
        The minimum effort needed to breach the network.
12
    """"""
13
14
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
15
    dp[0][0] = 0
16
17
    for i in range(1, n + 1):
18
        for j in range(k + 1):
19
            # Don't skip the current firewall
20
            if j == 0:
21
                dp[i][j] = dp[i - 1][j] + firewalls[i - 1]
22
            else:
23
                # Calculate increased strength efficiently
24
                increased_strength = min(j, i - 1)  # Number of skips before i
25
                dp[i][j] = min(dp[i - 1][j] + firewalls[i - 1] + increased_strength, dp[i - 1][j - 1])
26
27
    return dp[n][k]
28
29
# Example Usage (from Sample Input)
30
T = int(input())
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    firewalls = list(map(int, input().split()))
34
    print(min_effort(n, k, firewalls))
35",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054351
1390054350,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    5
    min_cost = float('inf')
6
    7
  8
    for i in range(n + 1):  
9
        for j in range(n + 1 - i):  
10
            if i + j > n:
11
                continue
12
                13
           14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue 
18
            19
           20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
           24
            cost = max(idle_remaining, active_removed)
25
            26
           27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
40
for result in results:
41
    print(result)
42",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054350
1390054354,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input().strip())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)
42",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054354
1390054349,unknown,unknown,unknown,"1
def min_decommission_cost(rack):
2
    n = len(rack)
3
    4
    # Precompute cumulative sums for O(1) range queries
5
    active_prefix = [0] * (n + 1)  # Active servers (1's) from left
6
    idle_prefix = [0] * (n + 1)    # Idle servers (0's) from left
7
    8
    for i in range(n):
9
        active_prefix[i + 1] = active_prefix[i] + (1 if rack[i] == '1' else 0)
10
        idle_prefix[i + 1] = idle_prefix[i] + (1 if rack[i] == '0' else 0)
11
    12
    total_active = active_prefix[n]
13
    14
    min_cost = float('inf')
15
    16
    # For each possible number of servers to keep (k)
17
    for k in range(n + 1):
18
        # Try all possible positions for these k servers
19
        left = 0
20
        right = k
21
        22
        while right <= n:
23
            # Active servers removed
24
            removed_active = active_prefix[left] + (total_active - active_prefix[right])
25
            26
            # Idle servers remaining
27
            remaining_idle = idle_prefix[right] - idle_prefix[left]
28
            29
            cost = max(remaining_idle, removed_active)
30
            min_cost = min(min_cost, cost)
31
            32
            left += 1
33
            right += 1
34
    35
    return min_cost
36
37
def main():
38
    t = int(input().strip())
39
    40
    for _ in range(t):
41
        rack = input().strip()
42
        result = min_decommission_cost(rack)
43
        print(result)
44
45
if __name__ == ""__main__"":
46
    main()",86,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054349
