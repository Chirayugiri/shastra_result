submission_id,username,problem_name,language,code,page,url
1390054402,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
import java.util.Scanner;
5
6
public class Main {
7
8
    public static void main(String[] args) {
9
        Scanner sc = new Scanner(System.in);
10
        int T = sc.nextInt();
11
        sc.nextLine(); // Consume the newline after T
12
        while (T-- > 0) {
13
            String s = sc.nextLine().trim();
14
            int n = s.length();
15
            int totalOnes = 0;
16
            int maxConsecutiveOnes = 0;
17
            int currentConsecutiveOnes = 0;
18
            19
            // Calculate totalOnes and maxConsecutiveOnes
20
            for (char c : s.toCharArray()) {
21
                if (c == '1') {
22
                    currentConsecutiveOnes++;
23
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
24
                    totalOnes++;
25
                } else {
26
                    currentConsecutiveOnes = 0;
27
                }
28
            }
29
            30
            // Handle cases where the cost is trivially 0
31
            if (totalOnes == 0) {
32
                System.out.println(0);
33
                continue;
34
            }
35
            if (maxConsecutiveOnes == totalOnes) {
36
                System.out.println(0);
37
                continue;
38
            }
39
            40
            int totalZeros = n - totalOnes;
41
            int low = 0;
42
            int high = Math.max(totalOnes, totalZeros);
43
            int answer = high;
44
            45
            // Binary search for the minimal possible cost
46
            while (low <= high) {
47
                int mid = (low + high) / 2;
48
                int requiredOnes = Math.max(0, totalOnes - mid);
49
                50
                if (requiredOnes == 0) {
51
                    answer = mid;
52
                    high = mid - 1;
53
                    continue;
54
                }
55
                56
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
57
                if (maxOnes >= requiredOnes) {
58
                    answer = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            65
            System.out.println(answer);
66
        }
67
        sc.close();
68
    }
69
    70
    // Helper function to calculate maximum ones in any window with at most k zeros
71
    private static int maxOnesWithAtMostKZeros(String s, int k) {
72
        int left = 0;
73
        int zeros = 0;
74
        int maxOnes = 0;
75
        int n = s.length();
76
        77
        for (int right = 0; right < n; right++) {
78
            if (s.charAt(right) == '0') {
79
                zeros++;
80
            }
81
            // Shrink the window if zeros exceed k
82
            while (zeros > k) {
83
                if (s.charAt(left) == '0') {
84
                    zeros--;
85
                }
86
                left++;
87
            }
88
            // Calculate current number of ones in the window
89
            int currentOnes = (right - left + 1) - zeros;
90
            maxOnes = Math.max(maxOnes, currentOnes);
91
        }
92
        93
        return maxOnes;
94
    }
95
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054402
1390054404,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  
7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    result.append(arr[dq[0]] if dq else 0)
12
    13
    for i in range(k, n):
14
        if dq and dq[0] < i - k + 1:
15
            dq.popleft()
16
        17
        if arr[i] < 0:
18
            dq.append(i)
19
20
        result.append(arr[dq[0]] if dq else 0)
21
    22
    return result
23
24
t = int(input())
25
for _ in range(t):
26
    n, k = map(int, input().split())
27
    arr = list(map(int, input().split()))
28
    print(*earliest_faulty_readings(arr, k))",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054404
1390054405,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
3
    results = []
4
5
    6
7
    for _ in range(test_cases):
8
9
        n, k = map(int, input().split())
10
11
        a = list(map(int, input().split()))
12
13
        14
15
        sum_a = sum(a)
16
17
        18
19
        values = [a[i] - (n - i - 1) for i in range(n)]
20
21
        values.sort(reverse=True)  # Sort in descending order
22
23
        24
25
        prefix_sum = [0] * (n + 1)
26
27
        for i in range(1, n + 1):
28
29
            prefix_sum[i] = prefix_sum[i - 1] + values[i - 1]
30
31
        32
33
        max_m = min(k, n)
34
35
        max_total = float('-inf')
36
37
        38
39
        for m in range(max_m + 1):
40
41
            current = prefix_sum[m] + (m * (m - 1)) // 2
42
43
            max_total = max(max_total, current)
44
45
        46
47
        min_effort = sum_a - max_total
48
49
        results.append(str(min_effort))
50
51
    52
53
    print(""\n"".join(results))
54
55
# Driver code
56
57
if __name__ == ""__main__"":
58
59
    T = int(input())
60
61
    min_effort(T)",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054405
1390054399,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FirewallBreach {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt(); // Read number of test cases
7
        8
        for (int testCase = 0; testCase < T; testCase++) {
9
            int n = scanner.nextInt(); // Number of firewalls
10
            int k = scanner.nextInt(); // Maximum firewalls that can be skipped
11
            12
            int[] strengths = new int[n];
13
            for (int i = 0; i < n; i++) {
14
                strengths[i] = scanner.nextInt(); // Strength of each firewall
15
            }
16
            17
            System.out.println(minimumEffort(n, k, strengths));
18
        }
19
        20
        scanner.close();
21
    }
22
    23
    private static long minimumEffort(int n, int k, int[] strengths) {
24
        long[] prefixSums = new long[n + 1];
25
        // Compute prefix sums for easy range sum calculations
26
        for (int i = 0; i < n; i++) {
27
            prefixSums[i + 1] = prefixSums[i] + strengths[i];
28
        }
29
        30
        long minEffort = prefixSums[n]; // Start with no skips, just sum all strengths
31
32
        // Iterate over the possible number of skipped firewalls from 0 up to k
33
        for (int skips = 1; skips <= k; skips++) {
34
            // Consider every possible starting point for skipping 'skips' firewalls
35
            for (int start = 0; start + skips <= n; start++) {
36
                long currentEffort = 0;
37
                38
                // Calculate the effort if skipping firewalls from index 'start' to 'start+skips-1'
39
                if (start > 0) {
40
                    currentEffort += prefixSums[start]; // Sum of efforts before the skipped part
41
                }
42
                43
                if (start + skips < n) {
44
                    currentEffort += prefixSums[n] - prefixSums[start + skips]; // Sum of efforts after the skipped part
45
                    // Add the increased effort for each subsequent firewall
46
                    for (int i = start + skips; i < n; i++) {
47
                        currentEffort += (i - (start + skips) + 1);
48
                    }
49
                }
50
                51
                // Update the minimum effort found
52
                minEffort = Math.min(minEffort, currentEffort);
53
            }
54
        }
55
        56
        return minEffort;
57
    }
58
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054399
1390054400,unknown,unknown,unknown,"1
def min_effort_to_breach(t, test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        # Sort firewalls by strength while keeping original indices
6
        indexed_firewalls = sorted(enumerate(firewalls), key=lambda x: x[1])
7
8
        # Select the weakest `k` firewalls to skip
9
        skip_indices = {idx for idx, _ in indexed_firewalls[:k]}
10
11
        # Compute total effort with increasing penalty
12
        effort = 0
13
        penalty = 0
14
15
        for i in range(n):
16
            if i in skip_indices:
17
                penalty += 1  # Increase penalty for remaining firewalls
18
            else:
19
                effort += firewalls[i] + penalty  # Add adjusted strength
20
        21
        results.append(effort)
22
    23
    return results
24
25
# Read input
26
t = int(input().strip())
27
test_cases = []
28
for _ in range(t):
29
    n, k = map(int, input().split())
30
    firewalls = list(map(int, input().split()))
31
    test_cases.append((n, k, firewalls))
32
33
# Compute results and print them
34
for res in min_effort_to_breach(t, test_cases):
35
    print(res)
36
37",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054400
1390054401,unknown,unknown,unknown,"1
def f(n, k, a):
2
3
    t = sum(a)
4
5
    m = t
6
7
    for i in range(n):
8
9
        m = min(m, t - a[i] + (n - i - 1))
10
11
    return m if k < n else 0
12
13
for _ in range(int(input())):
14
15
    n, k = map(int, input().split())
16
17
    a = list(map(int, input().split()))
18
19
    print(f(n, k, a))",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054401
1390054394,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
using ll = long long;
5
6
int main() {
7
    // Optimize input/output
8
    ios::sync_with_stdio(false);
9
    cin.tie(0);
10
11
    int T;
12
    cin >> T;
13
    for (int t = 0; t < T; t++) {
14
        int n, k;
15
        cin >> n >> k;
16
        vector<ll> a(n);
17
        for (int i = 0; i < n; i++) {
18
            cin >> a[i];
19
        }
20
21
        // INF for impossible states , really tough one to solved actually 
22
        const ll INF = 1e18;
23
24
        vector<ll> prev(k + 1, INF);
25
        prev[0] = 0; 
26
27
    28
        for (int i = 0; i < n; i++) {
29
            vector<ll> curr(k + 1, INF);
30
            for (int s = 0; s <= k; s++) {
31
                // Don't skip i
32
                curr[s] = prev[s] + a[i] + s;
33
                // Skip i (if possible)
34
                if (s > 0) {
35
                    curr[s] = min(curr[s], prev[s - 1]);
36
                }
37
            }
38
            prev = curr; 
39
        }
40
41
42
        ll ans = *min_element(prev.begin(), prev.end());
43
        cout << ans << '\n';
44
    }
45
    return 0;
46
}",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054394
1390054395,unknown,unknown,unknown,"1
cases = int(input())
2
for t in range(cases):
3
    n,k = [int(i) for i in input().split()]
4
    array = [int(i) for i in input().split()]
5
    if n == k:
6
        print(0)
7
        continue
8
    batch_sum = [0]*n
9
    for i in range(n):
10
        batch_sum[i] = sum(array[i:i+k])
11
    total = sum(array)
12
    best = total
13
    for i in range(n):
14
        if i + k < n:
15
            best = min(best, total -batch_sum[i] + n-i-k)
16
        else:
17
            best = min(best, total - batch_sum[i])
18
    print(best)
19
        20
        21
    22
    23
    24
    25
    ",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054395
1390054396,unknown,unknown,unknown,"1
def solve():
2
3
    s = input()
4
5
    n = len(s)
6
7
    min_cost = float('inf')
8
9
    for i in range(n + 1):
10
11
        for j in range(n - i + 1):
12
13
            remaining = s[i:n - j]
14
15
            idle_count = remaining.count('0')
16
17
            active_removed = s[:i].count('1') + s[n - j:].count('1')
18
19
            min_cost = min(min_cost, max(idle_count, active_removed))
20
21
    print(min_cost)
22
23
t = int(input())
24
25
for _ in range(t):
26
27
    solve()
28
29",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054396
1390054391,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
import sys
3
4
data = sys.stdin.read().split()
5
6
if not data:
7
8
    exit()
9
10
t = int(data[0])
11
12
ptr = 1
13
14
res = []
15
16
for _ in range(t):
17
18
    n = int(data[ptr]); k = int(data[ptr+1]); ptr += 2
19
20
    arr = list(map(int, data[ptr:ptr+n])); ptr += n
21
22
    total = sum(arr)
23
24
    b = [arr[i] - ((n - 1) - i) for i in range(n)]
25
26
    b.sort(reverse=True)
27
28
    best = 0
29
30
    s = 0
31
32
    for x in range(1, min(k, n) + 1):
33
34
        s += b[x-1]
35
36
        cur = s + (x * (x - 1)) // 2
37
38
        if cur > best:
39
40
            best = cur
41
42
    res.append(str(total - best))
43
44
sys.stdout.write(""\n"".join(res))",84,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054391
