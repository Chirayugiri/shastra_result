submission_id,username,problem_name,language,code,page,url
1390056245,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
    public static void main(String[] args) {
9
        Scanner scanner = new Scanner(System.in);
10
        int testCases = scanner.nextInt();
11
        12
        while (testCases-- > 0) {
13
            int arraySize = scanner.nextInt();
14
            int windowSize = scanner.nextInt();
15
            int[] elements = new int[arraySize];
16
            17
            18
            for (int index = 0; index < arraySize; index++) {
19
                elements[index] = scanner.nextInt();
20
            }
21
            22
            if (windowSize > arraySize) {
23
                System.out.println(""0"");
24
                continue;
25
            }
26
            27
            for (int start = 0; start <= arraySize - windowSize; start++) {
28
                int firstNegative = 0;
29
                30
                for (int end = start; end < start + windowSize; end++) {
31
                    if (elements[end] < 0) {
32
                        firstNegative = elements[end];
33
                        break;
34
                    }
35
                }
36
                System.out.print(firstNegative + "" "");
37
            }
38
            System.out.println();
39
        }
40
        41
        scanner.close();
42
    }
43
}",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390056245
1390056254,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
# Input Handling
60
if __name__ == ""__main__"":
61
    T = int(input())
62
    test_cases = [input().strip() for _ in range(T)]
63
    results = min_decommissioning_cost(test_cases)
64
    for result in results:
65
        print(result)",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056254
1390056253,unknown,unknown,unknown,"1
def solve(servers):
2
    3
    n = len(servers)
4
    min_cost = float('inf')
5
    best_i = 0
6
    best_j = 0
7
    8
    for i in range(n + 1):
9
        for j in range(n + 1 - i):
10
            rem = servers[i:n-j]
11
            zeros = rem.count('0')
12
            ones_removed = servers[:i].count('1') + servers[n-j:].count('1')
13
            14
            # cost is max of these
15
            cost = max(zeros, ones_removed)
16
            17
            # update if better
18
            if cost < min_cost:
19
                min_cost = cost
20
                best_i = i
21
                best_j = j
22
    23
    # idk if this is right but let's try
24
    return min_cost
25
26
def main():
27
    t = int(input())
28
    for _ in range(t):
29
        s = input().strip()
30
        print(solve(s))
31
32
if __name__ == ""__main__"":
33
    main()",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056253
1390056181,unknown,unknown,unknown,"1
2
import java.util.*;
3
import java.io.*;
4
5
public class FirewallSkips {
6
    public static void main(String[] args) {
7
        FastReader in = new FastReader(System.in);
8
        int T = in.nextInt();
9
        10
        while (T-- > 0) {
11
            int n = in.nextInt();
12
            int k = in.nextInt();
13
            14
            long[] a = new long[n];
15
            long sumA = 0; // sum of all a[i]
16
            for (int i = 0; i < n; i++) {
17
                a[i] = in.nextLong();
18
                sumA += a[i];
19
            }
20
            21
            // Build array b[i] = a[i] + (i+1)  [using 1-based index for j]
22
            // We'll sort b in descending order to pick the top x.
23
            long[] b = new long[n];
24
            for (int i = 0; i < n; i++) {
25
                b[i] = a[i] + (i + 1);
26
            }
27
            28
            Arrays.sort(b);
29
            // Sort ascending by default; we want descending, so either:
30
            // 1) reverse in place, or
31
            // 2) build prefix sums from the end.
32
            // Let's just reverse in place for clarity.
33
            reverse(b); // Now b is descending.
34
            35
            // Build prefix sums of b in descending order:
36
            // p[x] = sum of top x elements in b (b[0] + b[1] + ... + b[x-1])
37
            long[] prefix = new long[n+1];
38
            prefix[0] = 0;
39
            for (int x = 1; x <= n; x++) {
40
                prefix[x] = prefix[x-1] + b[x-1];
41
            }
42
            43
            long ans = Long.MAX_VALUE;
44
            // Try x from 0..k (number of skips)
45
            for (int x = 0; x <= k; x++) {
46
                // cost(x) = sumA + x*n - prefix[x] - x*(x-1)/2
47
                // Make sure to use long to avoid overflow
48
                long cost = sumA 
49
                            + x * (long)n 
50
                            - prefix[x]
51
                            - ((long)x * (x - 1) / 2);
52
                ans = Math.min(ans, cost);
53
            }
54
            55
            System.out.println(ans);
56
        }
57
    }
58
    59
    // Utility to reverse array in place
60
    private static void reverse(long[] arr) {
61
        int left = 0, right = arr.length - 1;
62
        while (left < right) {
63
            long tmp = arr[left];
64
            arr[left] = arr[right];
65
            arr[right] = tmp;
66
            left++;
67
            right--;
68
        }
69
    }
70
    71
    // Fast input class (optional, for large I/O)
72
    static class FastReader {
73
        BufferedReader br;
74
        StringTokenizer st;
75
        76
        public FastReader(InputStream stream) {
77
            br = new BufferedReader(new InputStreamReader(stream));
78
        }
79
        80
        String next() {
81
            while (st == null || !st.hasMoreElements()) {
82
                try {
83
                    st = new StringTokenizer(br.readLine());
84
                } catch (IOException e) {
85
                    e.printStackTrace();
86
                }
87
            }
88
            return st.nextToken();
89
        }
90
        91
        int nextInt() {
92
            return Integer.parseInt(next());
93
        }
94
        95
        long nextLong() {
96
            return Long.parseLong(next());
97
        }
98
    }
99
}",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056181
1390056185,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
#include <climits>
5
6
using namespace std;
7
8
vector<int> min_decommissioning_cost(const vector<string>& test_cases) {
9
    vector<int> results;
10
    11
    for (const string& servers : test_cases) {
12
        int n = servers.size();
13
        int total_0 = 0;
14
        for (char c : servers) {
15
            if (c == '0') total_0++;
16
        }
17
        int total_1 = n - total_0;
18
        19
        // Precompute prefix counts for 0s and 1s
20
        vector<int> prefix_0(n + 1, 0), prefix_1(n + 1, 0);
21
        for (int i = 1; i <= n; ++i) {
22
            prefix_0[i] = prefix_0[i-1] + (servers[i-1] == '0');
23
            prefix_1[i] = prefix_1[i-1] + (servers[i-1] == '1');
24
        }
25
        26
        // Precompute suffix counts for 0s and 1s
27
        vector<int> suffix_0(n + 1, 0), suffix_1(n + 1, 0);
28
        for (int j = 1; j <= n; ++j) {
29
            suffix_0[j] = suffix_0[j-1] + (servers[n - j] == '0');
30
            suffix_1[j] = suffix_1[j-1] + (servers[n - j] == '1');
31
        }
32
        33
        int min_cost = INT_MAX;
34
        35
        // Iterate over all possible prefixes (i)
36
        for (int i = 0; i <= n; ++i) {
37
            int j_max = n - i;
38
            int left = 0, right = j_max;
39
            int best_j = 0;
40
            int best_cost = INT_MAX;
41
            42
            // Binary search for the best j
43
            while (left <= right) {
44
                int mid = (left + right) / 2;
45
                int remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid]);
46
                int decommissioned_1 = prefix_1[i] + suffix_1[mid];
47
                int current_cost = max(remaining_0, decommissioned_1);
48
                49
                if (current_cost < best_cost) {
50
                    best_cost = current_cost;
51
                    best_j = mid;
52
                } else if (current_cost == best_cost && mid < best_j) {
53
                    best_j = mid;
54
                }
55
                56
                if (decommissioned_1 < remaining_0) {
57
                    left = mid + 1;
58
                } else {
59
                    right = mid - 1;
60
                }
61
            }
62
            63
            // Check neighboring j values
64
            for (int dj : {-1, 0, 1}) {
65
                int j = best_j + dj;
66
                if (j >= 0 && j <= j_max) {
67
                    int remaining_0 = total_0 - (prefix_0[i] + suffix_0[j]);
68
                    int decommissioned_1 = prefix_1[i] + suffix_1[j];
69
                    int current_cost = max(remaining_0, decommissioned_1);
70
                    if (current_cost < best_cost) {
71
                        best_cost = current_cost;
72
                    }
73
                }
74
            }
75
            76
            if (best_cost < min_cost) {
77
                min_cost = best_cost;
78
            }
79
        }
80
        81
        results.push_back(min_cost);
82
    }
83
    84
    return results;
85
}
86
87
int main() {
88
    int T;
89
    cin >> T;
90
    vector<string> test_cases(T);
91
    for (int i = 0; i < T; ++i) {
92
        cin >> test_cases[i];
93
    }
94
    95
    vector<int> results = min_decommissioning_cost(test_cases);
96
    97
    for (int result : results) {
98
        cout << result << endl;
99
    }
100
    101
    return 0;
102
} 3rd",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056185
1390056180,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
    5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):  # Iterate through all combinations of skips
8
        skips = []
9
        for j in range(n):
10
            if (i >> j) & 1:
11
                skips.append(j)
12
        13
        if len(skips) <= k:
14
            effort = 0
15
            increment = 0
16
            for j in range(n):
17
                if j in skips:
18
                    increment += 1
19
                else:
20
                    effort += a[j] + increment
21
            min_effort = min(min_effort, effort)
22
    23
    print(min_effort)
24
25
t = int(input())
26
for _ in range(t):
27
    solve()",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056180
1390056163,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
      Scanner scanner = new Scanner(System.in);
8
        int t = scanner.nextInt(); 
9
10
        while (t-- > 0) {
11
            int n = scanner.nextInt(); 
12
            int k = scanner.nextInt(); 
13
            int[] arr = new int[n];
14
15
            for (int i = 0; i < n; i++) {
16
                arr[i] = scanner.nextInt();
17
            }
18
19
            int ans = findResult(arr, k);
20
21
            System.out.print(ans);
22
           23
            System.out.println();
24
        }
25
        scanner.close();
26
    }
27
    public static int findResult(int []arr, int k){
28
        int[] ans= new int[arr.length];
29
        int sum=0;
30
        for(int i =0;i<arr.length;i++){
31
            ans[i]=arr[i]-((arr.length-1)-i);
32
            sum+=arr[i];
33
        }
34
        Arrays.sort(ans);
35
        reverse(ans);
36
        for(int i =0;i<k;i++){
37
            if(ans[i]>0){
38
               // System.out.println(ans[i]+""w"");
39
                sum-=ans[i];
40
            }
41
        }
42
        43
        return Math.max(sum,0);
44
        45
    }
46
     private static void reverse(int[] arr) {
47
        int left = 0, right = arr.length - 1;
48
        while (left < right) {
49
            int temp = arr[left];
50
            arr[left] = arr[right];
51
            arr[right] = temp;
52
            left++;
53
            right--;
54
        }
55
    }
56
}",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056163
1390056162,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056162
1390056169,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])  # Number of test cases
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())  # Number of firewalls and skips allowed
13
        strengths = list(map(int, data[index + 1].split()))  # Firewall strengths
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if __name__ == ""__main__"":
45
    main()",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056169
1390056158,unknown,unknown,unknown,"1
import sys
2
def solve():
3
    x = sys.stdin.buffer.read().split()
4
    if not x: return
5
    t = int(x[0])
6
    i = 1
7
    o = []
8
    for _ in range(t):
9
        s = x[i].decode()
10
        i += 1
11
        n = len(s)
12
        A = [0]*(n+1)
13
        B = [0]*(n+1)
14
        for j in range(n):
15
            B[j+1] = B[j] + (s[j]=='1')
16
            A[j+1] = A[j] + (s[j]=='0')
17
        T = A[n]
18
        C = [0]*(n+1)
19
        E = [0]*(n+1)
20
        for j in range(n):
21
            E[j+1] = E[j] + (s[n-1-j]=='1')
22
            C[j+1] = C[j] + (s[n-1-j]=='0')
23
        r = 10**9
24
        for x_ in range(n+1):
25
            m = n - x_
26
            y = T - A[x_] - B[x_]
27
            if y < 0: y = 0
28
            if y > m: y = m
29
            for z in (y, y-1, y+1):
30
                if z < 0 or z > m: continue
31
                v1 = B[x_] + E[z]
32
                v2 = T - (A[x_] + C[z])
33
                v = v1 if v1 >= v2 else v2
34
                if v < r: r = v
35
        o.append(str(r))
36
    sys.stdout.write(""\n"".join(o))
37
if __name__==""__main__"":
38
    solve()",6,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056158
