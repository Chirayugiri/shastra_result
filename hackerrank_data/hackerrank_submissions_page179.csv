submission_id,username,problem_name,language,code,page,url
1390052429,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
4
int main() {
5
    int t;
6
    scanf(""%d"", &t);
7
    while (t--) {
8
        char rack[100005];
9
        scanf(""%s"", rack);
10
        int n = strlen(rack);
11
        int first = -1, last = -1;
12
        for (int i = 0; i < n; i++) {
13
            if (rack[i] == '1') {
14
                if (first == -1) {
15
                    first = i;
16
                }
17
                last = i;
18
            }
19
        }
20
        if (first == -1) {
21
            printf(""0\n"");
22
        } else {
23
            int zeroCount = 0;
24
            int oneCount = 0;
25
            for (int i = first; i <= last; i++) {
26
                if (rack[i] == '0') {
27
                    zeroCount++;
28
                } else {
29
                    oneCount++;
30
                }
31
            }
32
            if (zeroCount < oneCount) {
33
                printf(""%d\n"", zeroCount);
34
            } else {
35
                printf(""%d\n"", oneCount);
36
            }
37
        }
38
    }
39
    return 0;
40
}",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052429
1390052430,unknown,unknown,unknown,"1
def min_effort(arr, k):
2
    n = len(arr)
3
    4
    if k >= n:
5
        return 0
6
7
    prev_dp = [float('inf')] * (k + 1)
8
    prev_dp[0] = 0  
9
    10
    for i in range(n):
11
        curr_dp = [float('inf')] * (k + 1)
12
        for j in range(k + 1):
13
            curr_dp[j] = prev_dp[j] + arr[i] + j if j <= i else float('inf')
14
            if j > 0:
15
                curr_dp[j] = min(curr_dp[j], prev_dp[j - 1])
16
        prev_dp = curr_dp
17
    18
    return min(prev_dp)
19
20
def solve():
21
    for _ in range(int(input())):
22
        n, k = map(int, input().split())
23
        arr = list(map(int, input().split()))
24
        print(min_effort(arr, k))
25
26
if __name__ == ""__main__"":
27
    solve()
28",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052430
1390052427,unknown,unknown,unknown,"1
import java.util.ArrayList;
2
import java.util.List;
3
import java.util.Scanner;
4
5
public class Solution {
6
7
    public static void main(String[] args) {
8
        Scanner scanner = new Scanner(System.in);
9
        int t = scanner.nextInt();
10
        for (int i = 0; i < t; i++) {
11
            int n = scanner.nextInt();
12
            int k = scanner.nextInt();
13
            int[] a = new int[n];
14
            for (int j = 0; j < n; j++) {
15
                a[j] = scanner.nextInt();
16
            }
17
            solve(n, k, a);
18
        }
19
        scanner.close();
20
    }
21
22
    public static void solve(int n, int k, int[] a) {
23
        long minEffort = Long.MAX_VALUE;
24
25
        for (int i = 0; i < (1 << n); i++) {
26
            List<Integer> skippedIndices = new ArrayList<>();
27
            for (int j = 0; j < n; j++) {
28
                if ((i >> j) % 2 == 1) {
29
                    skippedIndices.add(j);
30
                }
31
            }
32
33
            if (skippedIndices.size() <= k) {
34
                long effort = 0;
35
                int increasedStrength = 0;
36
                int currentSkippedIndex = 0;
37
38
                for (int j = 0; j < n; j++) {
39
                    if (currentSkippedIndex < skippedIndices.size() && skippedIndices.get(currentSkippedIndex) == j) {
40
                        increasedStrength++;
41
                        currentSkippedIndex++;
42
                    } else {
43
                        effort += a[j] + increasedStrength;
44
                    }
45
                }
46
47
                minEffort = Math.min(minEffort, effort);
48
            }
49
        }
50
        System.out.println(minEffort);
51
    }
52
}",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052427
1390052416,unknown,unknown,unknown,"1
def min_effort(n, k, arr):
2
    arr.sort()  # Sort firewalls in ascending order
3
    total_sum = sum(arr)  # Total strength without skipping
4
    min_effort = total_sum  # Start with no skipping
5
6
    for x in range(k + 1):  # Try skipping from 0 to k firewalls
7
        remaining_sum = sum(arr[x:])  # Sum of remaining firewalls
8
        added_penalty = (n - x) * x  # Every remaining firewall gets increased by x
9
        current_effort = remaining_sum + added_penalty
10
        min_effort = min(min_effort, current_effort)  # Update minimum effort
11
12
    print(min_effort)
13
14
# Read input
15
t = int(input())  # Number of test cases
16
for _ in range(t):
17
    n, k = map(int, input().split())  # Read n and k
18
    arr = list(map(int, input().split()))  # Read firewall strengths
19
    min_effort(n, k, arr)
20",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052416
1390052414,unknown,unknown,unknown,"1
def min_effort_to_breach(t, test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        if k == n:
6
            results.append(""0"")
7
            continue
8
9
        total_effort = sum(firewalls)
10
        min_effort = total_effort
11
12
        # Compute the initial window sum (sum of first k firewalls)
13
        current_sum = sum(firewalls[:k])
14
15
        # Iterate over all possible positions to skip k firewalls
16
        for i in range(n - k + 1):
17
            increased_security = k  # Since each skipped firewall increases the rest by 1
18
            new_effort = total_effort - current_sum + increased_security
19
            min_effort = min(min_effort, new_effort)
20
21
            # Slide the window
22
            if i + k < n:
23
                current_sum = current_sum - firewalls[i] + firewalls[i + k]
24
25
        results.append(str(min_effort))
26
27
    return ""\n"".join(results)
28
29
# Read input
30
t = int(input())
31
test_cases = []
32
33
for _ in range(t):
34
    n, k = map(int, input().split())
35
    firewalls = list(map(int, input().split()))
36
    test_cases.append((n, k, firewalls))
37
38
# Compute and print results
39
print(min_effort_to_breach(t, test_cases))
40",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052414
1390052421,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    result.append(arr[dq[0]] if dq else 0)
13
    14
    for i in range(k, n):
15
        if dq and dq[0] < i - k + 1:
16
            dq.popleft()
17
        18
        if arr[i] < 0:
19
            dq.append(i)
20
        21
        result.append(arr[dq[0]] if dq else 0)
22
    23
    return result
24
25
t = int(input())
26
for _ in range(t):
27
    n, k = map(int, input().split())
28
    arr = list(map(int, input().split()))
29
    print(*earliest_faulty_readings(arr, k))
30",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052421
1390052404,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_reading(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    result.append(arr[dq[0]] if dq else 0)
12
    13
    for i in range(k, len(arr)):
14
        while dq and dq[0] <= i - k:
15
            dq.popleft()
16
        17
        if arr[i] < 0:
18
            dq.append(i)
19
        20
        result.append(arr[dq[0]] if dq else 0)
21
    22
    return result
23
24
t = int(input())
25
for _ in range(t):
26
    n, k = map(int, input().split())
27
    arr = list(map(int, input().split()))
28
    output = earliest_faulty_reading(arr, k)
29
    print("" "".join(map(str, output)))
30",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052404
1390052407,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
8
    for i in range(n):
9
        # Add current element index to deque if it's negative
10
        if arr[i] < 0:
11
            dq.append(i)
12
        13
        # Remove elements that are out of the current window
14
        if dq and dq[0] < i - k + 1:
15
            dq.popleft()
16
        17
        # Start recording results when we reach the first full batch
18
        if i >= k - 1:
19
            result.append(arr[dq[0]] if dq else 0)
20
    21
    return result
22
23
# Read input
24
t = int(input())  # Number of test cases
25
for _ in range(t):
26
    n, k = map(int, input().split())  # Read array size and batch size
27
    arr = list(map(int, input().split()))  # Read array elements
28
    print(*earliest_faulty_readings(arr, k))  # Print the output as space-separated values
29",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052407
1390052413,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Count total active servers (1's) and idle servers (0's)
5
    total_active = servers.count('1')
6
    total_idle = servers.count('0')
7
    8
    min_cost = float('inf')
9
    10
    # Try all possible combinations of removing servers from the beginning and end
11
    for left in range(n + 1):  # Number of servers to remove from the left
12
        for right in range(n + 1 - left):  # Number of servers to remove from the right
13
            if left + right > n:
14
                continue
15
                16
            # Count active and idle servers in the segments we're removing
17
            active_removed_left = servers[:left].count('1')
18
            active_removed_right = servers[n-right:].count('1')
19
            total_active_removed = active_removed_left + active_removed_right
20
            21
            # Calculate the remaining idle servers
22
            remaining_idle = total_idle - (left - active_removed_left) - (right - active_removed_right)
23
            24
            # Calculate cost
25
            cost = max(remaining_idle, total_active_removed)
26
            27
            # Update minimum cost
28
            min_cost = min(min_cost, cost)
29
    30
    return min_cost
31
32
# Process test cases
33
t = int(input())
34
for _ in range(t):
35
    servers = input().strip()
36
    print(min_decommissioning_cost(servers))",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052413
1390052401,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class SmartFactoryQC {
4
    public static List<Integer> earliestFaultyReadings(int[] arr, int k) {
5
        List<Integer> result = new ArrayList<>();
6
        Deque<Integer> deque = new LinkedList<>(); // Stores indices of negative values
7
        8
        int n = arr.length;
9
        for (int i = 0; i < n; i++) {
10
            // Remove indices that are out of the current window
11
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
12
                deque.poll();
13
            }
14
            15
            // Add current element index if it's negative
16
            if (arr[i] < 0) {
17
                deque.offer(i);
18
            }
19
            20
            // Process output once we reach full window size
21
            if (i >= k - 1) {
22
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
23
            }
24
        }
25
        26
        return result;
27
    }
28
    29
    public static void main(String[] args) {
30
        Scanner sc = new Scanner(System.in);
31
        int t = sc.nextInt(); // Number of test cases
32
        33
        while (t-- > 0) {
34
            int n = sc.nextInt(); // Array size
35
            int k = sc.nextInt(); // Batch size
36
            int[] arr = new int[n];
37
            38
            for (int i = 0; i < n; i++) {
39
                arr[i] = sc.nextInt();
40
            }
41
            42
            List<Integer> result = earliestFaultyReadings(arr, k);
43
            44
            // Print output
45
            for (int num : result) {
46
                System.out.print(num + "" "");
47
            }
48
            System.out.println();
49
        }
50
        51
        sc.close();
52
    }
53
}
54",179,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052401
