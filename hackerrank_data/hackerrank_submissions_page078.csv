submission_id,username,problem_name,language,code,page,url
1390054524,unknown,unknown,unknown,"1
#include <iostream>
2
#include <string>
3
#include <algorithm>
4
#include <vector>
5
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        string s;
13
        cin >> s;
14
        int n = s.length();
15
16
        int total_ones = 0;
17
        for (char c : s) {
18
            if (c == '1') {
19
                total_ones++;
20
            }
21
        }
22
23
        int min_cost = n;
24
25
        for (int l = 0; l <= n; ++l) {
26
            int kept_ones = 0;
27
            int kept_zeros = 0;
28
            for (int r = l; r <= n; ++r) {
29
                if (r > l) {
30
                    if (s[r - 1] == '1') {
31
                        kept_ones++;
32
                    } else {
33
                        kept_zeros++;
34
                    }
35
                }
36
                int removed_ones = total_ones - kept_ones;
37
                min_cost = min(min_cost, max(removed_ones, kept_zeros));
38
            }
39
        }
40
        cout << min_cost << endl;
41
    }
42
    return 0;
43
}
44",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054524
1390054525,unknown,unknown,unknown,"1
def solve():
2
    """"""Solves the server decommissioning problem.""""""
3
4
    T = int(input())
5
    for _ in range(T):
6
        servers = input().strip()
7
        n = len(servers)
8
        9
        min_cost = float('inf')
10
11
        for i in range(n + 1):  # Remove i from start
12
            for j in range(n - i + 1):  # Remove j from end
13
                remaining = servers[i:n - j]
14
                15
                if not remaining:
16
                    min_cost = min(min_cost, 0)
17
                    continue
18
                19
                idle_count = remaining.count('0')
20
                active_removed = servers[:i].count('1') + servers[n - j:].count('1')
21
22
                min_cost = min(min_cost, max(idle_count, active_removed))
23
        24
        print(min_cost)
25
26
solve()
27",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054525
1390054528,unknown,unknown,unknown,"1
def min_decommission_cost(s: str) -> int:
2
    n = len(s)
3
    ones_pos = [i for i, ch in enumerate(s) if ch == '1']
4
    T = len(ones_pos)
5
    6
    if T == 0:
7
        return 0
8
    9
    zeros_total = s.count('0')
10
    ans = min(zeros_total, T) 
11
    12
    for X in range(1, T + 1):
13
        for i in range(0, T - X + 1):
14
            left = ones_pos[i]
15
            right = ones_pos[i + X - 1]
16
            length = right - left + 1
17
            zeros_in_block = length - X
18
            candidate = max(zeros_in_block, T - X)
19
            ans = min(ans, candidate)
20
    21
    return ans
22
23
if __name__ == '__main__':
24
    T = int(input().strip())
25
    for _ in range(T):
26
        s = input().strip()
27
        print(min_decommission_cost(s))
28",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054528
1390054514,unknown,unknown,unknown,"1
import sys
2
3
def min_decommission_cost(binary_str):
4
    trimmed_str = binary_str.strip('0')
5
    6
    if not trimmed_str:
7
        return 0  
8
    9
10
    total_zeros = trimmed_str.count('0')
11
    min_cost = total_zeros  
12
    13
    removed_ones = 0
14
    for ch in trimmed_str:
15
        if ch == '1':
16
            removed_ones += 1
17
        else:
18
            total_zeros -= 1  
19
        20
        min_cost = min(min_cost, max(total_zeros, removed_ones))
21
    22
    return min_cost
23
24
def main():
25
    T = int(sys.stdin.readline().strip())
26
    results = []
27
    28
    for _ in range(T):
29
        binary_str = sys.stdin.readline().strip()
30
        results.append(str(min_decommission_cost(binary_str)))
31
    32
    sys.stdout.write(""\n"".join(results) + ""\n"")
33
34
if __name__ == ""__main__"":
35
    main()
36
37",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054514
1390054519,unknown,unknown,unknown,"1
def min_eff(n, k, s):
2
    if k >= n:
3
        return 0
4
5
    imp = []
6
    for i in range(n):
7
        imp.append((s[i] - (n - i - 1), i))
8
9
    imp.sort(reverse=True)
10
    skip = set(imp[i][1] for i in range(k))
11
12
    eff, p = 0, 0
13
    for i in range(n):
14
        if i in skip:
15
            p += 1
16
        else:
17
            eff += s[i] + p
18
19
    return eff
20
21
def solve():
22
    t = int(input())
23
    res = []
24
    for _ in range(t):
25
        n, k = map(int, input().split())
26
        s = list(map(int, input().split()))
27
        res.append(min_eff(n, k, s))
28
29
    for r in res:
30
        print(r)
31
32
if __name__ == ""__main__"":
33
    solve()
34",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054519
1390054523,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054523
1390054509,unknown,unknown,unknown,"1
import sys
2
3
def min_operations_to_make_consecutive():
4
    test_cases = int(sys.stdin.readline().strip())
5
    6
    for _ in range(test_cases):
7
        binary_str = sys.stdin.readline().strip()
8
        9
        ones_positions = [idx for idx, char in enumerate(binary_str) if char == '1']
10
        total_ones = len(ones_positions)
11
        12
        if total_ones == 0 or ones_positions[-1] - ones_positions[0] == total_ones - 1:
13
            print(0)
14
            continue
15
        16
        left, right = 0, total_ones
17
        18
        while right - left > 1:
19
            mid = (left + right) // 2
20
            ones_needed = total_ones - mid
21
            22
            feasible = False
23
            for i in range(mid + 1):
24
                start, end = ones_positions[i], ones_positions[i + ones_needed - 1]
25
                if (end - start + 1) - ones_needed <= mid:
26
                    feasible = True
27
                    break
28
            29
            if feasible:
30
                right = mid
31
            else:
32
                left = mid
33
        34
        print(right)
35
36
if __name__ == ""__main__"":
37
    min_operations_to_make_consecutive()",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054509
1390054510,unknown,unknown,unknown,"1
import sys
2
data = sys.stdin.read().split()
3
if not data:
4
    exit()
5
t = int(data[0])
6
ptr = 1
7
res = []
8
for _ in range(t):
9
    n = int(data[ptr]); k = int(data[ptr+1]); ptr += 2
10
    arr = list(map(int, data[ptr:ptr+n])); ptr += n
11
    total = sum(arr)
12
    b = [arr[i] - ((n - 1) - i) for i in range(n)]
13
    b.sort(reverse=True)
14
    best = 0
15
    s = 0
16
    for x in range(1, min(k, n) + 1):
17
        s += b[x-1]
18
        cur = s + (x * (x - 1)) // 2
19
        if cur > best:
20
            best = cur
21
    res.append(str(total - best))
22
sys.stdout.write(""\n"".join(res))",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054510
1390054507,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    """"""
3
    Calculate the minimum cost of decommissioning servers from the beginning and end of the rack.
4
    5
    Args:
6
        servers (str): Binary string representing rack of servers (0 for idle, 1 for active)
7
    8
    Returns:
9
        int: Minimum possible cost
10
    """"""
11
    n = len(servers)
12
    13
    # Try removing i servers from the beginning and j servers from the end
14
    min_cost = float('inf')
15
    16
    for i in range(n + 1):  # Including the case where we remove 0 from beginning
17
        for j in range(n + 1 - i):  # Including the case where we remove 0 from end
18
            if i + j > n:
19
                continue
20
                21
            # Remaining servers after decommissioning
22
            remaining = servers[i:n-j]
23
            24
            # Count idle servers that remain
25
            idle_remaining = remaining.count('0')
26
            27
            # Count active servers decommissioned
28
            active_decommissioned = 0
29
            for k in range(i):
30
                if servers[k] == '1':
31
                    active_decommissioned += 1
32
            for k in range(n-j, n):
33
                if servers[k] == '1':
34
                    active_decommissioned += 1
35
            36
            # Cost is the maximum of these two factors
37
            cost = max(idle_remaining, active_decommissioned)
38
            min_cost = min(min_cost, cost)
39
    40
    return min_cost
41
42
def main():
43
    # Read number of test cases
44
    t = int(input().strip())
45
    46
    results = []
47
    for _ in range(t):
48
        servers = input().strip()
49
        results.append(min_decommissioning_cost(servers))
50
    51
    # Print results
52
    for result in results:
53
        print(result)
54
55
if __name__ == ""__main__"":
56
    main()",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054507
1390054506,unknown,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n, k = map(int, input().split())
4
    a = list(map(int, input().split()))
5
    6
    if k >= n:
7
        print(0)
8
        continue
9
    10
    prev = [float('inf')] * (k + 1)
11
    prev[0] = 0
12
    13
    for i in range(n):
14
        curr = [float('inf')] * (k + 1)
15
        16
        for j in range(k + 1):
17
            if j > 0:
18
                curr[j] = min(curr[j], prev[j - 1])
19
            20
            if j <= i:
21
                curr[j] = min(curr[j], prev[j] + a[i] + j)
22
        23
        prev = curr
24
    25
    print(min(prev))
26",78,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054506
