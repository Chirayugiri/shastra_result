submission_id,username,problem_name,language,code,page,url
1390053308,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053308
1390053305,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
#include <algorithm>
5
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    for (int t = 0; t < T; t++) {
12
        string s;
13
        cin >> s;
14
        int n = s.size();
15
16
        // Step 1: Build prefix sums
17
        vector<int> prefix0(n + 1, 0);
18
        vector<int> prefix1(n + 1, 0);
19
        for (int i = 0; i < n; i++) {
20
            prefix0[i + 1] = prefix0[i] + (s[i] == '0' ? 1 : 0);
21
            prefix1[i + 1] = prefix1[i] + (s[i] == '1' ? 1 : 0);
22
        }
23
24
        // Step 2: Initialize min_cost with the case of removing everything
25
        int min_cost = prefix1[n];
26
27
        // Step 3: Iterate over all possible a and b
28
        for (int a = 0; a <= n; a++) {
29
            for (int b = a - 1; b < n; b++) {
30
                // Number of '0's in s[a..b]
31
                int zeros_remaining = (b >= a) ? prefix0[b + 1] - prefix0[a] : 0;
32
                // Number of '1's in prefix s[0..a-1] and suffix s[b+1..n-1]
33
                int ones_removed = prefix1[a] + (prefix1[n] - prefix1[b + 1]);
34
                // Cost for this substring
35
                int cost = max(zeros_remaining, ones_removed);
36
                // Update minimum cost
37
                min_cost = min(min_cost, cost);
38
            }
39
        }
40
41
        cout << min_cost << endl;
42
    }
43
    return 0;
44
}",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053305
1390053310,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # If we can skip all firewalls, no effort is needed
3
    if k >= n:
4
        return 0
5
    6
    # Initialize DP array: dp[i][j] -> min effort to breach first i firewalls with j skips
7
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
8
9
    # Base case: No firewalls, no effort needed
10
    for j in range(k + 1):
11
        dp[0][j] = 0  # If no firewalls exist, effort is zero
12
    13
    for i in range(1, n + 1):
14
        for j in range(min(k, i) + 1):  # Ensure j never exceeds i
15
            # Case 1: Don't skip current firewall
16
            if j <= i - 1:
17
                dp[i][j] = min(dp[i][j], dp[i-1][j] + strengths[i-1] + j)
18
            19
            # Case 2: Skip current firewall (only if skips are available)
20
            if j > 0:
21
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
22
    23
    return dp[n][k]
24
25
def solve():
26
    t = int(input())  # Read number of test cases
27
    28
    for _ in range(t):
29
        n, k = map(int, input().split())  # Read n (firewalls) and k (max skips)
30
        strengths = list(map(int, input().split()))  # Read firewall strengths
31
        32
        # Special case: If we can skip all firewalls
33
        if k >= n:
34
            print(0)
35
        else:
36
            print(min_effort_to_breach(n, k, strengths))
37
38
# Run the solution
39
solve()
40",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053310
1390053300,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_effort = float('inf')
6
7
    # Iterate through all possible combinations of firewalls to skip
8
    for i in range(1 << n):
9
        skipped_count = bin(i).count('1')  # Count the number of set bits (skipped firewalls)
10
11
        if skipped_count <= k:
12
            effort = 0
13
            skip_count_so_far = 0
14
            15
            for j in range(n):
16
                if (i >> j) & 1:  # Check if the j-th firewall is skipped
17
                    skip_count_so_far += 1
18
                else:
19
                    effort += a[j] + skip_count_so_far  # Add the cost of the firewall + increased security
20
            21
            min_effort = min(min_effort, effort)
22
23
    print(min_effort)
24
25
26
t = int(input())
27
for _ in range(t):
28
    solve()",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053300
1390053302,unknown,unknown,unknown,"1
def solution():
2
    m = int(input())
3
    for _ in range(m):
4
        s = input() 
5
        n = len(s)
6
        ans = float('inf')
7
        for i in range(n+1):
8
            for j in range(n-i+1):
9
                temp = s[i:n-j]
10
                count = temp.count('0')
11
                removed = s[:i].count('1')+ s[n-j:].count('1')
12
                ans = min(ans,max(count,removed))
13
        print(ans)
14
solution()",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053302
1390053304,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    """"""
3
    Calculate minimum effort to breach n firewalls with optimal strategy.
4
    5
    Args:
6
        n: Number of firewalls
7
        k: Maximum number of firewalls that can be skipped
8
        firewalls: List of firewall strengths
9
        10
    Returns:
11
        Minimum effort required
12
    """"""
13
    # If we can skip all firewalls, return 0
14
    if k >= n:
15
        return 0
16
    17
    # Initialize dp array with infinity
18
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
19
    20
    # Base case: no firewalls, no effort
21
    dp[0][0] = 0
22
    23
    for i in range(1, n + 1):
24
        firewall_idx = i - 1  # Convert to 0-indexed
25
        26
        for j in range(k + 1):
27
            # Option 1: Don't skip the current firewall
28
            if j <= i - 1:  # Ensure we have processed enough firewalls
29
                dp[i][j] = min(dp[i][j], dp[i-1][j] + firewalls[firewall_idx] + j)
30
            31
            # Option 2: Skip the current firewall
32
            if j > 0:  # We must have at least one skip available
33
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
34
    35
    # Return the minimum effort after processing all firewalls
36
    return dp[n][k]
37
38
def main():
39
    t = int(input())  # Number of test cases
40
    41
    for _ in range(t):
42
        n, k = map(int, input().split())
43
        firewalls = list(map(int, input().split()))
44
        45
        min_effort = min_effort_to_breach(n, k, firewalls)
46
        print(min_effort)
47
48
if __name__ == ""__main__"":
49
    main()",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053304
1390053290,unknown,unknown,unknown,"1
from collections import deque
2
import sys
3
4
def faults(arr, n, k):
5
    result = []
6
    dq = deque()  
7
8
    for i in range(n):
9
        if dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
        12
        if arr[i] < 0:
13
            dq.append(i)
14
15
        if i >= k - 1:
16
            result.append(arr[dq[0]] if dq else 0)
17
18
    return result
19
20
def test_cases():
21
    t = int(sys.stdin.readline().strip())  
22
    results = []
23
    24
    for _ in range(t):
25
        n, k = map(int, sys.stdin.readline().strip().split())  
26
        arr = list(map(int, sys.stdin.readline().strip().split()))  
27
        28
        results.append("" "".join(map(str,faults(arr, n, k))))  
29
    30
    print(""\n"".join(results))  
31
32
33
if __name__ == ""__main__"":
34
    test_cases()
35",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053290
1390053291,unknown,unknown,unknown,"1
def minimum_decommission_cost(server_rack):
2
    n = len(server_rack)
3
    4
    min_cost = float('inf')
5
    6
    for prefix in range(n + 1):
7
        for suffix in range(n + 1 - prefix):
8
            if prefix + suffix > n:
9
                continue
10
                11
            prefix_active = server_rack[:prefix].count('1')
12
            suffix_active = server_rack[n-suffix:].count('1')
13
            total_active_removed = prefix_active + suffix_active
14
            15
            remaining_idle = server_rack[prefix:n-suffix].count('0')
16
            17
            cost = max(remaining_idle, total_active_removed)
18
            19
            min_cost = min(min_cost, cost)
20
    21
    return min_cost
22
23
def solve_test_cases():
24
    t = int(input().strip())
25
    results = []
26
    27
    for _ in range(t):
28
        server_rack = input().strip()
29
        results.append(minimum_decommission_cost(server_rack))
30
    31
    return results
32
results = solve_test_cases()
33
for result in results:
34
    print(result)",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053291
1390053298,unknown,unknown,unknown,"1
     2
        3
for _ in range(int(input())):
4
    x,y = map(int,input().split())
5
    arr = list(map(int,input().split()))
6
    res = []
7
    for i in range(x-y+1):
8
        batch = arr[i:i+y]
9
        for a in batch:
10
            if a<0:
11
                res.append(a)
12
                break
13
            elif a>=0 and a == batch[-1]: 
14
                res.append(0)
15
                16
    for i in res:
17
        print(i, end = ' ')
18
    print()
19
20
21
    22
 23
            24
            ",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053298
1390053286,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0 
5
6
    for i in range(1, n + 1):
7
        for j in range(k + 1):
8
            9
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
10
11
            12
            if j > 0:
13
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
14
15
    16
    return min(dp[n])
17
18
T = int(input())  # Number of test cases
19
for _ in range(T):
20
    n, k = map(int, input().split())  # Read n and k
21
    firewalls = list(map(int, input().split()))  # Firewall strengths
22
23
    # Compute and print the minimum effort
24
    print(min_effort(n, k, firewalls))",143,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053286
