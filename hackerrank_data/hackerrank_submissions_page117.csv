submission_id,username,problem_name,language,code,page,url
1390053801,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    if k >= n:
3
        return 0
4
5
    min_effort = sum(firewalls)
6
    7
    for i in range(n):
8
        temp_firewalls = firewalls[:]
9
        temp_firewalls[i] = 0
10
        11
        for j in range(i + 1, n):
12
            temp_firewalls[j] += 1
13
        14
        min_effort = min(min_effort, sum(temp_firewalls))
15
16
    return min_effort
17
18
T = int(input())
19
for _ in range(T):
20
    n, k = map(int, input().split())
21
    firewalls = list(map(int, input().split()))
22
    print(min_effort_to_breach(n, k, firewalls))
23",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053801
1390053806,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()
74",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053806
1390053808,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FirewallEffort {
4
    public static int findMinimumEffort(int[] arr, int k) {
5
        int totalEffort = Arrays.stream(arr).sum();
6
        int minEffort = totalEffort;
7
        8
        int windowSum = 0;
9
        for (int i = 0; i < k; i++) {
10
            windowSum += arr[i];
11
        }
12
        minEffort = Math.min(minEffort, totalEffort - windowSum);
13
        14
        for (int i = k; i < arr.length; i++) {
15
            windowSum += arr[i] - arr[i - k];
16
            minEffort = Math.min(minEffort, totalEffort - windowSum);
17
        }
18
        19
        return minEffort;
20
    }
21
22
    public static void main(String[] args) {
23
        Scanner scanner = new Scanner(System.in);
24
        int t = scanner.nextInt();
25
        26
        while (t-- > 0) {
27
            int n = scanner.nextInt();
28
            int k = scanner.nextInt();
29
            int[] arr = new int[n];
30
            31
            for (int i = 0; i < n; i++) {
32
                arr[i] = scanner.nextInt();
33
            }
34
            35
            System.out.println(findMinimumEffort(arr, k));
36
        }
37
        38
        scanner.close();
39
    }
40
}
41",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053808
1390053800,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner scanner = new Scanner(System.in);
11
        int t = scanner.nextInt(); 
12
13
        while (t-- > 0) {
14
            int n = scanner.nextInt(); 
15
            int k = scanner.nextInt(); 
16
            int[] arr = new int[n];
17
18
            for (int i = 0; i < n; i++) {
19
                arr[i] = scanner.nextInt();
20
            }
21
22
            List<Integer> ans = findResult(arr, k);
23
24
            for (int num : ans) {
25
                System.out.print(num + "" "");
26
            }
27
            System.out.println();
28
        }
29
        scanner.close();
30
     31
    }
32
    public static List<Integer> findResult(int []arr, int k){
33
        List<Integer> ans = new ArrayList<Integer>();
34
        Deque<Integer> deque = new LinkedList<>();
35
        36
        for(int i =0;i<k;i++){
37
            if(arr[i]<0){
38
            deque.addLast(i);
39
            }
40
        }
41
        if(!deque.isEmpty()){
42
            ans.add(arr[deque.peekFirst()]);
43
        }else{
44
            ans.add(0);
45
        }
46
        for(int i=k;i<arr.length;i++){
47
            if(!deque.isEmpty()&&deque.peekFirst()<=i-k){
48
                deque.pollFirst();
49
            }
50
            if(arr[i]<0){
51
            deque.addLast(i);
52
            }
53
            if(!deque.isEmpty()){
54
                ans.add(arr[deque.peekFirst()]);
55
            }else{
56
                ans.add(0);
57
            }
58
        }
59
        60
        61
        return ans;
62
     63
    }
64
}",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053800
1390053790,unknown,unknown,unknown,"1
def f(a, k):
2
3
    r = []
4
5
    n = len(a)
6
7
    for i in range(n - k + 1):
8
9
        b = a[i:i + k]
10
11
        f = next((x for x in b if x < 0), 0)  # Pick first negative, else 0
12
13
        r.append(f)
14
15
    return r
16
17
18
t = int(input())
19
20
for _ in range(t):
21
22
    n, k = map(int, input().split())
23
24
    a = list(map(int, input().split()))
25
26
    print(*f(a, k))",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053790
1390053791,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053791
1390053794,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultySensor {
4
    public static List<Integer> earliestFaults(int[] arr, int k) {
5
        List<Integer> result = new ArrayList<>();
6
        Deque<Integer> deque = new LinkedList<>();
7
8
        for (int i = 0; i < arr.length; i++) {
9
            // Remove out-of-window elements
10
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
11
                deque.poll();
12
            }
13
14
            // Add new faulty readings
15
            if (arr[i] < 0) {
16
                deque.offer(i);
17
            }
18
19
            // Collect results for valid windows
20
            if (i >= k - 1) {
21
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
22
            }
23
        }
24
        return result;
25
    }
26
27
    public static void main(String[] args) {
28
        Scanner scanner = new Scanner(System.in);
29
        int t = scanner.nextInt(); // Number of test cases
30
31
        while (t-- > 0) {
32
            int n = scanner.nextInt(); // Array size
33
            int k = scanner.nextInt(); // Batch size
34
            int[] arr = new int[n];
35
36
            for (int i = 0; i < n; i++) {
37
                arr[i] = scanner.nextInt();
38
            }
39
40
            // Compute and print results
41
            List<Integer> faults = earliestFaults(arr, k);
42
            for (int val : faults) {
43
                System.out.print(val + "" "");
44
            }
45
            System.out.println();
46
        }
47
        scanner.close();
48
    }
49
}",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053794
1390053789,unknown,unknown,unknown,"1
import bisect
2
3
t = int(input())
4
for _ in range(t):
5
    s = input().strip()
6
    n = len(s)
7
    8
    prefix_0 = [0] * (n + 1)  
9
    prefix_1 = [0] * (n + 1)  
10
    for i in range(n):
11
        prefix_0[i + 1] = prefix_0[i] + (1 if s[i] == '0' else 0)
12
        prefix_1[i + 1] = prefix_1[i] + (1 if s[i] == '1' else 0)
13
    total_1 = prefix_1[n]  
14
    15
    low, high = 0, n
16
    while low < high:
17
        m = (low + high) // 2  
18
        possible = False
19
        for j in range(n + 1):
20
            target = prefix_0[j] - m
21
            i = bisect.bisect_left(prefix_0, target)
22
            if i <= j:
23
                ones_removed = prefix_1[i] + (total_1 - prefix_1[j])
24
                if ones_removed <= m:
25
                    possible = True
26
                    break
27
        if possible:
28
            high = m  
29
        else:
30
            low = m + 1 
31
    print(low)",117,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053789
