submission_id,username,problem_name,language,code,page,url
1390054116,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        # Identify the first and last active server (1)
6
        first_active = servers.find('1')
7
        last_active = servers.rfind('1')
8
        9
        # If there are no active servers, the cost is 0
10
        if first_active == -1:
11
            results.append(0)
12
            continue
13
        14
        # Extract the relevant segment of servers
15
        trimmed_servers = servers[first_active:last_active + 1]
16
        17
        # Count idle servers (0's) that remain
18
        idle_remaining = trimmed_servers.count('0')
19
        20
        # Count active servers (1's) that need to be removed
21
        active_removed = servers[:first_active].count('1') + servers[last_active + 1:].count('1')
22
        23
        # Compute the cost
24
        cost = max(idle_remaining, active_removed)
25
        results.append(str(cost))
26
    27
    return results
28
29
# Read input
30
T = int(input().strip())
31
test_cases = [input().strip() for _ in range(T)]
32
33
# Compute and print results
34
print(""\n"".join(min_decommissioning_cost(test_cases)))
35",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054116
1390054118,unknown,unknown,unknown,"1
import sys
2
import threading
3
4
def main():
5
    T = int(sys.stdin.readline())
6
    7
    for _ in range(T):
8
        n, k = map(int, sys.stdin.readline().split())
9
        a = list(map(int, sys.stdin.readline().split()))
10
11
        benefits = []
12
        for i in range(n):
13
            benefit = a[i] - (n - i - 1)
14
            benefits.append((benefit, i))
15
        16
        benefits.sort(reverse=True)
17
18
        skipped = [False] * n
19
20
        for i in range(k):
21
            _, idx = benefits[i]
22
            skipped[idx] = True
23
24
        total_effort = 0
25
        penalty = 0 
26
        for i in range(n):
27
            if skipped[i]:
28
                penalty += 1
29
            else:
30
                total_effort += a[i] + penalty
31
32
        print(total_effort)
33
34
threading.Thread(target=main).start()",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054118
1390054120,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
3
    # Edge case: if we can skip all firewalls
4
    if k >= n:
5
        return 0
6
        7
    # We need to find the optimal firewalls to skip
8
    # This is a combinatorial problem
9
    10
    # First, let's calculate the impact of skipping each firewall
11
    # Impact = firewall's strength - penalty to subsequent firewalls
12
    impacts = []
13
    14
    for i in range(n):
15
        # If we skip this firewall, we save its strength
16
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
17
        impact = strengths[i] - (n - i - 1)
18
        impacts.append((impact, i))
19
    20
    # Sort by impact in descending order
21
    impacts.sort(reverse=True)
22
    23
    # Select the k firewalls with the highest impact to skip
24
    to_skip = set(impacts[i][1] for i in range(k))
25
    26
    # Calculate the total effort
27
    total_effort = 0
28
    penalty = 0
29
    30
    for i in range(n):
31
        if i in to_skip:
32
            # Skip this firewall
33
            penalty += 1
34
        else:
35
            # Breach this firewall (with penalty applied)
36
            total_effort += strengths[i] + penalty
37
    38
    return total_effort
39
40
def solve_test_cases():
41
    42
    t = int(input())  # Number of test cases
43
    results = []
44
    45
    for _ in range(t):
46
        n, k = map(int, input().split())
47
        strengths = list(map(int, input().split()))
48
        results.append(min_effort_to_breach(n, k, strengths))
49
    50
    return results
51
52
# Main function to run the solution
53
def main():
54
    results = solve_test_cases()
55
    56
    # Print the results
57
    for result in results:
58
        print(result)
59
60
if _name_ == ""_main_"":
61
    main()",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054120
1390054110,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FirewallBreach {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
8
        while (T-- > 0) {
9
            int n = scanner.nextInt();
10
            int k = scanner.nextInt();
11
            int[] a = new int[n];
12
13
            for (int i = 0; i < n; i++) {
14
                a[i] = scanner.nextInt();
15
            }
16
17
            if (k >= n) {
18
                System.out.println(0);
19
                continue;
20
            }
21
22
            long totalEffort = 0;
23
            for (int value : a) {
24
                totalEffort += value;
25
            }
26
27
            if (k == 0) {
28
                System.out.println(totalEffort);
29
                continue;
30
            }
31
32
            long[] netReduction = new long[n];
33
            for (int i = 0; i < n; i++) {
34
                netReduction[i] = a[i] - (n - i - 1);
35
            }
36
37
            Arrays.sort(netReduction);
38
39
            long maxReduction = 0;
40
            for (int i = 0; i < k; i++) {
41
                maxReduction += netReduction[n - 1 - i];
42
            }
43
44
            long minEffort = totalEffort - maxReduction;
45
            System.out.println(minEffort);
46
        }
47
48
        scanner.close();
49
    }
50
}
51",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054110
1390054111,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class DataCenterOptimization {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = Integer.parseInt(sc.nextLine());
7
        while (T-- > 0) {
8
            String s = sc.nextLine();
9
            int n = s.length();
10
11
            int totalActive = 0, totalIdle = 0;
12
            for (char c : s.toCharArray()) {
13
                if (c == '1') totalActive++;
14
                else totalIdle++;
15
            }
16
17
            int[] prefixActive = new int[n + 1];
18
            int[] prefixIdle = new int[n + 1];
19
            for (int i = 0; i < n; i++) {
20
                prefixActive[i + 1] = prefixActive[i] + (s.charAt(i) == '1' ? 1 : 0);
21
                prefixIdle[i + 1] = prefixIdle[i] + (s.charAt(i) == '0' ? 1 : 0);
22
            }
23
24
            int minCost = Integer.MAX_VALUE;
25
26
            // Try all possible (l, r) subarrays to keep
27
            for (int l = 0; l <= n; l++) {
28
                for (int r = l; r <= n; r++) {
29
                    int idleLeft = prefixIdle[r] - prefixIdle[l];
30
                    int activeRemoved = prefixActive[l] + (totalActive - prefixActive[r]);
31
                    int cost = Math.max(idleLeft, activeRemoved);
32
                    minCost = Math.min(minCost, cost);
33
                }
34
            }
35
36
            System.out.println(minCost);
37
        }
38
        sc.close();
39
    }
40
}
41",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054111
1390054114,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if _name_ == ""_main_"":
73
    main()",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054114
1390054101,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    skipped_indices = set()
6
    remaining_indices = set(range(n))
7
    current_effort = sum(a)
8
    min_effort = current_effort
9
10
    for _ in range(k):
11
        best_skip_index = -1
12
        max_benefit = -float('inf')
13
14
        for i in list(remaining_indices):
15
            benefit = a[i]
16
            increase = 0
17
            for j in remaining_indices:
18
                if j > i:
19
                    increase += 1
20
            current_benefit = benefit - increase
21
            if current_benefit > max_benefit:
22
                max_benefit = current_benefit
23
                best_skip_index = i
24
25
        if best_skip_index != -1 and max_benefit > 0:
26
            skipped_indices.add(best_skip_index)
27
            remaining_indices.remove(best_skip_index)
28
            current_effort -= max_benefit
29
            min_effort = min(min_effort, current_effort)
30
        else:
31
            break
32
33
    final_effort = 0
34
    skipped_list = sorted(list(skipped_indices))
35
    for i in range(n):
36
        if i not in skipped_indices:
37
            strength_increase = 0
38
            for skipped_index in skipped_list:
39
                if skipped_index < i:
40
                    strength_increase += 1
41
            final_effort += a[i] + strength_increase
42
    min_effort = min(min_effort, final_effort)
43
44
    print(min_effort)
45
46
47
t = int(input())
48
for _ in range(t):
49
    solve()",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054101
1390054104,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    idx = 0
6
    T = int(input[idx])
7
    idx += 1
8
    for _ in range(T):
9
        n, k = int(input[idx]), int(input[idx+1])
10
        idx +=2
11
        a = list(map(int, input[idx:idx+n]))
12
        idx +=n
13
        sum_a = sum(a)
14
        v = []
15
        for i in range(n):
16
            val = a[i] - (n - i -1)
17
            v.append(val)
18
        v.sort(reverse=True)
19
        prefix = [0] * (n+1)
20
        for i in range(n):
21
            prefix[i+1] = prefix[i] + v[i]
22
        max_sum = 0
23
        max_t = min(k, n)
24
        for t in range(0, max_t+1):
25
            current = prefix[t] + t*(t-1)//2
26
            if current > max_sum:
27
                max_sum = current
28
        print(sum_a - max_sum)
29
30
if __name__ == ""__main__"":
31
    main()",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054104
1390054106,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054106
1390054100,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",99,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054100
