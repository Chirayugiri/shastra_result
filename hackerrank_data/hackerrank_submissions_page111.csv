submission_id,username,problem_name,language,code,page,url
1390053907,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process the first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Process rest of the array
13
    for i in range(k, len(arr) + 1):
14
        # Append the earliest faulty reading
15
        if dq:
16
            result.append(arr[dq[0]])
17
        else:
18
            result.append(0)
19
        20
        # Remove elements not in the window
21
        if dq and dq[0] == i - k:
22
            dq.popleft()
23
        24
        # Add the next element if it is faulty
25
        if i < len(arr) and arr[i] < 0:
26
            dq.append(i)
27
    28
    return result
29
30
def process_test_cases(test_cases):
31
    results = []
32
    for n, k, arr in test_cases:
33
        results.append("" "".join(map(str, earliest_faults(arr, k))))
34
    return ""\n"".join(results)
35
36
# Example test cases for debugging
37
test_cases = [
38
    (5, 2, [-8, 2, 3, -6, 10]),
39
    (8, 3, [12, -1, -7, 8, -15, 30, 16, 28])
40
]
41
42
# Running test cases
43
print(process_test_cases(test_cases))",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053907
1390053908,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053908
1390053909,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    min_cost = float('inf')
6
    7
    for i in range(n + 1):
8
        for j in range(n - i + 1):
9
            remaining = s[i:n-j]
10
            11
            idle_count = 0
12
            for char in remaining:
13
                if char == '0':
14
                    idle_count += 1
15
                    16
            removed_count = 0
17
            for char in s[:i]:
18
                if char == '1':
19
                    removed_count += 1
20
            for char in s[n-j:]:
21
                if char == '1':
22
                    removed_count += 1
23
            24
            cost = max(idle_count, removed_count)
25
            min_cost = min(min_cost, cost)
26
            27
    print(min_cost)
28
29
t = int(input())
30
for _ in range(t):
31
    solve()",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053909
1390053901,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
   public class Solution {
8
    public static void main(String[] args) {
9
        Scanner scanner = new Scanner(System.in);
10
        int t = scanner.nextInt(); // Number of test cases
11
        12
        for (int tc = 0; tc < t; tc++) {
13
            int n = scanner.nextInt(); // Size of array
14
            int k = scanner.nextInt(); // Batch size
15
            16
            int[] arr = new int[n];
17
            for (int i = 0; i < n; i++) {
18
                arr[i] = scanner.nextInt();
19
            }
20
            21
            List<Integer> result = findEarliestFaults(arr, k);
22
            23
            for (int fault : result) {
24
                System.out.print(fault + "" "");
25
            }
26
            System.out.println();
27
        }
28
        scanner.close();
29
    }
30
    31
    public static List<Integer> findEarliestFaults(int[] arr, int k) {
32
        List<Integer> result = new ArrayList<>();
33
        34
        for (int i = 0; i <= arr.length - k; i++) {
35
            int earliestFault = 0; // when no faults
36
            37
    38
            for (int j = i; j < i + k; j++) {
39
                if (arr[j] < 0) {
40
                    earliestFault = arr[j];
41
                    break; 
42
                }
43
            }
44
            45
            result.add(earliestFault);
46
        }
47
        48
        return result;
49
    }
50
}
51",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053901
1390053902,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_eff= float('inf')
6
7
    for i in range(1 << n):
8
        skip = []
9
        effort = 0
10
        current_a = a[:] 
11
        skip_count = 0
12
13
        for j in range(n):
14
            if (i >> j) & 1:
15
                skip.append(j)
16
                skip_count += 1
17
18
        if skip_count <= k:
19
            skip.sort()
20
            skip_index = 0
21
22
            for j in range(n):
23
                if skip_index < len(skip) and skip[skip_index] == j:
24
                  for index in range(j+1,n):
25
                    current_a[index] +=1
26
                  skip_index += 1
27
                else:
28
                    effort += current_a[j]
29
30
            min_eff = min(min_eff, effort)
31
32
    print(min_eff)
33
34
t = int(input())
35
for _ in range(t):
36
    solve()",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053902
1390053904,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process the first k elements
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the result for the first window
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process the remaining windows
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of the current window
18
        while dq and dq[0] <= i - k:
19
            dq.popleft()
20
        21
        # Add the current element if it is negative
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store the result for the current window
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
# Read input
31
t = int(input())
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    36
    # Compute and print results
37
    print("" "".join(map(str, earliest_faulty_readings(arr, k))))",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053904
1390053897,unknown,unknown,unknown,"1
def min_decommission_cost(server_rack):
2
    total_active = server_rack.count('1')
3
    total_idle = server_rack.count('0')
4
5
    min_cost = min(total_active, total_idle)  # Worst case: remove all active or all idle
6
7
    left, right = 0, len(server_rack) - 1
8
    removed_active = 0
9
    removed_idle = 0
10
11
    # Try decommissioning from both ends
12
    while left <= right:
13
        if server_rack[left] == '0':
14
            removed_idle += 1
15
            left += 1
16
        elif server_rack[right] == '0':
17
            removed_idle += 1
18
            right -= 1
19
        elif server_rack[left] == '1':
20
            removed_active += 1
21
            left += 1
22
        elif server_rack[right] == '1':
23
            removed_active += 1
24
            right -= 1
25
        26
        remaining_idle = total_idle - removed_idle
27
        min_cost = min(min_cost, max(remaining_idle, removed_active))
28
29
    return min_cost
30
31
32
# Read input
33
T = int(input())  # Number of test cases
34
results = []
35
36
for _ in range(T):
37
    server_rack = input().strip()
38
    results.append(min_decommission_cost(server_rack))
39
40
# Print results
41
for res in results:
42
    print(res)",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053897
1390053899,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); 
8
        9
        while(T-- > 0) {
10
            int n = sc.nextInt();
11
            int k = sc.nextInt();
12
            int[] a = new int[n];
13
            for (int i = 0; i < n; i++){
14
                a[i] = sc.nextInt();
15
            }
16
            17
            18
            if(k >= n) {
19
                System.out.println(0);
20
                continue;
21
            }
22
            23
           24
            long INF = Long.MAX_VALUE / 2;
25
            long[] dp = new long[k+1];
26
            Arrays.fill(dp, INF);
27
            dp[0] = 0;
28
            29
          30
            for (int i = 0; i < n; i++) {
31
                int lim = Math.min(i+1, k); 
32
                long[] newdp = new long[k+1];
33
                Arrays.fill(newdp, INF);
34
                35
                .
36
                for (int j = lim; j >= 0; j--) {
37
                   38
                    newdp[j] = Math.min(newdp[j], dp[j] + a[i] + j);
39
                    40
                    41
                    if(j < k) {
42
                        newdp[j+1] = Math.min(newdp[j+1], dp[j]);
43
                    }
44
                }
45
                dp = newdp;
46
            }
47
            48
           49
            long ans = INF;
50
            for (int j = 0; j <= k; j++) {
51
                ans = Math.min(ans, dp[j]);
52
            }
53
            System.out.println(ans);
54
        }
55
        sc.close();
56
    }
57
}
58",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053899
1390053898,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    # Special case: If we can skip all firewalls, the effort is 0
3
    if k >= n:
4
        return 0
5
    6
    # Try all possible combinations of skipping 0 to k firewalls
7
    firewalls_sorted = sorted(firewalls)  # Sort to prioritize skipping stronger firewalls
8
    9
    min_effort = float('inf')
10
    11
    # Try skipping 0 to k firewalls
12
    for skipped in range(k + 1):
13
        # Skip the strongest firewalls
14
        remaining = firewalls_sorted[:n-skipped]
15
        16
        # Calculate the total effort with penalty
17
        effort = sum(remaining) + skipped
18
        min_effort = min(min_effort, effort)
19
    20
    return min_effort
21
22
# Read input
23
t = int(input().strip())  # Number of test cases
24
for _ in range(t):
25
    n, k = map(int, input().split())
26
    firewalls = list(map(int, input().split()))
27
    print(min_effort_to_breach(n, k, firewalls))",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053898
1390053896,unknown,unknown,unknown,"1
def minimum_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        if k >= n:
6
            results.append(0)
7
            continue
8
        9
        total = sum(a)
10
        11
        # Create list of (a[i] + i, i, a[i])
12
        candidates = [(a[i] + i, i, a[i]) for i in range(n)]
13
        # Sort candidates in descending order of (a[i] + i)
14
        candidates.sort(reverse=True, key=lambda x: x[0])
15
        # Select top k candidates
16
        selected = candidates[:k]
17
        # Sort selected by their i in ascending order
18
        selected.sort(key=lambda x: x[1])
19
        20
        sum_skipped = sum(x[2] for x in selected)
21
        added = 0
22
        for j in range(k):
23
            i = selected[j][1]
24
            # Number of non-skipped firewalls after i
25
            non_skipped_after = (n - i - 1) - (k - j - 1)
26
            added += non_skipped_after
27
        28
        min_effort = total - sum_skipped + added
29
        results.append(min_effort)
30
    31
    return results
32
33
def main():
34
    import sys
35
    input = sys.stdin.read().split()
36
    idx = 0
37
    T = int(input[idx])
38
    idx += 1
39
    test_cases = []
40
    for _ in range(T):
41
        n = int(input[idx])
42
        k = int(input[idx+1])
43
        idx += 2
44
        a = list(map(int, input[idx:idx+n]))
45
        idx += n
46
        test_cases.append((n, k, a))
47
    res = minimum_effort(test_cases)
48
    for r in res:
49
        print(r)
50
51
if __name__ == ""__main__"":
52
    main()",111,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053896
