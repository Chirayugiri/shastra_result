submission_id,username,problem_name,language,code,page,url
1390053581,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        7
        # Precompute prefix sums for 0's and 1's
8
        prefix_0 = [0] * (n + 1)
9
        prefix_1 = [0] * (n + 1)
10
        for i in range(n):
11
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
12
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
13
        14
        # Iterate through all possible splits
15
        for i in range(n + 1):
16
            for j in range(i, n + 1):
17
                # Remaining segment is from i to j-1
18
                remaining_0s = prefix_0[j] - prefix_0[i]
19
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
20
                cost = max(remaining_0s, removed_1s)
21
                if cost < min_cost:
22
                    min_cost = cost
23
        results.append(min_cost)
24
    return results
25
26
# Read input
27
T = int(input())
28
test_cases = [input().strip() for _ in range(T)]
29
30
# Compute results
31
results = min_decommission_cost(test_cases)
32
33
# Print output
34
for result in results:
35
    print(result)
36",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053581
1390053582,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        7
        # Precompute prefix sums for 0's and 1's
8
        prefix_0 = [0] * (n + 1)
9
        prefix_1 = [0] * (n + 1)
10
        for i in range(n):
11
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
12
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
13
        14
        # Iterate through all possible splits
15
        for i in range(n + 1):
16
            for j in range(i, n + 1):
17
                # Remaining segment is from i to j-1
18
                remaining_0s = prefix_0[j] - prefix_0[i]
19
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
20
                cost = max(remaining_0s, removed_1s)
21
                if cost < min_cost:
22
                    min_cost = cost
23
        results.append(min_cost)
24
    return results
25
26
# Read input
27
T = int(input())
28
test_cases = [input().strip() for _ in range(T)]
29
30
# Compute results
31
results = min_decommission_cost(test_cases)
32
33
# Print output
34
for result in results:
35
    print(result)
36
37",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053582
1390053586,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    """"""
3
    Calculate minimum effort to breach n firewalls with optimal strategy.
4
    5
    Args:
6
        n: Number of firewalls
7
        k: Maximum number of firewalls that can be skipped
8
        firewalls: List of firewall strengths
9
        10
    Returns:
11
        Minimum effort required
12
    """"""
13
    # If we can skip all firewalls, return 0
14
    if k >= n:
15
        return 0
16
    17
    # Initialize dp array with infinity
18
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
19
    20
    # Base case: no firewalls, no effort
21
    dp[0][0] = 0
22
    23
    for i in range(1, n + 1):
24
        firewall_idx = i - 1  # Convert to 0-indexed
25
        26
        for j in range(k + 1):
27
            # Option 1: Don't skip the current firewall
28
            if j <= i - 1:  # Ensure we have processed enough firewalls
29
                dp[i][j] = min(dp[i][j], dp[i-1][j] + firewalls[firewall_idx] + j)
30
            31
            # Option 2: Skip the current firewall
32
            if j > 0:  # We must have at least one skip available
33
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
34
    35
    # Return the minimum effort after processing all firewalls
36
    return dp[n][k]
37
38
def main():
39
    t = int(input())  # Number of test cases
40
    41
    for _ in range(t):
42
        n, k = map(int, input().split())
43
        firewalls = list(map(int, input().split()))
44
        45
        min_effort = min_effort_to_breach(n, k, firewalls)
46
        print(min_effort)
47
48
if __name__ == ""__main__"":
49
    main()",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053586
1390053578,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class FirewallBreach {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
9
        while (t-- > 0) {
10
            int n = scanner.nextInt();
11
            int k = scanner.nextInt();
12
            int[] a = new int[n];
13
14
            for (int i = 0; i < n; i++) {
15
                a[i] = scanner.nextInt();
16
            }
17
18
            int minEffort = Integer.MAX_VALUE;
19
20
            for (int i = 0; i < (1 << n); i++) {
21
                int skippedCount = 0;
22
                int effort = 0;
23
                int currentSkipCount = 0;
24
25
                for (int j = 0; j < n; j++) {
26
                    if ((i & (1 << j)) != 0) {
27
                        skippedCount++;
28
                    }
29
                }
30
31
                if (skippedCount <= k) {
32
                    for (int j = 0; j < n; j++) {
33
                        if ((i & (1 << j)) != 0) {
34
                            currentSkipCount++;
35
                        } else {
36
                            effort += a[j] + currentSkipCount;
37
                        }
38
                    }
39
                    minEffort = Math.min(minEffort, effort);
40
                }
41
            }
42
43
            System.out.println(minEffort);
44
        }
45
        scanner.close();
46
    }
47
}",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053578
1390053580,unknown,unknown,unknown,"1
def earliest_faulty_readings(arr, n, k):
2
    result = []
3
    for i in range(n - k + 1):
4
        batch = arr[i:i + k]
5
        first_faulty = next((x for x in batch if x < 0), 0)
6
        result.append(first_faulty)
7
    return result
8
9
# Read input
10
t = int(input())
11
for _ in range(t):
12
    n, k = map(int, input().split())
13
    arr = list(map(int, input().split()))
14
    print(*earliest_faulty_readings(arr, n, k))
15",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053580
1390053577,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
    n = len(arr)
5
    result, dq = [], deque()
6
    7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
11
    for i in range(n - k + 1):
12
        result.append(arr[dq[0]] if dq else 0)
13
        if dq and dq[0] == i:
14
            dq.popleft()
15
        if i + k < n and arr[i + k] < 0:
16
            dq.append(i + k)
17
    18
    return result
19
20
t = int(input())
21
for _ in range(t):
22
    n, k = map(int, input().split())
23
    arr = list(map(int, input().split()))
24
    print(*earliest_faults(arr, k))
25",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053577
1390053571,unknown,unknown,unknown,"1
def minimum_pruning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    active_prefix_sum = [0] * (n + 1)
5
    for i in range(n):
6
        active_prefix_sum[i + 1] = active_prefix_sum[i] + (1 if server_rack[i] == '1' else 0)
7
    8
    active_suffix_sum = [0] * (n + 1)
9
    for i in range(n - 1, -1, -1):
10
        active_suffix_sum[n - 1 - i] = active_suffix_sum[n - i - 2] if n - i - 2 >= 0 else 0
11
        active_suffix_sum[n - 1 - i] += (1 if server_rack[i] == '1' else 0)
12
    13
    min_cost = float('inf')
14
    15
    for left in range(n + 1):
16
        for right in range(n + 1 - left):
17
            if left == 0 and right == 0:
18
                continue
19
            20
            active_decommissioned = active_prefix_sum[left] + active_suffix_sum[right]
21
            22
            remaining_length = n - left - right
23
            remaining_active = active_prefix_sum[left + remaining_length] - active_prefix_sum[left]
24
            remaining_idle = remaining_length - remaining_active
25
            26
            cost = max(remaining_idle, active_decommissioned)
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
def main():
32
    t = int(input().strip())
33
    34
    results = []
35
    for _ in range(t):
36
        server_rack = input().strip()
37
        results.append(minimum_pruning_cost(server_rack))
38
    39
    for result in results:
40
        print(result)
41
42
if __name__ == ""__main__"":
43
    main()",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053571
1390053572,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    // Function to compute the minimum decommission cost for a given test case string
6
    public static int minDecommissionCost(String testCase) {
7
        int n = testCase.length();
8
        int minCost = Integer.MAX_VALUE;
9
10
        // Create prefix sum arrays for '0's and '1's of length n+1
11
        int[] prefix0 = new int[n + 1];
12
        int[] prefix1 = new int[n + 1];
13
14
        // Precompute prefix sums for 0's and 1's
15
        for (int i = 0; i < n; i++) {
16
            char ch = testCase.charAt(i);
17
            prefix0[i + 1] = prefix0[i] + (ch == '0' ? 1 : 0);
18
            prefix1[i + 1] = prefix1[i] + (ch == '1' ? 1 : 0);
19
        }
20
21
        // Iterate through all possible splits using indices i and j
22
        // i represents the start index for the ""removed"" section at the beginning,
23
        // and j represents the end index (exclusive) for the remaining segment.
24
        for (int i = 0; i <= n; i++) {
25
            for (int j = i; j <= n; j++) {
26
                // Count of '0's in the remaining segment [i, j-1]
27
                int remaining0s = prefix0[j] - prefix0[i];
28
                // Count of '1's that have been removed: those before i and after j-1
29
                int removed1s = prefix1[i] + (prefix1[n] - prefix1[j]);
30
                // The cost for this split is the maximum of the two counts
31
                int cost = Math.max(remaining0s, removed1s);
32
                if (cost < minCost) {
33
                    minCost = cost;
34
                }
35
            }
36
        }
37
        return minCost;
38
    }
39
40
    public static void main(String[] args) {
41
        Scanner scanner = new Scanner(System.in);
42
        43
        // Read the number of test cases
44
        int T = scanner.nextInt();
45
        scanner.nextLine();  // Consume the newline
46
        47
        // Process each test case
48
        for (int t = 0; t < T; t++) {
49
            String testCase = scanner.nextLine().trim();
50
            int result = minDecommissionCost(testCase);
51
            System.out.println(result);
52
        }
53
        54
        scanner.close();
55
    }
56
}
57",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053572
1390053576,unknown,unknown,unknown,"1
def main():
2
3
    import sys
4
5
    input = sys.stdin.read
6
7
    data = input().split(""\n"")
8
9
    10
11
    t = int(data[0])
12
13
    index = 1
14
15
    results = []
16
17
    for _ in range(t):
18
19
        n, k = map(int, data[index].split())
20
21
        strengths = list(map(int, data[index + 1].split()))
22
23
        index += 2
24
25
        26
27
        if k >= n:
28
29
            results.append(""0"")
30
31
            continue
32
33
        34
35
        # Calculate the impact of each firewall: strength + index
36
37
        impact = [(strengths[i] + i, i) for i in range(n)]
38
39
        40
41
        # Sort firewalls by impact (higher impact should be skipped)
42
43
        impact.sort(reverse=True)
44
45
        46
47
        # Select the top k firewalls to skip
48
49
        to_skip = set(idx for _, idx in impact[:k])
50
51
        52
53
        # Compute the minimal effort
54
55
        effort = 0
56
57
        skipped = 0
58
59
        60
61
        for i in range(n):
62
63
            if i in to_skip:
64
65
                skipped += 1
66
67
            else:
68
69
                effort += strengths[i] + skipped
70
71
        72
73
        results.append(str(effort))
74
75
    76
77
    # Print all results at once (faster output handling)
78
79
    sys.stdout.write(""\n"".join(results) + ""\n"")
80
81
if __name__ == ""__main__"":
82
83
    main()",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053576
1390053567,unknown,unknown,unknown,"1
def min_decommission_cost(server_rack):
2
    total_active = server_rack.count('1')
3
    total_idle = server_rack.count('0')
4
5
    min_cost = min(total_active, total_idle)  # Worst case: remove all active or all idle
6
7
    left, right = 0, len(server_rack) - 1
8
    removed_active = 0
9
    removed_idle = 0
10
11
    # Try decommissioning from both ends
12
    while left <= right:
13
        if server_rack[left] == '0':
14
            removed_idle += 1
15
            left += 1
16
        elif server_rack[right] == '0':
17
            removed_idle += 1
18
            right -= 1
19
        elif server_rack[left] == '1':
20
            removed_active += 1
21
            left += 1
22
        elif server_rack[right] == '1':
23
            removed_active += 1
24
            right -= 1
25
        26
        remaining_idle = total_idle - removed_idle
27
        min_cost = min(min_cost, max(remaining_idle, removed_active))
28
29
    return min_cost
30
31
32
# Read input
33
T = int(input())  # Number of test cases
34
results = []
35
36
for _ in range(T):
37
    server_rack = input().strip()
38
    results.append(min_decommission_cost(server_rack))
39
40
# Print results
41
for res in results:
42
    print(res)",129,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053567
