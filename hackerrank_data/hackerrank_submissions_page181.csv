submission_id,username,problem_name,language,code,page,url
1390052366,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    for n, k, arr in test_cases:
6
        res = []
7
        dq = deque()
8
        9
        # Process the first k elements
10
        for i in range(k):
11
            if arr[i] < 0:
12
                dq.append(i)
13
        14
        # Store the first result
15
        res.append(arr[dq[0]] if dq else 0)
16
        17
        # Process the remaining elements
18
        for i in range(k, n):
19
            # Remove elements that are out of the current window
20
            while dq and dq[0] < i - k + 1:
21
                dq.popleft()
22
            23
            # Add new element if it is faulty
24
            if arr[i] < 0:
25
                dq.append(i)
26
            27
            # Store result for current window
28
            res.append(arr[dq[0]] if dq else 0)
29
        30
        results.append(res)
31
    32
    return results
33
34
# Read input
35
def main():
36
    t = int(input().strip())
37
    test_cases = []
38
    for _ in range(t):
39
        n, k = map(int, input().split())
40
        arr = list(map(int, input().split()))
41
        test_cases.append((n, k, arr))
42
    43
    # Get results
44
    output = earliest_faulty_readings(test_cases)
45
    46
    # Print results
47
    for res in output:
48
        print("" "".join(map(str, res)))
49
50
if __name__ == ""__main__"":
51
    main()",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052366
1390052367,unknown,unknown,unknown,"1
def solve():
2
    t = int(input())
3
    for _ in range(t):
4
        n, k = map(int, input().split())
5
        a = list(map(int, input().split()))
6
7
        min_effort = float('inf')
8
9
        for i in range(1 << n):  # Iterate through all possible combinations of skipped firewalls
10
            skipped_indices = []
11
            for j in range(n):
12
                if (i >> j) & 1:
13
                    skipped_indices.append(j)
14
15
            if len(skipped_indices) <= k:
16
                effort = 0
17
                increased_strength = 0
18
                current_skipped_index = 0
19
20
                for j in range(n):
21
                    if current_skipped_index < len(skipped_indices) and skipped_indices[current_skipped_index] == j:
22
                        increased_strength += 1
23
                        current_skipped_index += 1
24
                    else:
25
                        effort += a[j] + increased_strength
26
27
                min_effort = min(min_effort, effort)
28
29
        print(min_effort)
30
31
solve()",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052367
1390052363,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    for n, k, arr in test_cases:
6
        dq = deque()
7
        res = []
8
        9
        for i in range(n):
10
            11
            if dq and dq[0] < i - k + 1:
12
                dq.popleft()
13
            14
            if arr[i] < 0:
15
                dq.append(i)
16
            17
            if i >= k - 1:
18
                res.append(arr[dq[0]] if dq else 0)
19
        20
        results.append("" "".join(map(str, res)))
21
    22
    print(""\n"".join(results))
23
24
t = int(input())
25
test_cases = []
26
for _ in range(t):
27
    n, k = map(int, input().split())
28
    arr = list(map(int, input().split()))
29
    test_cases.append((n, k, arr))
30
31
earliest_faulty_readings(test_cases)",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052363
1390052359,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
    3
4
    result = []
5
6
7
8
    for i in range(len(arr) - k + 1):
9
10
11
12
        batch = arr[i:i+k]
13
        14
15
        fault_found = False
16
17
        18
19
        20
21
        for num in batch:
22
            23
24
            if num < 0:
25
26
                result.append(num)
27
28
                fault_found = True
29
                30
31
                break
32
33
        34
35
       36
37
        if not fault_found:
38
            39
40
            result.append(0)
41
42
    43
44
    return result
45
46
47
48
t = int(input())  
49
50
51
52
for _ in range(t):
53
54
    55
    n, k = map(int, input().split())  
56
    57
58
    arr = list(map(int, input().split()))  
59
60
    61
62
    result = earliest_fault(arr, k)
63
64
    65
    print(*result)  ",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052359
1390052360,unknown,unknown,unknown,"1
def find_faulty_readings(arr, k):
2
3
    n = len(arr)
4
5
    results = []
6
7
    for i in range(n - k + 1):
8
9
        batch = arr[i:i+k]
10
11
        faulty_index = next((j for j, value in enumerate(batch) if value < 0), None)
12
13
        if faulty_index is not None:
14
15
            results.append(batch[faulty_index])
16
17
        else:
18
19
            results.append(0)
20
21
    return results
22
23
# Read input
24
25
import sys
26
27
input = sys.stdin.read
28
29
data = input().split()
30
31
t = int(data[0])  # Number of test cases
32
33
index = 1
34
35
results = []
36
37
for _ in range(t):
38
39
    n = int(data[index])
40
41
    k = int(data[index + 1])
42
43
    index += 2
44
45
    arr = list(map(int, data[index:index + n]))
46
47
    index += n
48
49
    50
51
    results.append(find_faulty_readings(arr, k))
52
53
# Print results
54
55
for result in results:
56
57
    print("" "".join(map(str, result)))",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052360
1390052362,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        Scanner sc = new Scanner(System.in);
12
        int t = sc.nextInt();
13
        while(t-- > 0){
14
            int n = sc.nextInt();
15
            int k = sc.nextInt();
16
            int [] arr = new int [n];
17
            for(int i = 0 ;i<n ; i++){
18
                arr[i] = sc.nextInt();
19
            }
20
            for(int i = 0 ; i<=n-k ; i++){
21
                int earlyFault = 0;
22
                for(int j = i ; j<i+k ; j++){
23
                    if(arr[j]<0){
24
                        earlyFault = arr[j];
25
                        break;
26
                    }
27
                }
28
                System.out.print(earlyFault+ "" "");
29
            }
30
            System.out.println();
31
        }
32
    }
33
}",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052362
1390052353,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(t, testcases):
4
    results = []
5
    6
    for n, k, arr in testcases:
7
        dq = deque() 
8
        res = []
9
        10
        for i in range(k):
11
            if arr[i] < 0:
12
                dq.append(i)
13
14
        res.append(arr[dq[0]] if dq else 0)
15
        for i in range(k, n):
16
            while dq and dq[0] < i - k + 1:
17
                dq.popleft()
18
            19
            if arr[i] < 0:
20
                dq.append(i)
21
            22
            res.append(arr[dq[0]] if dq else 0)
23
        24
        results.append(res)
25
    26
    return results
27
28
t = int(input().strip())
29
testcases = []
30
for _ in range(t):
31
    n, k = map(int, input().strip().split())
32
    arr = list(map(int, input().strip().split()))
33
    testcases.append((n, k, arr))
34
35
output = earliest_faulty_readings(t, testcases)
36
37
for res in output:
38
    print(*res)
39",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052353
1390052354,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(t, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        n, k, arr = case
8
        dq = deque()
9
        output = []
10
        11
        for i in range(n):
12
            13
            if dq and dq[0] < i - k + 1:
14
                dq.popleft()
15
            16
            17
            if arr[i] < 0:
18
                dq.append(i)
19
            20
           21
            if i >= k - 1:
22
                output.append(arr[dq[0]] if dq else 0)
23
        24
        results.append(output)
25
    26
    return results
27
28
29
t = int(input())
30
test_cases = []
31
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    test_cases.append((n, k, arr))
36
37
results = earliest_faulty_readings(t, test_cases)
38
for res in results:
39
    print("" "".join(map(str, res)))",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052354
1390052357,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_reading(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(len(arr)):
8
        # Remove out-of-window elements from the deque
9
        while dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
        12
        # Add current element if it's negative
13
        if arr[i] < 0:
14
            dq.append(i)
15
        16
        # Once we have a full window, determine the earliest fault
17
        if i >= k - 1:
18
            if dq:
19
                result.append(arr[dq[0]])  # Earliest negative in the window
20
            else:
21
                result.append(0)  # No negative found
22
    23
    return result
24
25
# Input processing
26
t = int(input())
27
for _ in range(t):
28
    n, k = map(int, input().split())
29
    arr = list(map(int, input().split()))
30
    result = earliest_faulty_reading(arr, k)
31
    print(' '.join(map(str, result)))
32
33
    ",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052357
1390052345,unknown,unknown,unknown,"1
def min_effort_to_breach(test_cases):
2
    results = []
3
4
    for n, k, arr in test_cases:
5
        if k >= n:
6
            results.append(0)
7
            continue
8
        9
        min_effort = float('inf')
10
        11
        # Iterate through all possible segments of length k to skip
12
        for i in range(n - k + 1):
13
            skipped = arr[i:i + k]
14
            remaining = arr[:i] + arr[i + k:]
15
            16
            # Calculate the effort after the skip
17
            effort = sum(remaining) + sum(range(1, len(skipped) + 1))
18
            min_effort = min(min_effort, effort)
19
        20
        results.append(min_effort)
21
22
    return results
23
24
25
if __name__ == ""__main__"":
26
    t = int(input())
27
    test_cases = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().strip().split())
31
        arr = list(map(int, input().strip().split()))
32
        test_cases.append((n, k, arr))
33
34
    results = min_effort_to_breach(test_cases)
35
    36
    for res in results:
37
        print(res)
38",181,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052345
