submission_id,username,problem_name,language,code,page,url
1390053857,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053857
1390053858,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053858
1390053856,unknown,unknown,unknown,"1
def min_effort(firewalls, k):
2
    n = len(firewalls)
3
    4
    if k >= n:
5
        return 0
6
    7
    # dp[i][j] represents min effort for firewalls[i:] with j skips used
8
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
9
    10
    # Base case: when we've processed all firewalls
11
    for j in range(k + 1):
12
        dp[n][j] = 0
13
    14
    # Fill DP table from right to left
15
    for i in range(n - 1, -1, -1):
16
        for j in range(k + 1):
17
            # Option 1: Skip this firewall (if skips remain)
18
            if j < k:
19
                dp[i][j] = dp[i + 1][j + 1]
20
            21
            # Option 2: Don't skip this firewall
22
            effort = firewalls[i] + j  # Current firewall + skips used before
23
            dp[i][j] = min(dp[i][j], effort + dp[i + 1][j])
24
    25
    return dp[0][0]
26
27
# Handle automatic input
28
t = int(input())
29
for _ in range(t):
30
    n, k = map(int, input().split())
31
    firewalls = list(map(int, input().split()))
32
    result = min_effort(firewalls, k)
33
    print(result)",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053856
1390053849,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    ans = float('inf')
5
6
    # Precompute cumulative counts of '1's from the beginning
7
    cumulative_ones = [0] * (n + 1)
8
    for i in range(n):
9
        cumulative_ones[i + 1] = cumulative_ones[i] + (1 if s[i] == '1' else 0)
10
11
    for i in range(n + 1):
12
        for j in range(i, n + 1):
13
            zeros_remaining = 0
14
            for k in range(i, j):
15
                if s[k] == '0':
16
                    zeros_remaining += 1
17
            18
            ones_removed = cumulative_ones[i] + (cumulative_ones[n] - cumulative_ones[j])
19
            ans = min(ans, max(zeros_remaining, ones_removed))
20
21
    print(ans)
22
23
t = int(input())
24
for _ in range(t):
25
    solve()",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053849
1390053850,unknown,unknown,unknown,"1
def minimize_effort(n, k, a):
2
    total_effort = sum(a)  # initial total effort without skipping
3
    benefits = []
4
5
    # Calculate the benefit of skipping each firewall:
6
    # benefit = a[i] - (n - i - 1)
7
    for i in range(n):
8
        benefit = a[i] - (n - i - 1)
9
        benefits.append(benefit)
10
11
    # Sort benefits in descending order to pick best k skips
12
    benefits.sort(reverse=True)
13
14
    # Reduce the effort by skipping the firewalls with highest benefits
15
    for i in range(k):
16
        total_effort -= benefits[i]
17
18
    # Add the penalty: skipping k firewalls increases strength of remaining by 1, 2, ..., k
19
    # The total penalty is the sum of first k natural numbers: k * (k - 1) // 2
20
    penalty = k * (k - 1) // 2
21
    total_effort += penalty
22
23
    return total_effort
24
25
26
# Driver code to handle multiple test cases
27
T = int(input())
28
for _ in range(T):
29
    n, k = map(int, input().split())
30
    a = list(map(int, input().split()))
31
    32
    result = minimize_effort(n, k, a)
33
    print(result)
34
35",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053850
1390053852,unknown,unknown,unknown,"1
def solve():
2
3
    import sys
4
5
    input_data = sys.stdin.read().splitlines()
6
7
    t = int(input_data[0].strip())
8
9
    line = 1
10
11
    out_lines = []
12
13
    for _ in range(t):
14
15
        s = input_data[line].strip()
16
17
        line += 1
18
19
        n = len(s)
20
21
        # get indices for active servers ('1')
22
23
        positions = [i for i, ch in enumerate(s) if ch == '1']
24
25
        m = len(positions)
26
27
        if m == 0:
28
29
            out_lines.append(""0"")
30
31
            continue
32
33
        # Precompute A: A[i] = positions[i] - i
34
35
        A = [positions[i] - i for i in range(m)]
36
37
        38
39
        # check(X) returns True if there exists a window in A
40
41
        # such that:
42
43
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
44
45
        # and A[j] - A[i] <= X.
46
47
        def check(X):
48
49
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
50
51
            if m - X <= 0:
52
53
                return True
54
55
            j = 0
56
57
            for i in range(m):
58
59
                if j < i:
60
61
                    j = i
62
63
                # slide j as far as possible while A[j]-A[i] <= X
64
65
                while j < m and A[j] - A[i] <= X:
66
67
                    j += 1
68
69
                # j now is one past the last index satisfying condition, so the window has length (j - i)
70
71
                if j - i >= m - X:
72
73
                    return True
74
75
            return False
76
77
        # Binary search for the minimum X
78
79
        lo, hi, ans = 0, n, n
80
81
        while lo <= hi:
82
83
            mid = (lo + hi) // 2
84
85
            if check(mid):
86
87
                ans = mid
88
89
                hi = mid - 1
90
91
            else:
92
93
                lo = mid + 1
94
95
        out_lines.append(str(ans))
96
97
    98
99
    sys.stdout.write(""\n"".join(out_lines))
100
101
    102
103
if __name__ == '__main__':
104
105
    solve()",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053852
1390053846,unknown,unknown,unknown,"1
def min_effort(firewalls, k):
2
    n = len(firewalls)
3
    4
    if k >= n:
5
        return 0
6
    7
    # dp[i][j] represents min effort for firewalls[i:] with j skips used
8
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
9
    10
    # Base case: when we've processed all firewalls
11
    for j in range(k + 1):
12
        dp[n][j] = 0
13
    14
    # Fill DP table from right to left
15
    for i in range(n - 1, -1, -1):
16
        for j in range(k + 1):
17
            # Option 1: Skip this firewall (if skips remain)
18
            if j < k:
19
                dp[i][j] = dp[i + 1][j + 1]
20
            21
            # Option 2: Don't skip this firewall
22
            effort = firewalls[i] + j  # Current firewall + skips used before
23
            dp[i][j] = min(dp[i][j], effort + dp[i + 1][j])
24
    25
    return dp[0][0]
26
27
# Handle automatic input
28
t = int(input())
29
for _ in range(t):
30
    n, k = map(int, input().split())
31
    firewalls = list(map(int, input().split()))
32
    result = min_effort(firewalls, k)
33
    print(result)",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053846
1390053847,unknown,unknown,unknown,"1
# Read number of test cases
2
t = int(input().strip())
3
4
for _ in range(t):
5
    # Read server string
6
    servers = input().strip()
7
    n = len(servers)
8
    9
    # Precompute prefix and suffix sums
10
    prefix_active = [0] * (n + 1)  # active[0:i]
11
    prefix_idle = [0] * (n + 1)    # idle[0:i]
12
    13
    for i in range(n):
14
        prefix_active[i + 1] = prefix_active[i] + (1 if servers[i] == '1' else 0)
15
        prefix_idle[i + 1] = prefix_idle[i] + (1 if servers[i] == '0' else 0)
16
    17
    total_active = prefix_active[n]
18
    total_idle = prefix_idle[n]
19
    20
    min_cost = n  # Initialize with worst case
21
    22
    # For each possible left cut point
23
    for left in range(n + 1):
24
        # Calculate active servers removed from left
25
        active_removed_left = prefix_active[left]
26
        27
        # Find the optimal right cut point for this left cut
28
        # Key insight: As we move the right boundary left, we:
29
        # 1. Remove more active servers from the right
30
        # 2. Reduce the number of idle servers remaining
31
        32
        # Binary search to find optimal right point would be ideal,
33
        # but we can solve this in O(n) by checking each right point
34
        35
        for right in range(n, left - 1, -1):
36
            active_removed_right = total_active - prefix_active[right]
37
            active_removed_total = active_removed_left + active_removed_right
38
            idle_remaining = prefix_idle[right] - prefix_idle[left]
39
            40
            cost = max(idle_remaining, active_removed_total)
41
            min_cost = min(min_cost, cost)
42
            43
            # Important optimization: If removing more from right increases cost,
44
            # no need to continue checking more right cuts for this left cut
45
            if active_removed_right >= idle_remaining:
46
                break
47
    48
    print(min_cost)",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053847
1390053848,unknown,unknown,unknown,"1
2
import sys
3
4
def main():
5
    input = sys.stdin.read().split()
6
    idx = 0
7
    T = int(input[idx])
8
    idx += 1
9
    for _ in range(T):
10
        n, k = int(input[idx]), int(input[idx + 1])
11
        idx += 2
12
        a = list(map(int, input[idx:idx + n]))
13
        idx += n
14
        15
        sum_S = sum(a)
16
        # Compute a[i] + i (0-based)
17
        values = [a[i] + i for i in range(n)]
18
        # Sort in descending order
19
        values.sort(reverse=True)
20
        sum_aj_plus_j = sum(values[:k])
21
        # Compute the result
22
        res = sum_S - sum_aj_plus_j - (k * (k + 1)) // 2 + k * n
23
        print(res)
24
25
main()",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053848
1390053843,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    skipped = [False] * n
6
    7
    temp_a = a[:]
8
    for _ in range(k):
9
        max_val = -1
10
        max_idx = -1
11
        for i in range(n):
12
            if not skipped[i] and temp_a[i] > max_val:
13
                max_val = temp_a[i]
14
                max_idx = i
15
        if max_idx != -1:
16
            skipped[max_idx] = True
17
            temp_a[max_idx] = -1
18
19
    if k == n:
20
        print(0)
21
        return
22
23
    effort = 0
24
    skipped_count = 0
25
    26
    for i in range(n):
27
        if skipped[i]:
28
            skipped_count += 1
29
        else:
30
            effort += a[i] + skipped_count
31
32
    print(effort)
33
34
t = int(input())
35
for _ in range(t):
36
    solve()",114,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053843
