submission_id,username,problem_name,language,code,page,url
1390053169,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)  # Compute total effort without skipping
3
    if k == n:
4
        return 0  # If we can skip all, effort is 0
5
    6
    min_effort = float('inf')
7
    8
    for i in range(n):
9
        effort = total_effort - firewalls[i]  # Skip the i-th firewall
10
        penalty = 0
11
        12
        for j in range(i + 1, n):
13
            penalty += 1  # Each subsequent firewall increases by 1
14
            effort += penalty
15
        16
        if i < k:
17
            min_effort = min(min_effort, effort)
18
    19
    return min_effort
20
21
22
T = int(input())
23
for _ in range(T):
24
    n, k = map(int, input().split())
25
    firewalls = list(map(int, input().split()))
26
    print(min_effort(n, k, firewalls))
27",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053169
1390053170,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    ans = float('inf')
5
6
    for i in range(n + 1):
7
        for j in range(n - i + 1):
8
            remaining = s[i:n-j]
9
            10
            zeros = remaining.count('0')
11
            ones_removed = s[:i].count('1') + s[n-j:].count('1')
12
            13
            ans = min(ans, max(zeros, ones_removed))
14
            15
    print(ans)
16
17
t = int(input())
18
for _ in range(t):
19
    solve()",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053170
1390053171,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Initialize an array to track the minimum effort for using exactly j skips
3
    # We'll use a 2D DP array where dp[i][j] = min effort to breach first i firewalls using exactly j skips
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        # If we use 0 skips up to firewall i
12
        dp[i][0] = dp[i-1][0] + strengths[i-1]
13
        14
        for j in range(1, min(i, k) + 1):
15
            # Option 1: Skip the current firewall
16
            dp[i][j] = dp[i-1][j-1]
17
            18
            # Option 2: Don't skip the current firewall
19
            # If we've skipped j firewalls so far, strength increases by j
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + strengths[i-1] + j)
21
    22
    # Return the minimum across all possible numbers of skips for all n firewalls
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    28
    for _ in range(t):
29
        n, k = map(int, input().split())
30
        strengths = list(map(int, input().split()))
31
        print(min_effort_to_breach(n, k, strengths))
32
33
# Run the solution
34
solve()",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053171
1390053163,unknown,unknown,unknown,"1
def min_cost(server_str):
2
    n = len(server_str)
3
    prefix_1 = [0] * (n + 1)  # prefix count of 1s
4
    prefix_0 = [0] * (n + 1)  # prefix count of 0s
5
6
    for i in range(n):
7
        prefix_1[i + 1] = prefix_1[i] + (1 if server_str[i] == '1' else 0)
8
        prefix_0[i + 1] = prefix_0[i] + (1 if server_str[i] == '0' else 0)
9
10
    total_1 = prefix_1[n]
11
    total_0 = prefix_0[n]
12
13
    min_cost = float('inf')
14
15
    # Try removing l elements from the front
16
    for l in range(n + 1):
17
        # Try removing r elements from the back
18
        for r in range(n - l + 1):
19
            left = l
20
            right = n - r
21
            remaining_0 = prefix_0[right] - prefix_0[left]
22
            removed_1 = prefix_1[left] + (total_1 - prefix_1[right])
23
            cost = max(remaining_0, removed_1)
24
            min_cost = min(min_cost, cost)
25
26
    return min_cost
27
28
# Main driver
29
T = int(input())
30
for _ in range(T):
31
    server_str = input().strip()
32
    print(min_cost(server_str))
33",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053163
1390053164,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_string):
2
    n = len(server_string)
3
    4
    # Track total number of active servers in the original string
5
    total_active = server_string.count('1')
6
    7
    min_cost = float('inf')
8
    9
    # Try all possible prefixes and suffixes to remove
10
    for prefix_len in range(n + 1):
11
        for suffix_len in range(n + 1 - prefix_len):
12
            # The remaining substring after removing prefix and suffix
13
            remaining = server_string[prefix_len:n-suffix_len]
14
            15
            if not remaining:  # If we removed everything
16
                continue
17
                18
            # Count remaining idle servers and removed active servers
19
            remaining_idle = remaining.count('0')
20
            21
            # Active servers in prefix and suffix
22
            removed_active = 0
23
            if prefix_len > 0:
24
                removed_active += server_string[:prefix_len].count('1')
25
            if suffix_len > 0:
26
                removed_active += server_string[n-suffix_len:].count('1')
27
            28
            # Calculate cost
29
            cost = max(remaining_idle, removed_active)
30
            min_cost = min(min_cost, cost)
31
    32
    return min_cost
33
34
# Process test cases
35
t = int(input())
36
for _ in range(t):
37
    server_string = input().strip()
38
    print(min_decommissioning_cost(server_string))",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053164
1390053166,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053166
1390053160,unknown,unknown,unknown,"1
#include <iostream>
2
#include <deque>
3
#include <vector>
4
using namespace std;
5
6
void earliestFaultyReadings(int n, int k, vector<int>& arr) {
7
    deque<int> dq;
8
    vector<int> result;
9
    10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) {
12
            dq.push_back(i);
13
        }
14
    }
15
    result.push_back(dq.empty() ? 0 : arr[dq.front()]);
16
17
    for (int i = k; i < n; i++) {
18
        if (!dq.empty() && dq.front() <= i - k) {
19
            dq.pop_front();
20
        }
21
        if (arr[i] < 0) {
22
            dq.push_back(i);
23
        }
24
        result.push_back(dq.empty() ? 0 : arr[dq.front()]);
25
    }
26
    27
    for (int num : result) {
28
        cout << num << "" "";
29
    }
30
    cout << endl;
31
}
32
33
int main() {
34
    int t;
35
    cin >> t;
36
37
    while (t--) {
38
        int n, k;
39
        cin >> n >> k;
40
        vector<int> arr(n);
41
        for (int i = 0; i < n; i++) {
42
            cin >> arr[i];
43
        }
44
        earliestFaultyReadings(n, k, arr);
45
    }
46
47
    return 0;
48
}
49",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053160
1390053161,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultySensor {
4
    public static List<Integer> earliestFaults(int[] arr, int k) {
5
        List<Integer> result = new ArrayList<>();
6
        Deque<Integer> deque = new LinkedList<>();
7
8
        for (int i = 0; i < arr.length; i++) {
9
            10
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
11
                deque.poll();
12
            }
13
14
            15
            if (arr[i] < 0) {
16
                deque.offer(i);
17
            }
18
19
            if (i >= k - 1) {
20
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
21
            }
22
        }
23
        return result;
24
    }
25
26
    public static void main(String[] args) {
27
        Scanner scanner = new Scanner(System.in);
28
        int t = scanner.nextInt();
29
30
        while (t-- > 0) {
31
            int n = scanner.nextInt(); 
32
            int k = scanner.nextInt(); 
33
            int[] arr = new int[n];
34
35
            for (int i = 0; i < n; i++) {
36
                arr[i] = scanner.nextInt();
37
            }
38
39
            40
            List<Integer> faults = earliestFaults(arr, k);
41
            for (int val : faults) {
42
                System.out.print(val + "" "");
43
            }
44
            System.out.println();
45
        }
46
        scanner.close();
47
    }
48
}
49",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053161
1390053162,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    4
    # Count total active servers and total idle servers
5
    total_active = server_string.count('1')
6
    total_idle = n - total_active
7
    8
    # Precompute cumulative counts of active servers from left
9
    active_prefix_sum = [0] * (n + 1)
10
    for i in range(n):
11
        active_prefix_sum[i + 1] = active_prefix_sum[i] + (1 if server_string[i] == '1' else 0)
12
    13
    min_cost = float('inf')
14
    15
    # Try all possible starting positions for the remaining servers
16
    for left in range(n + 1):
17
        # For each possible ending position
18
        for right in range(left, n + 1):
19
            # Active servers in the remaining segment
20
            active_remaining = active_prefix_sum[right] - active_prefix_sum[left]
21
            idle_remaining = (right - left) - active_remaining
22
            23
            # Active servers removed
24
            active_removed = total_active - active_remaining
25
            26
            cost = max(idle_remaining, active_removed)
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
def faster_min_decommission_cost(server_string):
32
    n = len(server_string)
33
    34
    # Precompute prefix sums for active and idle servers
35
    active_prefix = [0] * (n + 1)
36
    idle_prefix = [0] * (n + 1)
37
    38
    for i in range(n):
39
        active_prefix[i + 1] = active_prefix[i] + (server_string[i] == '1')
40
        idle_prefix[i + 1] = idle_prefix[i] + (server_string[i] == '0')
41
    42
    min_cost = n  # Worst case cost
43
    44
    # For each possible remaining substring (from i to j-1)
45
    for i in range(n + 1):
46
        for j in range(i, n + 1):
47
            # Idle servers in remaining substring
48
            idle_remaining = idle_prefix[j] - idle_prefix[i]
49
            50
            # Active servers removed (from left and right)
51
            active_removed = active_prefix[n] - (active_prefix[j] - active_prefix[i])
52
            53
            cost = max(idle_remaining, active_removed)
54
            min_cost = min(min_cost, cost)
55
    56
    return min_cost
57
58
def main():
59
    t = int(input().strip())
60
    61
    for _ in range(t):
62
        server_string = input().strip()
63
        result = faster_min_decommission_cost(server_string)
64
        print(result)
65
66
if _name_ == ""_main_"":
67
    main()",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053162
1390053159,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        output = []
8
        dq = deque()
9
        10
        # Process first k elements
11
        for i in range(k):
12
            if arr[i] < 0:
13
                dq.append(i)
14
        15
        # Process remaining elements in a sliding window
16
        for i in range(n - k + 1):
17
            # Add the first faulty element in the current window
18
            if dq:
19
                output.append(arr[dq[0]])
20
            else:
21
                output.append(0)
22
            23
            # Remove elements that are out of this window
24
            if dq and dq[0] == i:
25
                dq.popleft()
26
            27
            # Add next element from the next window
28
            if i + k < n and arr[i + k] < 0:
29
                dq.append(i + k)
30
        31
        results.append("" "".join(map(str, output)))
32
    33
    return ""\n"".join(results)
34
35
# Read input
36
t = int(input().strip())
37
test_cases = []
38
for _ in range(t):
39
    n, k = map(int, input().strip().split())
40
    arr = list(map(int, input().strip().split()))
41
    test_cases.append((n, k, arr))
42
43
# Get results and print
44
print(earliest_faulty_readings(test_cases))
45",150,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053159
