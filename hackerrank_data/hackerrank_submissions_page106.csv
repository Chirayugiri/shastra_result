submission_id,username,problem_name,language,code,page,url
1390053994,unknown,unknown,unknown,"1
# Read number of test cases
2
t = int(input().strip())
3
4
for _ in range(t):
5
    servers = input().strip()
6
    n = len(servers)
7
    8
    # Track active and idle counts with 1D arrays
9
    active_prefix = [0] * (n + 1)
10
    idle_prefix = [0] * (n + 1)
11
    12
    for i in range(n):
13
        active_prefix[i + 1] = active_prefix[i] + (1 if servers[i] == '1' else 0)
14
        idle_prefix[i + 1] = idle_prefix[i] + (1 if servers[i] == '0' else 0)
15
    16
    total_active = active_prefix[n]
17
    total_idle = idle_prefix[n]
18
    19
    min_cost = n  # Start with worst possible cost
20
    21
    # For each possible middle segment [left, right)
22
    for left in range(n + 1):
23
        # Instead of trying all rights, use two pointers technique
24
        right = left
25
        while right <= n:
26
            # Calculate metrics
27
            active_removed = active_prefix[left] + (total_active - active_prefix[right])
28
            idle_remaining = idle_prefix[right] - idle_prefix[left]
29
            30
            cost = max(idle_remaining, active_removed)
31
            min_cost = min(min_cost, cost)
32
            33
            # If active_removed > idle_remaining, increasing right might help
34
            # If active_removed < idle_remaining, we need to increase left
35
            if active_removed > idle_remaining and right < n:
36
                right += 1
37
            else:
38
                break
39
    40
    print(min_cost)",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053994
1390053995,unknown,unknown,unknown,"1
def min_effort_to_breach(t, test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        # Sort firewalls in ascending order
6
        firewalls.sort()
7
        8
        # Increase the strength of the remaining firewalls
9
        total_effort = 0
10
        for i in range(k, n):
11
            total_effort += firewalls[i] + k  # Since we skipped k firewalls, each gets +k
12
        13
        results.append(total_effort)
14
    15
    return results
16
17
# Read input
18
t = int(input().strip())
19
test_cases = []
20
21
for _ in range(t):
22
    n, k = map(int, input().split())
23
    firewalls = list(map(int, input().split()))
24
    test_cases.append((n, k, firewalls))
25
26
# Get results
27
output = min_effort_to_breach(t, test_cases)
28
29
# Print results
30
for res in output:
31
    print(res)",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053995
1390053997,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053997
1390053990,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        7
        # Precompute prefix sums for 0's and 1's
8
        prefix_0 = [0] * (n + 1)
9
        prefix_1 = [0] * (n + 1)
10
        for i in range(n):
11
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
12
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
13
        14
        # Iterate through all possible splits
15
        for i in range(n + 1):
16
            for j in range(i, n + 1):
17
                # Remaining segment is from i to j-1
18
                remaining_0s = prefix_0[j] - prefix_0[i]
19
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
20
                cost = max(remaining_0s, removed_1s)
21
                if cost < min_cost:
22
                    min_cost = cost
23
        results.append(min_cost)
24
    return results
25
26
# Read input
27
T = int(input())
28
test_cases = [input().strip() for _ in range(T)]
29
30
# Compute results
31
results = min_decommission_cost(test_cases)
32
33
# Print output
34
for result in results:
35
    print(result)
36
37
38",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053990
1390053992,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
typedef long long ll;
5
6
void solve() {
7
    int n, k;
8
    cin >> n >> k;
9
    vector<ll> arr(n);
10
    ll total = 0;
11
    12
    13
    for (int i = 0; i < n; i++) {
14
        cin >> arr[i];
15
        total += arr[i];
16
    }
17
    18
    vector<ll> benefits(n);
19
    for (int j = 0; j < n; j++){
20
        benefits[j] = arr[j] - (n - 1 - j);
21
    }
22
    23
    sort(benefits.begin(), benefits.end(), greater<ll>());
24
25
    ll best = total;
26
    ll sumb = 0;
27
    int m = min(k, n);
28
    for (int i = 0; i < m; i++){
29
        if (benefits[i] < 0) {
30
        }
31
        sumb += benefits[i];
32
        int skips = i + 1;
33
        ll candidate = total - sumb - (skips * (skips - 1LL)) / 2LL;
34
        best = min(best, candidate);
35
    }
36
    cout << best << ""\n"";
37
}
38
39
int main() {
40
    int t; cin >> t;
41
    while (t--) {
42
        solve();
43
    }
44
    return 0;
45
}
46",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053992
1390053993,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053993
1390053987,unknown,unknown,unknown,"1
import sys
2
import threading
3
4
def main():
5
    T = int(sys.stdin.readline())
6
    7
    for _ in range(T):
8
        n, k = map(int, sys.stdin.readline().split())
9
        a = list(map(int, sys.stdin.readline().split()))
10
11
        # We calculate the ""gain"" of skipping a firewall:
12
        # Skipping it saves a[i], but increases the cost of subsequent firewalls by 1.
13
        # So we rank the firewalls by how beneficial it is to skip them.
14
        # We sort by a[i] - (n - i - 1), because skipping early firewalls increases cost of more firewalls.
15
        # The higher this value, the better it is to skip.
16
17
        benefits = []
18
        for i in range(n):
19
            benefit = a[i] - (n - i - 1)
20
            benefits.append((benefit, i))
21
        22
        # Sort by benefit descending
23
        benefits.sort(reverse=True)
24
25
        skipped = [False] * n
26
27
        # Mark the top k firewalls to skip
28
        for i in range(k):
29
            _, idx = benefits[i]
30
            skipped[idx] = True
31
32
        # Calculate total effort
33
        total_effort = 0
34
        penalty = 0  # number of skipped firewalls so far
35
        for i in range(n):
36
            if skipped[i]:
37
                penalty += 1
38
            else:
39
                total_effort += a[i] + penalty
40
41
        print(total_effort)
42
43
# Run main() inside a separate thread to avoid recursion limit issues in large input
44
threading.Thread(target=main).start()",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053987
1390053988,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    skipped_indices = set()
6
    current_effort = 0
7
    for i in range(n):
8
        current_effort += a[i]
9
10
    min_effort = current_effort
11
12
    for _ in range(k):
13
        best_reduction = 0
14
        best_skip_index = -1
15
16
        for i in range(n):
17
            if i not in skipped_indices:
18
                reduction = a[i]
19
                increase = 0
20
                for j in range(i + 1, n):
21
                    if j not in skipped_indices:
22
                        increase += 1
23
                current_reduction = reduction - increase
24
                if current_reduction > best_reduction:
25
                    best_reduction = current_reduction
26
                    best_skip_index = i
27
28
        if best_skip_index != -1 and best_reduction > 0:
29
            skipped_indices.add(best_skip_index)
30
            current_effort -= best_reduction
31
            min_effort = min(min_effort, current_effort)
32
        else:
33
            break
34
35
    final_effort = 0
36
    for i in range(n):
37
        if i not in skipped_indices:
38
            strength_increase = 0
39
            for skipped_index in skipped_indices:
40
                if skipped_index < i:
41
                    strength_increase += 1
42
            final_effort += a[i] + strength_increase
43
    min_effort = min(min_effort, final_effort)
44
45
46
    print(min_effort)
47
48
49
t = int(input())
50
for _ in range(t):
51
    solve()",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053988
1390053989,unknown,unknown,unknown,"1
import bisect
2
3
t = int(input())
4
for _ in range(t):
5
    s = input().strip()
6
    n = len(s)
7
    8
    if n == 0:
9
        print(0)
10
        continue
11
    if n == 1:
12
        print(0)
13
        continue
14
    if n == 2:
15
        print(1 if s[0] == s[1] else 0)
16
        continue
17
    18
    prefix_0 = [0] * (n + 1)
19
    prefix_1 = [0] * (n + 1)
20
    for i in range(n):
21
        prefix_0[i + 1] = prefix_0[i] + (1 if s[i] == '0' else 0)
22
        prefix_1[i + 1] = prefix_1[i] + (1 if s[i] == '1' else 0)
23
    total_1 = prefix_1[n]
24
    25
    low, high = 0, n
26
    while low < high:
27
        m = (low + high) // 2
28
        possible = False
29
        for j in range(n + 1):
30
            target = prefix_0[j] - m
31
            i = bisect.bisect_left(prefix_0, target)
32
            if i <= j:
33
                ones_removed = prefix_1[i] + (total_1 - prefix_1[j])
34
                if ones_removed <= m:
35
                    possible = True
36
                    break
37
        if possible:
38
            high = m
39
        else:
40
            low = m + 1
41
    print(low)",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053989
1390053985,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
5
    n = len(arr)
6
7
    result = []
8
9
    dq = deque()  # To store indices of negative numbers
10
11
    # Process first k elements (first window)
12
13
    for i in range(k):
14
15
        if arr[i] < 0:
16
17
            dq.append(i)
18
19
    20
21
    # Process rest of the array
22
23
    for i in range(n - k + 1):
24
25
        # Add earliest faulty reading or 0 if none
26
27
        result.append(arr[dq[0]] if dq else 0)
28
29
        # Remove elements out of the window
30
31
        if dq and dq[0] == i:
32
33
            dq.popleft()
34
35
        # Add new element to the window
36
37
        if i + k < n and arr[i + k] < 0:
38
39
            dq.append(i + k)
40
41
    return result
42
43
# Read input
44
45
t = int(input().strip())  # Number of test cases
46
47
for _ in range(t):
48
49
    n, k = map(int, input().split())  # Size of array and batch size
50
51
    arr = list(map(int, input().split()))
52
53
    print(*earliest_faulty_readings(arr, k))",106,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053985
