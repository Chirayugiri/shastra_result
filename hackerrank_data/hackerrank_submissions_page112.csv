submission_id,username,problem_name,language,code,page,url
1390053889,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053889
1390053893,unknown,unknown,unknown,"1
def min_effort(n, k, strengths):
2
    total_effort = sum(strengths)
3
    4
    if k == n:
5
        return 0  # If we can skip all firewalls, minimum effort is 0
6
7
    # Finding the minimum effort by skipping one firewall
8
    min_effort = min(total_effort - strength for strength in strengths)
9
10
    return min_effort
11
12
# Read input
13
T = int(input())  
14
for _ in range(T):
15
    n, k = map(int, input().split())
16
    strengths = list(map(int, input().split()))
17
    print(min_effort(n, k, strengths))
18",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053893
1390053888,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        7
        # Precompute prefix sums for 0's and 1's
8
        prefix_0 = [0] * (n + 1)
9
        prefix_1 = [0] * (n + 1)
10
        for i in range(n):
11
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
12
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
13
        14
        # Iterate through all possible splits
15
        for i in range(n + 1):
16
            for j in range(i, n + 1):
17
                # Remaining segment is from i to j-1
18
                remaining_0s = prefix_0[j] - prefix_0[i]
19
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
20
                cost = max(remaining_0s, removed_1s)
21
                if cost < min_cost:
22
                    min_cost = cost
23
        results.append(min_cost)
24
    return results
25
26
# Read input
27
T = int(input())
28
test_cases = [input().strip() for _ in range(T)]
29
30
# Compute results
31
results = min_decommission_cost(test_cases)
32
33
# Print output
34
for result in results:
35
    print(result)
36",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053888
1390053883,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053883
1390053885,unknown,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n,k=list(map(int,input().split()))
4
    arr=list(map(int,input().split()))
5
    dp=[[float('inf')]*(k+1) for _ in range(n+1)]
6
    for j in range(k+1):dp[0][j]=0
7
    for i in range(1,n+1):
8
        for j in range(k+1):
9
            if j:dp[i][j]=min(dp[i][j],dp[i-1][j-1])
10
            dp[i][j]=min(dp[i][j],dp[i-1][j]+arr[i-1]+(j*1))
11
    print(min(dp[n]))",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053885
1390053887,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults_in_batches(test_cases):
4
    results = []
5
    for n, k, arr in test_cases:
6
        faults = []
7
        dq = deque()
8
        9
       10
        for i in range(k):
11
            if arr[i] < 0:
12
                dq.append(i)
13
        14
        15
        faults.append(arr[dq[0]] if dq else 0)
16
        17
        18
        for i in range(k, n):
19
          20
            if dq and dq[0] <= i - k:
21
                dq.popleft()
22
            23
           24
            if arr[i] < 0:
25
                dq.append(i)
26
            27
           28
            faults.append(arr[dq[0]] if dq else 0)
29
        30
        results.append(faults)
31
    32
    return results
33
34
35
t = int(input())
36
test_cases = []
37
for _ in range(t):
38
    n, k = map(int, input().split())
39
    arr = list(map(int, input().split()))
40
    test_cases.append((n, k, arr))
41
42
43
for result in earliest_faults_in_batches(test_cases):
44
    print(*result)",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053887
1390053881,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FirewallMinEffort {
4
    5
    public static long minimizeEffort(int n, int k, int[] firewalls) {
6
        long totalEffort = 0;
7
        8
        // Create a list of pairs (value + index, index)
9
        List<int[]> skipValue = new ArrayList<>();
10
        for (int i = 0; i < n; i++) {
11
            skipValue.add(new int[]{firewalls[i] + i, i});
12
        }
13
14
        // Sort by descending benefit to skip
15
        skipValue.sort((a, b) -> Integer.compare(b[0], a[0]));
16
17
        // Mark which firewalls to skip
18
        boolean[] skipped = new boolean[n];
19
        for (int i = 0; i < k; i++) {
20
            skipped[skipValue.get(i)[1]] = true;
21
        }
22
23
        // Calculate final effort
24
        long effort = 0;
25
        int penalty = 0;
26
        for (int i = 0; i < n; i++) {
27
            if (skipped[i]) {
28
                penalty++;
29
            } else {
30
                effort += firewalls[i] + penalty;
31
            }
32
        }
33
34
        return effort;
35
    }
36
37
    public static void main(String[] args) {
38
        Scanner sc = new Scanner(System.in);
39
        40
        int T = sc.nextInt();
41
        while (T-- > 0) {
42
            int n = sc.nextInt();
43
            int k = sc.nextInt();
44
            int[] firewalls = new int[n];
45
46
            for (int i = 0; i < n; i++) {
47
                firewalls[i] = sc.nextInt();
48
            }
49
50
            System.out.println(minimizeEffort(n, k, firewalls));
51
        }
52
        53
        sc.close();
54
    }
55
}",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053881
1390053880,unknown,unknown,unknown,"1
def min_effort(firewalls, k):
2
    n = len(firewalls)
3
    4
    if k >= n:
5
        return 0
6
    7
    # dp[i][j] represents min effort for firewalls[i:] with j skips used
8
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
9
    10
    # Base case: when we've processed all firewalls
11
    for j in range(k + 1):
12
        dp[n][j] = 0
13
    14
    # Fill DP table from right to left
15
    for i in range(n - 1, -1, -1):
16
        for j in range(k + 1):
17
            # Option 1: Skip this firewall (if skips remain)
18
            if j < k:
19
                dp[i][j] = dp[i + 1][j + 1]
20
            21
            # Option 2: Don't skip this firewall
22
            effort = firewalls[i] + j  # Current firewall + skips used before
23
            dp[i][j] = min(dp[i][j], effort + dp[i + 1][j])
24
    25
    return dp[0][0]
26
27
# Handle automatic input
28
t = int(input())
29
for _ in range(t):
30
    n, k = map(int, input().split())
31
    firewalls = list(map(int, input().split()))
32
    result = min_effort(firewalls, k)
33
    print(result)",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053880
1390053882,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053882
1390053879,unknown,unknown,unknown,"1
import itertools
2
3
def solve():
4
    n, k = map(int, input().split())
5
    a = list(map(int, input().split()))
6
7
    min_effort = float('inf')
8
9
    for num_skips in range(k + 1):
10
        indices_to_skip_combinations = itertools.combinations(range(n), num_skips)
11
        for skip_indices_tuple in indices_to_skip_combinations:
12
            skip_indices = set(skip_indices_tuple)
13
            current_effort = 0
14
            for i in range(n):
15
                if i not in skip_indices:
16
                    strength_increase = 0
17
                    for skipped_index in skip_indices:
18
                        if skipped_index < i:
19
                            strength_increase += 1
20
                    current_effort += a[i] + strength_increase
21
            min_effort = min(min_effort, current_effort)
22
23
    print(min_effort)
24
25
26
t = int(input())
27
for _ in range(t):
28
    solve()
29
30",112,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053879
