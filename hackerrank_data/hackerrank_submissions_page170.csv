submission_id,username,problem_name,language,code,page,url
1390052694,unknown,unknown,unknown,"1
def min_effort(arr, k):
2
    n = len(arr)
3
    4
    if k >= n:
5
        return 0
6
    7
    total = sum(arr)
8
    9
    impact = []
10
    for i, strength in enumerate(arr):
11
        remaining_firewalls = n - i - 1
12
        net_impact = strength - remaining_firewalls
13
        impact.append((net_impact, i))
14
    15
    impact.sort(reverse=True)
16
    17
    for i in range(k):
18
        if i < len(impact):
19
            net_impact, idx = impact[i]
20
            if net_impact > 0:
21
                total -= net_impact
22
    23
    return total
24
25
def solve():
26
    t = int(input())
27
    28
    for _ in range(t):
29
        n, k = map(int, input().split())
30
        arr = list(map(int, input().split()))
31
        result = min_effort(arr, k)
32
        print(result)
33
34
if __name__ == ""__main__"":
35
    solve()",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052694
1390052695,unknown,unknown,unknown,"1
def min_effort_to_breach(T, test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        if k == n:
6
            results.append(""0"")  # If we can skip all firewalls, effort is 0
7
            continue
8
9
        total_effort = sum(firewalls)
10
        min_effort = total_effort
11
12
        # Sliding window to track k skipped firewalls' effort
13
        window_sum = sum(firewalls[:k])
14
        15
        for i in range(n - k + 1):
16
            increased_security = k  # Each skipped firewall increases later firewalls' strength
17
            new_effort = total_effort - window_sum + increased_security
18
            min_effort = min(min_effort, new_effort)
19
20
            # Move the window forward
21
            if i + k < n:
22
                window_sum = window_sum - firewalls[i] + firewalls[i + k]
23
24
        results.append(str(min_effort))
25
26
    return ""\n"".join(results)
27
28
# Read input
29
T = int(input())
30
test_cases = []
31
32
for _ in range(T):
33
    n, k = map(int, input().split())
34
    firewalls = list(map(int, input().split()))
35
    test_cases.append((n, k, firewalls))
36
37
# Compute and print results
38
print(min_effort_to_breach(T, test_cases))
39",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052695
1390052696,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_reading(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of faulty readings (negative values)
7
8
    for i in range(n):
9
        # Remove indices that are out of the current window
10
        if dq and dq[0] < i - k + 1:
11
            dq.popleft()
12
13
        # Add the current element's index if it's a negative value (faulty)
14
        if arr[i] < 0:
15
            dq.append(i)
16
17
        # If the window is large enough (i >= k - 1), we check the result
18
        if i >= k - 1:
19
            if dq:
20
                result.append(arr[dq[0]])  # The earliest faulty reading in the window
21
            else:
22
                result.append(0)  # No faulty reading in this window
23
24
    return result
25
26
def process_test_cases():
27
    t = int(input())  # number of test cases
28
    for _ in range(t):
29
        n, k = map(int, input().split())  # size of array and batch size
30
        arr = list(map(int, input().split()))  # the array of sensor readings
31
        result = earliest_faulty_reading(arr, k)
32
        print(' '.join(map(str, result)))
33
34
# Call the function to process test cases
35
process_test_cases()",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052696
1390052692,unknown,unknown,unknown,"1
def solve_firewall_problem():
2
    t = int(input())
3
    4
    for _ in range(t):
5
        n, k = map(int, input().split())
6
        strengths = list(map(int, input().split()))
7
        8
        min_effort = float('inf')
9
        10
        for mask in range(1 << n):
11
            if bin(mask).count('1') <= k:
12
                effort = 0
13
                skipped = 0
14
                15
                for i in range(n):
16
                    if (mask >> i) & 1:
17
                        skipped += 1
18
                    else:
19
                        effort += strengths[i] + skipped
20
                21
                min_effort = min(min_effort, effort)
22
        23
        print(min_effort)
24
25
if __name__ == ""__main__"":
26
    solve_firewall_problem()",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052692
1390052693,unknown,unknown,unknown,"1
def find_faulty_readings(arr, k):
2
    ans = []
3
    for i in range(len(arr)-k+1):
4
        batch = arr[i: i+k]
5
        fault = 0
6
        for reading in batch:
7
            if reading < 0:
8
                fault=reading
9
                break
10
        ans.append(fault)
11
    return ans
12
def solve():
13
    m = int(input())
14
    for _ in range(m):
15
        n,k = map(int,input().split())
16
        arr = list(map(int,input().split()))
17
        ans = find_faulty_readings(arr,k)
18
        print(*ans)
19
solve()",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052693
1390052684,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_earliest_faults(arr, n, k):
4
    result = []
5
    dq = deque()  
6
7
    8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    16
    for i in range(k, n):
17
        18
        if dq and dq[0] < i - k + 1:
19
            dq.popleft()
20
        21
        22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
def main():
31
    t = int(input())
32
    results = []
33
    34
    for _ in range(t):
35
        n, k = map(int, input().split())
36
        arr = list(map(int, input().split()))
37
        38
        39
        result = find_earliest_faults(arr, n, k)
40
        41
        42
        results.append("" "".join(map(str, result)))
43
    44
    45
    print(""\n"".join(results))
46
47
if __name__ == ""__main__"":
48
    main()
49",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052684
1390052685,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052685
1390052687,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    4
    # Count total numbers of ones and zeros
5
    total_ones = server_string.count('1')
6
    total_zeros = n - total_ones
7
    8
    # Precompute prefix/suffix counts
9
    prefix_ones = [0] * (n + 1)
10
    prefix_zeros = [0] * (n + 1)
11
    12
    for i in range(n):
13
        prefix_ones[i+1] = prefix_ones[i] + (1 if server_string[i] == '1' else 0)
14
        prefix_zeros[i+1] = prefix_zeros[i] + (1 if server_string[i] == '0' else 0)
15
    16
    min_cost = float('inf')
17
    18
    # For each possible prefix length
19
    for left in range(n + 1):
20
        # Ones removed from the left
21
        left_ones_removed = prefix_ones[left]
22
        23
        # Remaining zeros after removing left prefix
24
        remaining_zeros_after_left = total_zeros - prefix_zeros[left]
25
        26
        # Optimize right side removal using the fact that we want to minimize
27
        # both remaining zeros and removed ones
28
        right_ones_to_remove = 0
29
        right_zeros_removed = 0
30
        31
        # Binary search approach to find optimal right side removal
32
        lo, hi = 0, n - left
33
        while lo < hi:
34
            mid = (lo + hi) // 2
35
            36
            # If removing up to mid characters from right
37
            ones_right = prefix_ones[n] - prefix_ones[n - mid]
38
            zeros_right = prefix_zeros[n] - prefix_zeros[n - mid]
39
            40
            # Remaining zeros
41
            remaining_zeros = remaining_zeros_after_left - zeros_right
42
            # Total ones removed
43
            removed_ones = left_ones_removed + ones_right
44
            45
            # Current cost
46
            cost = max(remaining_zeros, removed_ones)
47
            48
            # Update minimum
49
            if cost < min_cost:
50
                min_cost = cost
51
                right_ones_to_remove = ones_right
52
                right_zeros_removed = zeros_right
53
            54
            # Decide which direction to continue search
55
            if remaining_zeros > removed_ones:
56
                # Need to remove more zeros
57
                lo = mid + 1
58
            else:
59
                # Need to remove fewer ones
60
                hi = mid
61
    62
    # Handle the special case when binary search didn't find optimal solution
63
    # Check all possible right removals for the best left prefix
64
    for right in range(n - left + 1):
65
        if left + right == n:  # Skip if removing everything
66
            continue
67
            68
        ones_right = prefix_ones[n] - prefix_ones[n - right]
69
        zeros_right = prefix_zeros[n] - prefix_zeros[n - right]
70
        71
        remaining_zeros = remaining_zeros_after_left - zeros_right
72
        removed_ones = left_ones_removed + ones_right
73
        74
        cost = max(remaining_zeros, removed_ones)
75
        min_cost = min(min_cost, cost)
76
    77
    return min_cost
78
79
def linear_solution(server_string):
80
    """"""
81
    O(n) solution that's simpler and more reliable
82
    """"""
83
    n = len(server_string)
84
    total_ones = server_string.count('1')
85
    86
    # Precompute prefix sums
87
    prefix_ones = [0] * (n + 1)
88
    prefix_zeros = [0] * (n + 1)
89
    90
    for i in range(n):
91
        prefix_ones[i+1] = prefix_ones[i] + (1 if server_string[i] == '1' else 0)
92
        prefix_zeros[i+1] = prefix_zeros[i] + (1 if server_string[i] == '0' else 0)
93
    94
    min_cost = float('inf')
95
    96
    # Try all possibilities of where to cut from left (i) and right (j)
97
    for i in range(n + 1):  # left cut position
98
        left_ones_removed = prefix_ones[i]
99
        100
        for j in range(n + 1):  # right cut position
101
            # Skip if we're removing everything
102
            if i + j >= n:
103
                continue
104
                105
            # Ones removed from right
106
            right_ones_removed = total_ones - prefix_ones[n-j]
107
            108
            # Total ones removed
109
            ones_removed = left_ones_removed + right_ones_removed
110
            111
            # Zeros remaining in the middle section
112
            zeros_remaining = prefix_zeros[n-j] - prefix_zeros[i]
113
            114
            # Cost is max of ones removed and zeros remaining
115
            cost = max(ones_removed, zeros_remaining)
116
            117
            min_cost = min(min_cost, cost)
118
    119
    return min_cost
120
121
def solve():
122
    t = int(input())
123
    124
    for _ in range(t):
125
        server_string = input().strip()
126
        # Use linear solution for reliable results
127
        result = linear_solution(server_string)
128
        print(result)
129
130
# Execute the solution
131
solve()",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052687
1390052676,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner sc = new Scanner(System.in);
9
        int T = sc.nextInt();
10
        while (T-- > 0) {
11
            int n = sc.nextInt();
12
            int k = sc.nextInt();
13
            long[] a = new long[n];
14
            for (int i = 0; i < n; i++) {
15
                a[i] = sc.nextLong();
16
            }
17
            18
            long[][] dp = new long[n + 1][k + 1];
19
            for (int i = 0; i <= n; i++) {
20
                for (int j = 0; j <= k; j++) {
21
                    dp[i][j] = Long.MAX_VALUE / 2; // Avoid overflow in min operations
22
                }
23
            }
24
            dp[0][0] = 0;
25
            26
            for (int i = 0; i < n; i++) {
27
                for (int j = 0; j <= k; j++) {
28
                    if (dp[i][j] >= Long.MAX_VALUE / 2) continue;
29
                    // Don't skip current firewall
30
                    if (dp[i + 1][j] > dp[i][j] + a[i] + j) {
31
                        dp[i + 1][j] = dp[i][j] + a[i] + j;
32
                    }
33
                    // Skip current firewall
34
                    if (j + 1 <= k && dp[i + 1][j + 1] > dp[i][j]) {
35
                        dp[i + 1][j + 1] = dp[i][j];
36
                    }
37
                }
38
            }
39
            40
            long minEffort = Long.MAX_VALUE;
41
            for (int j = 0; j <= k; j++) {
42
                if (dp[n][j] < minEffort) {
43
                    minEffort = dp[n][j];
44
                }
45
            }
46
            System.out.println(minEffort == Long.MAX_VALUE / 2 ? 0 : minEffort);
47
        }
48
        sc.close();
49
    }
50
}",170,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052676
