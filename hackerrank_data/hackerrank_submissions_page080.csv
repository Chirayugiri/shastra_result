submission_id,username,problem_name,language,code,page,url
1390054484,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
8
    for _ in range(t):
9
        s = input_data[line].strip()
10
        line += 1
11
        n = len(s)
12
13
        # Get indices of active servers ('1')
14
        positions = [i for i, ch in enumerate(s) if ch == '1']
15
        m = len(positions)
16
17
        if m == 0:
18
            out_lines.append(""0"")
19
            continue
20
21
        # Precompute A: A[i] = positions[i] - i
22
        A = [positions[i] - i for i in range(m)]
23
24
        # Define the check function
25
        def check(X):
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                while j < m and A[j] - A[i] <= X:
33
                    j += 1
34
                if j - i >= m - X:
35
                    return True
36
            return False
37
38
        # Binary search for the minimum X
39
        lo, hi, ans = 0, n, n
40
        while lo <= hi:
41
            mid = (lo + hi) // 2
42
            if check(mid):
43
                ans = mid
44
                hi = mid - 1
45
            else:
46
                lo = mid + 1
47
48
        out_lines.append(str(ans))
49
50
    sys.stdout.write(""\n"".join(out_lines))
51
52
if __name__ == ""__main__"":
53
    solve()",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054484
1390054485,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    active_servers = server_rack.count('1')
4
    idle_servers = n - active_servers
5
    6
    min_cost = min(max(active_servers, 0), max(idle_servers, 0))  # Initial cost if we remove all servers
7
    8
    # Try removing different numbers of servers from the beginning
9
    for left in range(n + 1):
10
        # For each left choice, try removing different numbers from the end
11
        for right in range(n + 1 - left):
12
            # Calculate the remaining servers after removal
13
            remaining = server_rack[left:n-right]
14
            15
            # If nothing remains, the cost is max(active_servers, idle_servers)
16
            if not remaining:
17
                continue
18
            19
            active_removed = server_rack[:left].count('1') + server_rack[n-right:].count('1')
20
            idle_remaining = remaining.count('0')
21
            22
            cost = max(idle_remaining, active_removed)
23
            min_cost = min(min_cost, cost)
24
    25
    return min_cost
26
27
# Read input
28
t = int(input().strip())
29
for _ in range(t):
30
    server_rack = input().strip()
31
    print(min_decommissioning_cost(server_rack))",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054485
1390054486,unknown,unknown,unknown,"1
import bisect
2
3
t = int(input())
4
for _ in range(t):
5
    s = input().strip()
6
    n = len(s)
7
    8
    if n == 0:
9
        print(0)
10
        continue
11
    if n == 1:
12
        print(0)
13
        continue
14
    if n == 2:
15
        print(1 if s[0] == s[1] else 0)
16
        continue
17
    if not all(c in '01' for c in s):
18
        print(0)
19
        continue
20
    if all(c == '0' for c in s) or all(c == '1' for c in s):
21
        print(0)
22
        continue
23
    24
    prefix_0 = [0] * (n + 1)
25
    prefix_1 = [0] * (n + 1)
26
    for i in range(n):
27
        prefix_0[i + 1] = prefix_0[i] + (1 if s[i] == '0' else 0)
28
        prefix_1[i + 1] = prefix_1[i] + (1 if s[i] == '1' else 0)
29
    total_1 = prefix_1[n]
30
    31
    low, high = 0, n
32
    while low < high:
33
        m = (low + high) // 2
34
        possible = False
35
        for j in range(n + 1):
36
            target = prefix_0[j] - m
37
            i = bisect.bisect_left(prefix_0, target, 0, j + 1)
38
            if i <= j:
39
                ones_removed = prefix_1[i] + (total_1 - prefix_1[j])
40
                remaining_zeros = prefix_0[j] - prefix_0[i]
41
                if max(remaining_zeros, ones_removed) <= m:
42
                    possible = True
43
                    break
44
        if possible:
45
            high = m
46
        else:
47
            low = m + 1
48
    print(low)",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054486
1390054480,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int t = sc.nextInt();
7
        8
        while (t-- > 0) {
9
            int n = sc.nextInt(), k = sc.nextInt();
10
            int[] a = new int[n];
11
            for (int i = 0; i < n; i++) a[i] = sc.nextInt();
12
            System.out.println(minEffort(n, k, a));
13
        }
14
        sc.close();
15
    }
16
    17
    static int minEffort(int n, int k, int[] a) {
18
        k = Math.min(k, n);
19
        int[][] dp = new int[n + 1][k + 1];
20
        for (int[] row : dp) Arrays.fill(row, -1);
21
        return dfs(0, 0, n, k, a, dp);
22
    }
23
    24
    static int dfs(int i, int skip, int n, int k, int[] a, int[][] dp) {
25
        if (i == n) return 0;
26
        if (dp[i][skip] != -1) return dp[i][skip];
27
        28
        int take = a[i] + skip + dfs(i + 1, skip, n, k, a, dp);
29
        int leave = (skip < k) ? dfs(i + 1, skip + 1, n, k, a, dp) : Integer.MAX_VALUE;
30
        31
        return dp[i][skip] = Math.min(take, leave);
32
    }
33
}
34",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054480
1390054482,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
vector<int> earliest_faulty_readings(vector<int>& arr, int k) {
5
    int n = arr.size();
6
    vector<int> result;
7
    deque<int> dq;  // Stores indices of negative numbers
8
9
    // Process first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) dq.push_back(i);
12
    }
13
14
    // Process the sliding window
15
    for (int i = k; i <= n; i++) {
16
        // Append first negative number in the window
17
        if (!dq.empty()) 
18
            result.push_back(arr[dq.front()]);  // First negative in the deque
19
        else 
20
            result.push_back(0);  // No negative number
21
22
        // Remove elements that are out of the current window
23
        while (!dq.empty() && dq.front() < i - k + 1) {
24
            dq.pop_front();
25
        }
26
27
        // Add the next element if negative
28
        if (i < n && arr[i] < 0) {
29
            dq.push_back(i);
30
        }
31
    }
32
33
    return result;
34
}
35
36
int main() {
37
    int t;
38
    cin >> t;  // Number of test cases
39
    while (t--) {
40
        int n, k;
41
        cin >> n >> k;  // Size of array and batch size
42
        vector<int> arr(n);
43
        for (int i = 0; i < n; i++) {
44
            cin >> arr[i];
45
        }
46
        47
        vector<int> result = earliest_faulty_readings(arr, k);
48
        for (int num : result) {
49
            cout << num << "" "";
50
        }
51
        cout << endl;
52
    }
53
    return 0;
54
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054482
1390054475,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
using ll = long long;
5
6
int main() {
7
    // Optimize input/output
8
    ios::sync_with_stdio(false);
9
    cin.tie(0);
10
11
    int T;
12
    cin >> T;
13
    for (int t = 0; t < T; t++) {
14
        int n, k;
15
        cin >> n >> k;
16
        vector<ll> a(n);
17
        for (int i = 0; i < n; i++) {
18
            cin >> a[i];
19
        }
20
21
        // INF for impossible states , really tough one to solved actually 
22
        const ll INF = 1e18;
23
24
        vector<ll> prev(k + 1, INF);
25
        prev[0] = 0; 
26
27
    28
        for (int i = 0; i < n; i++) {
29
            vector<ll> curr(k + 1, INF);
30
            for (int s = 0; s <= k; s++) {
31
                // Don't skip i
32
                curr[s] = prev[s] + a[i] + s;
33
                // Skip i (if possible)
34
                if (s > 0) {
35
                    curr[s] = min(curr[s], prev[s - 1]);
36
                }
37
            }
38
            prev = curr; 
39
        }
40
41
42
        ll ans = *min_element(prev.begin(), prev.end());
43
        cout << ans << '\n';
44
    }
45
    return 0;
46
}",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054475
1390054472,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    prev_dp = [float('inf')] * (k + 1)
3
    prev_dp[0] = 0  
4
5
    for i in range(1, n + 1):
6
        curr_dp = [float('inf')] * (k + 1)
7
8
        for j in range(k + 1):
9
            curr_dp[j] = prev_dp[j] + firewalls[i - 1] + j  
10
11
            if j > 0:  
12
                curr_dp[j] = min(curr_dp[j], prev_dp[j - 1])
13
14
        prev_dp = curr_dp  
15
16
    return min(prev_dp)
17
18
T = int(input())
19
for _ in range(T):
20
    n, k = map(int, input().split())
21
    firewalls = list(map(int, input().split()))
22
23
    print(min_effort(n, k, firewalls))
24",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054472
1390054471,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    ios::sync_with_stdio(false);
10
    cin.tie(nullptr);
11
    12
    int T;
13
    cin >> T;
14
    while(T--) {
15
        string s;
16
        cin >> s;
17
        int n = s.size();
18
        19
        // Build prefix sums for zeros and ones.
20
        // prefix0[i] = number of '0's in s[0, i)
21
        // prefix1[i] = number of '1's in s[0, i)
22
        vector<int> prefix0(n+1, 0), prefix1(n+1, 0);
23
        for (int i = 0; i < n; i++) {
24
            prefix0[i+1] = prefix0[i] + (s[i] == '0');
25
            prefix1[i+1] = prefix1[i] + (s[i] == '1');
26
        }
27
        int totalOnes = prefix1[n];
28
        29
        // We'll binary search for the minimal cost C in the range [0, n].
30
        int low = 0, high = n, ans = n;
31
        while(low <= high) {
32
            int mid = (low + high) / 2;
33
            bool feasible = false;
34
            35
            // For each possible prefix removal (i.e. for each starting index l of the kept substring)
36
            for (int l = 0; l <= n; l++) {
37
                // In the kept substring s[l, r), the zeros count is: prefix0[r] - prefix0[l].
38
                // We require that prefix0[r] - prefix0[l] <= mid.
39
                // That is, prefix0[r] <= prefix0[l] + mid.
40
                // Because prefix0 is non-decreasing, we can use upper_bound:
41
                int allowed = prefix0[l] + mid;
42
                // Find the first index r (in [l, n+1)) where prefix0[r] > allowed.
43
                int r = upper_bound(prefix0.begin() + l, prefix0.end(), allowed) - prefix0.begin();
44
                // Then the maximum r with zeros constraint is r_max = r - 1.
45
                if(r - 1 < l) continue; // should not happen because at least r = l exists.
46
                int r_max = r - 1;
47
                // Ones kept in s[l, r_max) is:
48
                int onesKept = prefix1[r_max] - prefix1[l];
49
                // We need onesKept >= totalOnes - mid.
50
                if(onesKept >= totalOnes - mid) {
51
                    feasible = true;
52
                    break;
53
                }
54
            }
55
            56
            if(feasible) {
57
                ans = mid;
58
                high = mid - 1;
59
            } else {
60
                low = mid + 1;
61
            }
62
        }
63
        64
        cout << ans << ""\n"";
65
    }
66
    return 0;
67
}
68",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054471
1390054469,unknown,unknown,unknown,"1
function processData(input) {
2
    let lines = input.trim().split(/\s+/);
3
    let idx = 0;
4
    let T = parseInt(lines[idx++]);
5
    let result = [];
6
7
    for (let t = 0; t < T; t++) {
8
        let n = parseInt(lines[idx]);
9
        let k = parseInt(lines[idx + 1]);
10
        idx += 2;
11
12
        let a = lines.slice(idx, idx + n).map(Number);
13
        idx += n;
14
15
        let sumA = a.reduce((sum, val) => sum + val, 0);
16
        let v = [];
17
18
        for (let i = 0; i < n; i++) {
19
            v.push(a[i] - (n - i - 1));
20
        }
21
22
        v.sort((a, b) => b - a); 
23
24
        let prefix = Array(n + 1).fill(0);
25
        for (let i = 0; i < n; i++) {
26
            prefix[i + 1] = prefix[i] + v[i];
27
        }
28
29
        let maxSum = 0;
30
        let maxT = Math.min(k, n);
31
32
        for (let t = 0; t <= maxT; t++) {
33
            let current = prefix[t] + (t * (t - 1)) / 2;
34
            maxSum = Math.max(maxSum, current);
35
        }
36
37
        result.push(sumA - maxSum);
38
    }
39
40
    console.log(result.join(""\n""));
41
}
42
43
// Handling input from stdin
44
process.stdin.resume();
45
process.stdin.setEncoding(""utf-8"");
46
let _input = """";
47
48
process.stdin.on(""data"", function (input) {
49
    _input += input;
50
});
51
52
process.stdin.on(""end"", function () {
53
    processData(_input);
54
});
55",80,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054469
