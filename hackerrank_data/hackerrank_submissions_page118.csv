submission_id,username,problem_name,language,code,page,url
1390053779,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls using exactly j skips
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    # Calculate strength increments for each position based on previous skips
11
    for i in range(1, n + 1):
12
        for j in range(k + 1):
13
            # If we can skip this firewall
14
            if j > 0:
15
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
16
            17
            # If we don't skip this firewall
18
            if j <= k:  # We've used j skips so far
19
                # The strength increases by the number of previous skips
20
                current_strength = strengths[i-1]
21
                dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength + j)
22
    23
    # Find minimum effort among all possible numbers of skips
24
    return min(dp[n])
25
26
t = int(input())
27
for _ in range(t):
28
    n, k = map(int, input().split())
29
    strengths = list(map(int, input().split()))
30
    print(min_effort_to_breach(n, k, strengths))",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053779
1390053784,unknown,unknown,unknown,"1
cases = int(input())
2
for t in range(cases):
3
    n,k = [int(i) for i in input().split()]
4
    array = [int(i) for i in input().split()]
5
    if n == k:
6
        print(0)
7
        continue
8
    batch_sum = [0]*n
9
    for i in range(n):
10
        batch_sum[i] = sum(array[i:i+k])
11
    total = sum(array)
12
    best = total
13
    for i in range(n):
14
        best = min(best, total -batch_sum[i] + n-i-1)
15
    print(best)
16
        17
        18
    19
    20
    21
    22
    ",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053784
1390053780,unknown,unknown,unknown,"1
def min_server_decommission_cost(binary_str):
2
    # Step 1: Trim leading and trailing '0's
3
    trimmed_str = binary_str.strip('0')
4
5
    # If there are no '1's left after trimming, cost is 0
6
    if '1' not in trimmed_str:
7
        return 0
8
9
    # Step 2: Count remaining '0's in between
10
    idle_servers_left = trimmed_str.count('0')
11
12
    # Step 3: Try removing active servers ('1's) optimally
13
    active_servers_removed = binary_str.count('1') - trimmed_str.count('1')
14
15
    # Step 4: Compute minimum possible cost
16
    return max(idle_servers_left, active_servers_removed)
17
18
# Read input
19
t = int(input().strip())  # Number of test cases
20
for _ in range(t):
21
    binary_str = input().strip()
22
    print(min_server_decommission_cost(binary_str))
23",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053780
1390053775,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
8
    for i in range(n):
9
        if dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
12
        if arr[i] < 0:
13
            dq.append(i)
14
15
        if i >= k - 1:
16
            result.append(arr[dq[0]] if dq else 0)
17
18
    return result
19
20
t = int(input())
21
for _ in range(t):
22
    n, k = map(int, input().split())
23
    arr = list(map(int, input().split()))
24
    print(*earliest_faulty_readings(arr, k))
25",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053775
1390053777,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053777
1390053778,unknown,unknown,unknown,"1
def minimum_effort(test_cases, data):
2
    results = []
3
    for case in range(test_cases):
4
        n, k = data[case][0]
5
        firewalls = data[case][1]
6
        total_effort = sum(firewalls)
7
        8
        if k == n:
9
            results.append(""0"")
10
            continue
11
        12
        min_effort = total_effort
13
        for i in range(n):
14
            skipped_effort = total_effort - firewalls[i] + (n - 1) * 1
15
            min_effort = min(min_effort, skipped_effort)
16
        17
        results.append(str(min_effort))
18
    19
    return ""\n"".join(results)
20
21
# Reading input
22
t = int(input())
23
data = []
24
for _ in range(t):
25
    n, k = map(int, input().split())
26
    firewalls = list(map(int, input().split()))
27
    data.append(((n, k), firewalls))
28
29
# Processing and printing output
30
print(minimum_effort(t, data))
31",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053778
1390053767,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    if k >= n:
3
        return 0
4
5
    dp = [float('inf')] * (k + 1)
6
    dp[0] = 0
7
8
    for i in range(1, n + 1):
9
        for j in range(min(k, i), -1, -1):
10
            if j <= i - 1:
11
                dp[j] = min(dp[j], dp[j] + strengths[i - 1] + j)
12
            if j > 0:
13
                dp[j] = min(dp[j], dp[j - 1])
14
15
    return dp[k]
16
17
def solve():
18
    t = int(input())
19
    for _ in range(t):
20
        n, k = map(int, input().split())
21
        strengths = list(map(int, input().split()))
22
        if k >= n:
23
            print(0)
24
        else:
25
            print(min_effort_to_breach(n, k, strengths))
26
27
solve()",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053767
1390053772,unknown,unknown,unknown,"1
def min_effort_to_breach(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n, k = test_cases[t][0]  # Read n and k
6
        firewalls = test_cases[t][1]  # Read firewall strengths
7
        8
        # Sort firewalls based on strength, keeping track of original indices
9
        sorted_indices = sorted(range(n), key=lambda i: -firewalls[i])
10
11
        # Mark `k` strongest firewalls as skipped
12
        skipped = set(sorted_indices[:k])
13
14
        total_effort = 0
15
        increment = 0  # Tracks how many times subsequent firewalls increase
16
17
        for i in range(n):
18
            if i in skipped:
19
                increment += 1  # Since we skipped this firewall, increase effect on next
20
            else:
21
                total_effort += firewalls[i] + increment  # Add effort with increments
22
23
        results.append(total_effort)
24
    25
    return results
26
27
28
# Reading input
29
T = int(input().strip())  
30
test_cases = []
31
32
for _ in range(T):
33
    n, k = map(int, input().strip().split())  
34
    firewalls = list(map(int, input().strip().split()))  
35
    test_cases.append(((n, k), firewalls))
36
37
# Get results
38
output = min_effort_to_breach(T, test_cases)
39
40
# Print results
41
for res in output:
42
    print(res)
43",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053772
1390053774,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt(); 
7
        8
        while (T-- > 0) {
9
            String rack = sc.next();  // Binary string representing server rack
10
            11
            int n = rack.length();
12
            int[] servers = new int[n];
13
            for (int i = 0; i < n; i++) {
14
                servers[i] = rack.charAt(i) - '0';  // Convert string to int array
15
            }
16
            17
            int minCost = n;  // Maximum possible cost is n (if no decommissioning)
18
            19
            // Try all possible left and right cuts
20
            for (int left = 0; left <= n; left++) {
21
                for (int right = 0; left + right <= n; right++) {
22
                    int remainingIdle = 0;
23
                    int decommissionedActive = 0;
24
                    25
                    // Count remaining idle servers and decommissioned active servers
26
                    for (int i = left; i < n - right; i++) {
27
                        if (servers[i] == 0) remainingIdle++;
28
                    }
29
                    for (int i = 0; i < left; i++) {
30
                        if (servers[i] == 1) decommissionedActive++;
31
                    }
32
                    for (int i = n - right; i < n; i++) {
33
                        if (servers[i] == 1) decommissionedActive++;
34
                    }
35
                    36
                    // Cost is maximum of remaining idle and decommissioned active
37
                    int cost = Math.max(remainingIdle, decommissionedActive);
38
                    minCost = Math.min(minCost, cost);
39
                }
40
            }
41
            42
            System.out.println(minCost);
43
        }
44
        45
        sc.close();
46
    }
47
}",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053774
1390053766,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
    for _ in range(t):
8
        s = input_data[line].strip()
9
        line += 1
10
        n = len(s)
11
        # get indices for active servers ('1')
12
        positions = [i for i, ch in enumerate(s) if ch == '1']
13
        m = len(positions)
14
        if m == 0:
15
            out_lines.append(""0"")
16
            continue
17
        # Precompute A: A[i] = positions[i] - i
18
        A = [positions[i] - i for i in range(m)]
19
        20
        # check(X) returns True if there exists a window in A
21
        # such that:
22
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
23
        # and A[j] - A[i] <= X.
24
        def check(X):
25
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                # slide j as far as possible while A[j]-A[i] <= X
33
                while j < m and A[j] - A[i] <= X:
34
                    j += 1
35
                # j now is one past the last index satisfying condition, so the window has length (j - i)
36
                if j - i >= m - X:
37
                    return True
38
            return False
39
40
        # Binary search for the minimum X
41
        lo, hi, ans = 0, n, n
42
        while lo <= hi:
43
            mid = (lo + hi) // 2
44
            if check(mid):
45
                ans = mid
46
                hi = mid - 1
47
            else:
48
                lo = mid + 1
49
        out_lines.append(str(ans))
50
    51
    sys.stdout.write(""\n"".join(out_lines))
52
    53
if __name__ == '__main__':
54
    solve()
55",118,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053766
