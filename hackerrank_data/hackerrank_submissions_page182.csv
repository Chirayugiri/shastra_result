submission_id,username,problem_name,language,code,page,url
1390052341,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process first k elements
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the first result
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process rest of the elements
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of the window
18
        while dq and dq[0] <= i - k:
19
            dq.popleft()
20
        21
        # Add new element if it's negative
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store the result
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
def process_test_cases():
31
    t = int(input())
32
    for _ in range(t):
33
        n, k = map(int, input().split())
34
        arr = list(map(int, input().split()))
35
        print(*earliest_faulty_readings(arr, k))
36
37
if __name__ == ""__main__"":
38
    process_test_cases()",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052341
1390052343,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include <deque>
7
using namespace std;
8
9
int main() {
10
    int t;
11
    cin >> t;
12
    while (t--) {
13
        int n, k;
14
        cin >> n >> k;
15
        vector<int> arr(n);
16
        for (int i = 0; i < n; i++) {
17
            cin >> arr[i];
18
        }
19
        20
        deque<int> dq;
21
        vector<int> result;
22
        23
        for (int i = 0; i < n; i++) {
24
            // Add current element if it's a fault (negative)
25
            if (arr[i] < 0) {
26
                dq.push_back(i);
27
            }
28
29
            // Remove elements that are out of current window
30
            if (i >= k && !dq.empty() && dq.front() <= i - k) {
31
                dq.pop_front();
32
            }
33
34
            // Start recording result once we have a complete window
35
            if (i >= k - 1) {
36
                if (!dq.empty()) {
37
                    result.push_back(arr[dq.front()]);
38
                } else {
39
                    result.push_back(0);
40
                }
41
            }
42
        }
43
44
        // Print the result for this test case
45
        for (int i = 0; i < result.size(); i++) {
46
            cout << result[i];
47
            if (i != result.size() - 1) cout << "" "";
48
        }
49
        cout << endl;
50
    }
51
    return 0;
52
}
53",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052343
1390052340,unknown,unknown,unknown,"1
def min_cost(servers):
2
    n = len(servers)
3
    4
    # Try all possible combinations of prefix and suffix removal
5
    min_cost = float('inf')
6
    7
    # i represents number of servers to remove from start
8
    for i in range(n + 1):
9
        # j represents number of servers to remove from end
10
        for j in range(n - i + 1):
11
            # Get the remaining substring
12
            remaining = servers[i:n-j]
13
            14
            if not remaining:  # If we remove everything
15
                ones_removed = servers.count('1')
16
                cost = max(0, ones_removed)
17
            else:
18
                # Count remaining zeros (idle servers)
19
                zeros_remaining = remaining.count('0')
20
                # Count ones removed from start and end
21
                ones_removed = servers[:i].count('1') + servers[n-j:].count('1')
22
                cost = max(zeros_remaining, ones_removed)
23
            24
            min_cost = min(min_cost, cost)
25
    26
    return min_cost
27
28
# Handle automatic input
29
t = int(input())  # Number of test cases
30
for _ in range(t):
31
    servers = input().strip()  # Read the binary string
32
    result = min_cost(servers)
33
    print(result)",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052340
1390052328,unknown,unknown,unknown,"1
def faulty_sensor_readings(arr, k):
2
    """"""
3
    Determines the earliest faulty reading for each consecutive batch of size k.
4
5
    Args:
6
        arr: A list of sensor readings.
7
        k: The batch size.
8
9
    Returns:
10
        A list containing the earliest faulty reading for each batch.
11
    """"""
12
    result = []
13
    for i in range(len(arr) - k + 1):
14
        batch = arr[i:i + k]
15
        fault = 0
16
        for num in batch:
17
            if num < 0:
18
                fault = num
19
                break
20
        result.append(fault)
21
    return result
22
23
if __name__ == ""__main__"":
24
    t = int(input())
25
    for _ in range(t):
26
        n, k = map(int, input().split())
27
        arr = list(map(int, input().split()))
28
        result = faulty_sensor_readings(arr, k)
29
        print(*result)",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052328
1390052330,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include <deque>
7
using namespace std;
8
9
int main() {
10
    int t;
11
    cin >> t;
12
    while (t--) {
13
        int n, k;
14
        cin >> n >> k;
15
        vector<int> arr(n);
16
        for (int i = 0; i < n; i++) 
17
            cin >> arr[i];
18
19
        deque<int> dq;
20
        vector<int> result;
21
22
        for (int i = 0; i < n; i++) {
23
            if (!dq.empty() && dq.front() == i - k) 
24
                dq.pop_front();
25
26
            if (arr[i] < 0) 
27
                dq.push_back(i);
28
29
            if (i >= k - 1) 
30
                result.push_back(dq.empty() ? 0 : arr[dq.front()]);
31
        }
32
33
        for (int num : result) 
34
            cout << num << "" "";
35
        cout << endl;
36
    }
37
    return 0;
38
}",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052330
1390052338,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
3
    results = []
4
5
    6
7
    # Loop through each possible batch
8
9
    for i in range(len(arr) - k + 1):
10
11
        fault_found = False
12
13
        14
15
        # Find earliest fault in current batch
16
17
        for j in range(i, i + k):
18
19
            if arr[j] < 0:
20
21
                results.append(arr[j])
22
23
                fault_found = True
24
25
                break
26
27
                28
29
        # If no fault found in batch, append 0
30
31
        if not fault_found:
32
33
            results.append(0)
34
35
    36
37
    return results
38
39
# Process test cases
40
41
t = int(input())
42
43
for _ in range(t):
44
45
    n, k = map(int, input().split())
46
47
    arr = list(map(int, input().split()))
48
49
    50
51
    result = earliest_fault(arr, k)
52
53
    print(*result)",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052338
1390052313,unknown,unknown,unknown,"1
def solve():
2
    t = int(input())
3
    for _ in range(t):
4
        s = input()
5
        n = len(s)
6
7
        min_cost = float('inf')
8
9
        for i in range(n + 1):
10
            removed_start = s[:i]
11
            remaining = s[i:]
12
13
            for j in range(len(remaining) + 1):
14
                idle_remaining = remaining[:len(remaining) - j].count('0')
15
                removed_end = remaining[len(remaining) - j:]
16
17
                active_removed = removed_start.count('1') + removed_end.count('1')
18
19
                cost = max(idle_remaining, active_removed)
20
                min_cost = min(min_cost, cost)
21
22
        print(min_cost)
23
24
solve()",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052313
1390052317,unknown,unknown,unknown,"1
def find_faulty_readings(arr, k):
2
3
    n = len(arr)
4
5
    results = []
6
7
    for i in range(n - k + 1):
8
9
        batch = arr[i:i+k]
10
11
        faulty_index = next((j for j, value in enumerate(batch) if value < 0), None)
12
13
        if faulty_index is not None:
14
15
            results.append(batch[faulty_index])
16
17
        else:
18
19
            results.append(0)
20
21
    return results
22
23
# Read input
24
25
import sys
26
27
input = sys.stdin.read
28
29
data = input().split()
30
31
t = int(data[0])  # Number of test cases
32
33
index = 1
34
35
results = []
36
37
for _ in range(t):
38
39
    n = int(data[index])
40
41
    k = int(data[index + 1])
42
43
    index += 2
44
45
    arr = list(map(int, data[index:index + n]))
46
47
    index += n
48
49
    50
51
    results.append(find_faulty_readings(arr, k))
52
53
# Print results
54
55
for result in results:
56
57
    print("" "".join(map(str, result)))",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052317
1390052315,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
    8
    # Process first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Append result for first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process remaining windows
17
    for i in range(k, n):
18
        # Remove elements not in the current window
19
        while dq and dq[0] <= i - k:
20
            dq.popleft()
21
        22
        # Add new element if faulty
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Append result for current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
def process_test_cases(t, test_cases):
32
    results = []
33
    for n, k, arr in test_cases:
34
        results.append("" "".join(map(str, earliest_faults(arr, k))))
35
    return ""\n"".join(results)
36
37
# Reading input
38
t = int(input())
39
test_cases = []
40
for _ in range(t):
41
    n, k = map(int, input().split())
42
    arr = list(map(int, input().split()))
43
    test_cases.append((n, k, arr))
44
45
# Output results
46
print(process_test_cases(t, test_cases))",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052315
1390052312,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
    result = []
3
    4
    for i in range(len(arr) - k + 1):
5
        batch = arr[i:i+k]
6
        fault_found = False
7
        8
        for num in batch:
9
            if num < 0:
10
                result.append(num)
11
                fault_found = True
12
                break
13
        14
        if not fault_found:
15
            result.append(0)
16
    17
    return result
18
19
t = int(input())
20
21
for _ in range(t):
22
    n, k = map(int, input().split())
23
    arr = list(map(int, input().split()))
24
    25
    result = earliest_fault(arr, k)
26
    print(*result)
27",182,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052312
