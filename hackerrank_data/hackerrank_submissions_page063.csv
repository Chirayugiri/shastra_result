submission_id,username,problem_name,language,code,page,url
1390054849,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    memo = {}    
3
    def solve(idx, skipped):
4
        if idx == n:
5
            return 0
6
        if (idx, skipped) in memo:
7
            return memo[(idx, skipped)]
8
        skip_effort = float('inf')
9
        if skipped < k:
10
            skip_effort = solve(idx + 1, skipped + 1)
11
        dont_skip_effort = (strengths[idx] + skipped) + solve(idx + 1, skipped)
12
        result = min(skip_effort, dont_skip_effort)
13
        memo[(idx, skipped)] = result
14
        return result
15
    return solve(0, 0)
16
def solve_test_cases():
17
    t = int(input()) 
18
    results = []
19
    for _ in range(t):
20
        n, k = map(int, input().split())
21
        strengths = list(map(int, input().split()))
22
        min_effort = min_effort_to_breach(n, k, strengths)
23
        results.append(min_effort)
24
    return results
25
if __name__ == ""__main__"":
26
    results = solve_test_cases()
27
    for result in results:
28
        print(result)",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054849
1390054848,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
#include <climits>
5
6
using namespace std;
7
8
vector<int> min_decommissioning_cost(const vector<string>& test_cases) {
9
    vector<int> results;
10
    11
    for (const string& servers : test_cases) {
12
        int n = servers.size();
13
        int total_0 = 0;
14
        for (char c : servers) {
15
            if (c == '0') total_0++;
16
        }
17
        int total_1 = n - total_0;
18
        19
        // Precompute prefix counts for 0s and 1s
20
        vector<int> prefix_0(n + 1, 0), prefix_1(n + 1, 0);
21
        for (int i = 1; i <= n; ++i) {
22
            prefix_0[i] = prefix_0[i-1] + (servers[i-1] == '0');
23
            prefix_1[i] = prefix_1[i-1] + (servers[i-1] == '1');
24
        }
25
        26
        // Precompute suffix counts for 0s and 1s
27
        vector<int> suffix_0(n + 1, 0), suffix_1(n + 1, 0);
28
        for (int j = 1; j <= n; ++j) {
29
            suffix_0[j] = suffix_0[j-1] + (servers[n - j] == '0');
30
            suffix_1[j] = suffix_1[j-1] + (servers[n - j] == '1');
31
        }
32
        33
        int min_cost = INT_MAX;
34
        35
        // Iterate over all possible prefixes (i)
36
        for (int i = 0; i <= n; ++i) {
37
            int j_max = n - i;
38
            int left = 0, right = j_max;
39
            int best_j = 0;
40
            int best_cost = INT_MAX;
41
            42
            // Binary search for the best j
43
            while (left <= right) {
44
                int mid = (left + right) / 2;
45
                int remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid]);
46
                int decommissioned_1 = prefix_1[i] + suffix_1[mid];
47
                int current_cost = max(remaining_0, decommissioned_1);
48
                49
                if (current_cost < best_cost) {
50
                    best_cost = current_cost;
51
                    best_j = mid;
52
                } else if (current_cost == best_cost && mid < best_j) {
53
                    best_j = mid;
54
                }
55
                56
                if (decommissioned_1 < remaining_0) {
57
                    left = mid + 1;
58
                } else {
59
                    right = mid - 1;
60
                }
61
            }
62
            63
            // Check neighboring j values
64
            for (int dj : {-1, 0, 1}) {
65
                int j = best_j + dj;
66
                if (j >= 0 && j <= j_max) {
67
                    int remaining_0 = total_0 - (prefix_0[i] + suffix_0[j]);
68
                    int decommissioned_1 = prefix_1[i] + suffix_1[j];
69
                    int current_cost = max(remaining_0, decommissioned_1);
70
                    if (current_cost < best_cost) {
71
                        best_cost = current_cost;
72
                    }
73
                }
74
            }
75
            76
            if (best_cost < min_cost) {
77
                min_cost = best_cost;
78
            }
79
        }
80
        81
        results.push_back(min_cost);
82
    }
83
    84
    return results;
85
}
86
87
int main() {
88
    int T;
89
    cin >> T;
90
    vector<string> test_cases(T);
91
    for (int i = 0; i < T; ++i) {
92
        cin >> test_cases[i];
93
    }
94
    95
    vector<int> results = min_decommissioning_cost(test_cases);
96
    97
    for (int result : results) {
98
        cout << result << endl;
99
    }
100
    101
    return 0;
102
} #include <iostream>
103
#include <vector>
104
#include <string>
105
#include <climits>
106
107
using namespace std;
108
109
vector<int> min_decommissioning_cost(const vector<string>& test_cases) {
110
    vector<int> results;
111
    112
    for (const string& servers : test_cases) {
113
        int n = servers.size();
114
        int total_0 = 0;
115
        for (char c : servers) {
116
            if (c == '0') total_0++;
117
        }
118
        int total_1 = n - total_0;
119
        120
        // Precompute prefix counts for 0s and 1s
121
        vector<int> prefix_0(n + 1, 0), prefix_1(n + 1, 0);
122
        for (int i = 1; i <= n; ++i) {
123
            prefix_0[i] = prefix_0[i-1] + (servers[i-1] == '0');
124
            prefix_1[i] = prefix_1[i-1] + (servers[i-1] == '1');
125
        }
126
        127
        // Precompute suffix counts for 0s and 1s
128
        vector<int> suffix_0(n + 1, 0), suffix_1(n + 1, 0);
129
        for (int j = 1; j <= n; ++j) {
130
            suffix_0[j] = suffix_0[j-1] + (servers[n - j] == '0');
131
            suffix_1[j] = suffix_1[j-1] + (servers[n - j] == '1');
132
        }
133
        134
        int min_cost = INT_MAX;
135
        136
        // Iterate over all possible prefixes (i)
137
        for (int i = 0; i <= n; ++i) {
138
            int j_max = n - i;
139
            int left = 0, right = j_max;
140
            int best_j = 0;
141
            int best_cost = INT_MAX;
142
            143
            // Binary search for the best j
144
            while (left <= right) {
145
                int mid = (left + right) / 2;
146
                int remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid]);
147
                int decommissioned_1 = prefix_1[i] + suffix_1[mid];
148
                int current_cost = max(remaining_0, decommissioned_1);
149
                150
                if (current_cost < best_cost) {
151
                    best_cost = current_cost;
152
                    best_j = mid;
153
                } else if (current_cost == best_cost && mid < best_j) {
154
                    best_j = mid;
155
                }
156
                157
                if (decommissioned_1 < remaining_0) {
158
                    left = mid + 1;
159
                } else {
160
                    right = mid - 1;
161
                }
162
            }
163
            164
            // Check neighboring j values
165
            for (int dj : {-1, 0, 1}) {
166
                int j = best_j + dj;
167
                if (j >= 0 && j <= j_max) {
168
                    int remaining_0 = total_0 - (prefix_0[i] + suffix_0[j]);
169
                    int decommissioned_1 = prefix_1[i] + suffix_1[j];
170
                    int current_cost = max(remaining_0, decommissioned_1);
171
                    if (current_cost < best_cost) {
172
                        best_cost = current_cost;
173
                    }
174
                }
175
            }
176
            177
            if (best_cost < min_cost) {
178
                min_cost = best_cost;
179
            }
180
        }
181
        182
        results.push_back(min_cost);
183
    }
184
    185
    return results;
186
}
187
188
int main() {
189
    int T;
190
    cin >> T;
191
    vector<string> test_cases(T);
192
    for (int i = 0; i < T; ++i) {
193
        cin >> test_cases[i];
194
    }
195
    196
    vector<int> results = min_decommissioning_cost(test_cases);
197
    198
    for (int result : results) {
199
        cout << result << endl;
200
    }
201
    202
    return 0;
203
} 
204",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054848
1390054854,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner input = new Scanner(System.in);
6
        int t = input.nextInt();  // Number of test cases
7
        8
        while (t-- > 0) {
9
            int N = input.nextInt();  // Array size
10
            int K = input.nextInt();  // Batch size
11
            int[] arr = new int[N];
12
            13
            for (int i = 0; i < N; i++) {
14
                arr[i] = input.nextInt();
15
            }
16
            17
            List<Integer> result = findEarliestFaults(arr, K);
18
            19
            // Print the result for this test case
20
            for (int num : result) {
21
                System.out.print(num + "" "");
22
            }
23
            System.out.println();
24
        }
25
        26
        input.close();
27
    }
28
29
    public static List<Integer> findEarliestFaults(int[] arr, int K) {
30
        List<Integer> result = new ArrayList<>();
31
        Deque<Integer> deque = new LinkedList<>();  // Stores indices of negative numbers
32
        33
        int n = arr.length;
34
35
        // Process first window of size K
36
        for (int i = 0; i < K; i++) {
37
            if (arr[i] < 0) {
38
                deque.addLast(i);
39
            }
40
        }
41
        42
        // Process remaining elements
43
        for (int i = K; i <= n; i++) {
44
            // If deque is not empty, the first element is the earliest fault
45
            if (!deque.isEmpty()) {
46
                result.add(arr[deque.peekFirst()]);
47
            } else {
48
                result.add(0);
49
            }
50
51
            // Remove elements that are out of the current window
52
            if (!deque.isEmpty() && deque.peekFirst() <= i - K) {
53
                deque.pollFirst();
54
            }
55
56
            // Add next element (if negative)
57
            if (i < n && arr[i] < 0) {
58
                deque.addLast(i);
59
            }
60
        }
61
        62
        return result;
63
    }
64
}
65",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054854
1390054845,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
import sys
3
4
def main():
5
    input = sys.stdin.read
6
    data = input().split(""\n"")
7
    8
    t = int(data[0])  # Number of test cases
9
    index = 1
10
11
    results = []
12
    for _ in range(t):
13
        n, k = map(int, data[index].split())  # Number of firewalls and skips allowed
14
        strengths = list(map(int, data[index + 1].split()))  # Firewall strengths
15
        index += 2
16
        17
        if k >= n:
18
            results.append(""0"")
19
            continue
20
        21
        # Calculate the impact of each firewall: strength + index
22
        impact = [(strengths[i] + i, i) for i in range(n)]
23
        24
        # Sort firewalls by impact (higher impact should be skipped first)
25
        impact.sort(reverse=True)
26
        27
        # Select the top k firewalls to skip
28
        to_skip = set(idx for _, idx in impact[:k])
29
        30
        # Compute the minimal effort
31
        effort = 0
32
        skipped = 0
33
        34
        for i in range(n):
35
            if i in to_skip:
36
                skipped += 1
37
            else:
38
                effort += strengths[i] + skipped
39
        40
        results.append(str(effort))
41
    42
    # Print all results at once (faster output handling)
43
    sys.stdout.write(""\n"".join(results) + ""\n"")
44
45
if _name_ == ""_main_"":
46
    main()",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054845
1390054846,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054846
1390054847,unknown,unknown,unknown,"1
2
def min_cost_server_pruning(server_rack):
3
    n = len(server_rack)
4
    min_cost = float('inf')
5
    6
    for i in range(n + 1):
7
        for j in range(n + 1 - i):
8
            remaining = server_rack[i:n-j]
9
            idle_remaining = remaining.count('0')
10
            11
            removed_start = server_rack[:i].count('1')
12
            removed_end = server_rack[n-j:].count('1')
13
            active_decommissioned = removed_start + removed_end
14
            15
            cost = max(idle_remaining, active_decommissioned)
16
            min_cost = min(min_cost, cost)
17
    18
    return min_cost
19
20
t = int(input())
21
for _ in range(t):
22
    server_rack = input().strip()
23
    print(min_cost_server_pruning(server_rack))",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054847
1390054840,unknown,unknown,unknown,"1
2
def min_cost_decommissioning(rack):
3
    first_active = rack.find('1')
4
    last_active = rack.rfind('1')
5
    6
    if first_active == -1:
7
        return 0  # No active servers
8
    9
    idle_servers = rack[first_active:last_active + 1].count('0')
10
    active_servers_removed = first_active + (len(rack) - last_active - 1)
11
    12
    return max(idle_servers, active_servers_removed)
13
14
15
16
T = int(input().strip())
17
for _ in range(T):
18
    rack = input().strip()
19
    print(min_cost_decommissioning(rack))
20
21",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054840
1390054843,unknown,unknown,unknown,"1
def min_cost_to_decommission(rack):
2
    length = len(rack)
3
    min_cost = float('inf')
4
    5
    for prefix in range(length + 1):
6
        for suffix in range(length + 1 - prefix):
7
            remaining = rack[prefix:length - suffix]
8
            9
            if not remaining:
10
                continue
11
            12
            idle_count = remaining.count('0')
13
            active_removed = rack[:prefix].count('1') + rack[length - suffix:].count('1')
14
            15
            cost = max(idle_count, active_removed)
16
            min_cost = min(min_cost, cost)
17
    18
    return min_cost
19
20
def process_cases():
21
    test_cases = int(input().strip())
22
    results = []
23
    24
    for _ in range(test_cases):
25
        rack = input().strip()
26
        results.append(min_cost_to_decommission(rack))
27
    28
    print(""\n"".join(map(str, results)))
29
30
process_cases()",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054843
1390054839,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
5
public class Solution {
6
7
    public static void main(String[] args) {
8
        Scanner sc = new Scanner(System.in);
9
        int T = sc.nextInt();
10
        sc.nextLine(); 
11
        while (T-- > 0) {
12
            String s = sc.nextLine().trim();
13
            int n = s.length();
14
            int totalOnes = 0;
15
            int maxConsecutiveOnes = 0;
16
            int currentConsecutiveOnes = 0;
17
            18
            for (char c : s.toCharArray()) {
19
                if (c == '1') {
20
                    currentConsecutiveOnes++;
21
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
22
                    totalOnes++;
23
                } else {
24
                    currentConsecutiveOnes = 0;
25
                }
26
            }
27
            28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            while (low <= high) {
43
                int mid = (low + high) / 2;
44
                int requiredOnes = Math.max(0, totalOnes - mid);
45
                46
                if (requiredOnes == 0) {
47
                    answer = mid;
48
                    high = mid - 1;
49
                    continue;
50
                }
51
                52
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
53
                if (maxOnes >= requiredOnes) {
54
                    answer = mid;
55
                    high = mid - 1;
56
                } else {
57
                    low = mid + 1;
58
                }
59
            }
60
            61
            System.out.println(answer);
62
        }
63
        sc.close();
64
    }
65
    66
    private static int maxOnesWithAtMostKZeros(String s, int k) {
67
        int left = 0;
68
        int zeros = 0;
69
        int maxOnes = 0;
70
        int n = s.length();
71
        72
        for (int right = 0; right < n; right++) {
73
            if (s.charAt(right) == '0') {
74
                zeros++;
75
            }
76
            while (zeros > k) {
77
                if (s.charAt(left) == '0') {
78
                    zeros--;
79
                }
80
                left++;
81
            }
82
            int currentOnes = (right - left + 1) - zeros;
83
            maxOnes = Math.max(maxOnes, currentOnes);
84
        }
85
        86
        return maxOnes;
87
    }
88
89
}",63,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054839
