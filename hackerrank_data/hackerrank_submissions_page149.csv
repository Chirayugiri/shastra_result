submission_id,username,problem_name,language,code,page,url
1390053188,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static List<Integer> findEarliestFaults(int[] arr, int k) {
10
        List<Integer> result = new ArrayList<>();
11
        Deque<Integer> dq = new LinkedList<>();
12
        13
        for (int i = 0; i < k; i++) {
14
            if (arr[i] < 0) {
15
                dq.addLast(i);
16
            }
17
        }
18
        19
        if (!dq.isEmpty()) {
20
            result.add(arr[dq.peekFirst()]);
21
        } else {
22
            result.add(0);
23
        }
24
        25
        for (int i = k; i < arr.length; i++) {
26
            if (!dq.isEmpty() && dq.peekFirst() <= i - k) {
27
                dq.pollFirst();
28
            }
29
            30
            if (arr[i] < 0) {
31
                dq.addLast(i);
32
            }
33
            34
            if (!dq.isEmpty()) {
35
                result.add(arr[dq.peekFirst()]);
36
            } else {
37
                result.add(0);
38
            }
39
        }
40
        41
        return result;
42
    }
43
44
    public static void main(String[] args) {
45
        Scanner sc = new Scanner(System.in);
46
        int t = sc.nextInt();  
47
        48
        while (t-- > 0) {
49
            int n = sc.nextInt(); 
50
            int k = sc.nextInt(); 
51
            int[] arr = new int[n];
52
            53
            for (int i = 0; i < n; i++) {
54
                arr[i] = sc.nextInt();
55
            }
56
            57
            List<Integer> result = findEarliestFaults(arr, k);
58
            for (int num : result) {
59
                System.out.print(num + "" "");
60
            }
61
            System.out.println();
62
        }
63
        sc.close();
64
    }
65
}",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053188
1390053191,unknown,unknown,unknown,"1
def min_cost_decommission(server_rack):
2
3
    n = len(server_rack)
4
5
    min_cost = float('inf')
6
7
    8
9
    # Iterate over all possible ways to decommission servers from the beginning and the end
10
11
    for i in range(n + 1):
12
13
        for j in range(n + 1):
14
15
            if i + j > n:
16
17
                continue
18
19
            remaining_rack = server_rack[i:n - j]
20
21
            idle_remaining = remaining_rack.count('0')
22
23
            active_decommissioned = server_rack[:i].count('1') + server_rack[n - j:].count('1')
24
25
            cost = max(idle_remaining, active_decommissioned)
26
27
            if cost < min_cost:
28
29
                min_cost = cost
30
31
    32
33
    return min_cost
34
35
def main():
36
37
    # Predefined input for test cases
38
39
    test_cases = [
40
41
        ""101110110"",
42
43
        ""1001001001001"",
44
45
        ""0000111111""
46
47
    ]
48
49
    50
51
    # Process each test case
52
53
    for server_rack in test_cases:
54
55
        print(min_cost_decommission(server_rack))
56
57
if __name__ == ""__main__"":
58
59
    main()
60
    ",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053191
1390053192,unknown,unknown,unknown,"1
def min_effort(arr, k):
2
    n = len(arr)
3
    # Option: Do not skip any firewall
4
    min_cost = sum(arr)
5
    6
    # Try skipping every contiguous block of k firewalls
7
    for i in range(n - k + 1):
8
        cost_before = sum(arr[:i])
9
        cost_after = sum(arr[i+k:]) + (n - (i+k))  # extra 1 for each firewall after skipped block
10
        cost = cost_before + cost_after
11
        min_cost = min(min_cost, cost)
12
    13
    return min_cost
14
15
# Input handling
16
t = int(input())
17
for _ in range(t):
18
    n, k = map(int, input().split())
19
    arr = list(map(int, input().split()))
20
    print(min_effort(arr, k))
21",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053192
1390053179,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void earliest_faulty_readings(int arr[], int n, int k) {
5
    int i;
6
    int front = 0, rear = 0;  // Deque implemented using an array
7
    int deque[n]; // Stores indices of negative numbers
8
9
    // Process the first window
10
    for (i = 0; i < k; i++) {
11
        if (arr[i] < 0)
12
            deque[rear++] = i;
13
    }
14
15
    // Process rest of the windows
16
    for (i = k; i <= n; i++) {
17
        // Print the first negative number in the current window
18
        if (front < rear)
19
            printf(""%d "", arr[deque[front]]);
20
        else
21
            printf(""0 "");
22
23
        // Remove elements not in this window
24
        while (front < rear && deque[front] < i - k + 1)
25
            front++;
26
27
        // Add the new element if negative
28
        if (i < n && arr[i] < 0)
29
            deque[rear++] = i;
30
    }
31
32
    printf(""\n"");
33
}
34
35
int main() {
36
    int t;
37
    scanf(""%d"", &t);
38
39
    while (t--) {
40
        int n, k;
41
        scanf(""%d %d"", &n, &k);
42
        int arr[n];
43
44
        for (int i = 0; i < n; i++)
45
            scanf(""%d"", &arr[i]);
46
47
        earliest_faulty_readings(arr, n, k);
48
    }
49
50
    return 0;
51
}
52",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053179
1390053182,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(len(arr)):
8
        # Remove elements out of the current window
9
        if dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
        12
        # Add current element if it is faulty
13
        if arr[i] < 0:
14
            dq.append(i)
15
        16
        # Add result when we have a full window
17
        if i >= k - 1:
18
            result.append(arr[dq[0]] if dq else 0)
19
    20
    return result
21
22
# Read input
23
t = int(input())
24
for _ in range(t):
25
    n, k = map(int, input().split())
26
    arr = list(map(int, input().split()))
27
    print(*earliest_faulty_readings(arr, k))
28",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053182
1390053185,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}
41",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053185
1390053175,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        min_cost_val = float('inf')
6
        7
        # Iterate over possible decommissioning points
8
        for left in range(n + 1):
9
            for right in range(n + 1):
10
                if left + right > n:
11
                    continue
12
                remaining = s[left:n - right]
13
                idle_remaining = remaining.count('0')
14
                active_removed = s[:left].count('1') + s[n - right:].count('1')
15
                current_cost = max(idle_remaining, active_removed)
16
                if current_cost < min_cost_val:
17
                    min_cost_val = current_cost
18
        19
        results.append(min_cost_val)
20
    return results
21
22
# Read input
23
T = int(input())
24
test_cases = [input().strip() for _ in range(T)]
25
26
# Compute results
27
results = min_cost(test_cases)
28
29
# Output results
30
for res in results:
31
    print(res)",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053175
1390053178,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053178
1390053174,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053174
1390053172,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(len(arr)):
8
        9
        while dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
        12
        if arr[i] < 0:
13
            dq.append(i)
14
        15
        if i >= k - 1:
16
            result.append(arr[dq[0]] if dq else 0)
17
    18
    return result
19
20
def main():
21
    t = int(input())
22
    for _ in range(t):
23
        n, k = map(int, input().split())
24
        arr = list(map(int, input().split()))
25
        print("" "".join(map(str, earliest_faulty_readings(arr, k))))
26
27
if __name__ == ""__main__"":
28
    main()",149,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053172
