submission_id,username,problem_name,language,code,page,url
1390053977,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053977
1390053983,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
    for _ in range(t):
8
        s = input_data[line].strip()
9
        line += 1
10
        n = len(s)
11
        # get indices for active servers ('1')
12
        positions = [i for i, ch in enumerate(s) if ch == '1']
13
        m = len(positions)
14
        if m == 0:
15
            out_lines.append(""0"")
16
            continue
17
        # Precompute A: A[i] = positions[i] - i
18
        A = [positions[i] - i for i in range(m)]
19
        20
        # check(X) returns True if there exists a window in A
21
        # such that:
22
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
23
        # and A[j] - A[i] <= X.
24
        def check(X):
25
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                # slide j as far as possible while A[j]-A[i] <= X
33
                while j < m and A[j] - A[i] <= X:
34
                    j += 1
35
                # j now is one past the last index satisfying condition, so the window has length (j - i)
36
                if j - i >= m - X:
37
                    return True
38
            return False
39
40
        # Binary search for the minimum X
41
        lo, hi, ans = 0, n, n
42
        while lo <= hi:
43
            mid = (lo + hi) // 2
44
            if check(mid):
45
                ans = mid
46
                hi = mid - 1
47
            else:
48
                lo = mid + 1
49
        out_lines.append(str(ans))
50
    51
    sys.stdout.write(""\n"".join(out_lines))
52
    53
if _name_ == '_main_':
54
    solve()",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053983
1390053984,unknown,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    s = input().strip()
4
    n = len(s)
5
6
    a = [0] * (n + 1)
7
    for i in range(n):
8
        a[i + 1] = a[i] + (1 if s[i] == ""1"" else 0)
9
10
    c = float(""inf"")
11
12
    for i in range(n + 1):
13
        b = a[i]
14
        l, r = 0, n - i
15
16
        while l <= r:
17
            j = (l + r) // 2
18
            x = n - i - j
19
            y = a[n] - a[i] - (a[n] - a[n - j])
20
            z = x - y
21
            d = b + (a[n] - a[n - j])
22
            e = max(z, d)
23
            c = min(c, e)
24
25
            if z > d:
26
                l = j + 1
27
            else:
28
                r = j - 1
29
30
    print(c)
31",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053984
1390053972,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        12
        13
        Scanner sc=new Scanner(System.in);
14
        15
        int t=sc.nextInt();
16
        17
        while(t-->0){
18
            int n=sc.nextInt();
19
            int k=sc.nextInt();
20
            21
            int arr[]=new int[n];
22
            23
            for(int i=0;i<n;i++){
24
                arr[i]=sc.nextInt();
25
            }
26
            27
            ArrayList<Integer> ans=new ArrayList<>();
28
            for(int i=0;i<=n-k;i++){
29
                30
                boolean flag=false;
31
                for(int j=i;j<i+k;j++){
32
                    if(arr[j]<0){
33
                        flag=true;
34
                        ans.add(arr[j]);
35
                        break;
36
                    }
37
                }
38
                if(flag==false){
39
                    ans.add(0);
40
                }
41
                42
            }
43
            44
            45
            int ans1[]=new int[ans.size()];
46
            int j=0;
47
            for(int i=0;i<ans.size();i++){
48
                ans1[j++]=ans.get(i);
49
            }
50
            51
            52
            for(int i=0;i<ans.size();i++){
53
                System.out.print(ans.get(i)+"" "");
54
            }
55
            System.out.println();
56
        }
57
    }
58
}",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053972
1390053975,unknown,unknown,unknown,"1
def minimum_decommission_cost(server_rack):
2
    n = len(server_rack)
3
    total_ones = server_rack.count('1')
4
    minimum_cost = float('inf')
5
    6
    prefix_ones = [0] * (n + 1)
7
    prefix_zeros = [0] * (n + 1)
8
    9
    for i in range(n):
10
        prefix_ones[i+1] = prefix_ones[i] + (1 if server_rack[i] == '1' else 0)
11
        prefix_zeros[i+1] = prefix_zeros[i] + (1 if server_rack[i] == '0' else 0)
12
    13
   14
    for left in range(n + 1):
15
        for right in range(left, n + 1):
16
            ones_in_substring = prefix_ones[right] - prefix_ones[left]
17
            zeros_in_substring = prefix_zeros[right] - prefix_zeros[left]
18
            ones_removed = total_ones - ones_in_substring
19
            cost = max(zeros_in_substring, ones_removed)
20
            if cost < minimum_cost:
21
                minimum_cost = cost
22
    23
    return minimum_cost
24
25
T = int(input())
26
for _ in range(T):
27
    server_rack = input().strip()
28
    print(minimum_decommission_cost(server_rack))",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053975
1390053971,unknown,unknown,unknown,"1
def min_effort(firewalls, k):
2
    n = len(firewalls)
3
    4
    if k >= n:
5
        return 0
6
    7
    # dp[i][j] represents min effort for firewalls[i:] with j skips used
8
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
9
    10
    # Base case: when we've processed all firewalls
11
    for j in range(k + 1):
12
        dp[n][j] = 0
13
    14
    # Fill DP table from right to left
15
    for i in range(n - 1, -1, -1):
16
        for j in range(k + 1):
17
            # Option 1: Skip this firewall (if skips remain)
18
            if j < k:
19
                dp[i][j] = dp[i + 1][j + 1]
20
            21
            # Option 2: Don't skip this firewall
22
            effort = firewalls[i] + j  # Current firewall + skips used before
23
            dp[i][j] = min(dp[i][j], effort + dp[i + 1][j])
24
    25
    return dp[0][0]
26
27
# Handle automatic input
28
t = int(input())
29
for _ in range(t):
30
    n, k = map(int, input().split())
31
    firewalls = list(map(int, input().split()))
32
    result = min_effort(firewalls, k)
33
    print(result)",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053971
1390053968,unknown,unknown,unknown,"1
def minimize_effort(n, k, a):
2
    if k == n:  # If we can skip all firewalls, the total effort is 0.
3
        return 0
4
5
    total_effort = sum(a)  # Initial total effort without skipping
6
    min_effort = total_effort  # Start with the worst case
7
8
    # Try skipping each subset of `k` firewalls and find the minimum effort
9
    for i in range(n):
10
        if i + k > n:  # If skipping `k` firewalls goes out of bounds, stop.
11
            break
12
13
        # Calculate new effort after skipping a[i:i+k]
14
        effort = sum(a[:i]) + sum(a[i + k:])  # Remove the skipped firewalls
15
16
        # Apply penalty for skipping `k` firewalls
17
        penalty = sum(range(1, k + 1))
18
        effort += penalty
19
20
        # Track the minimum effort found
21
        min_effort = min(min_effort, effort)
22
23
    return min_effort
24
25
26
# Driver code to handle multiple test cases
27
T = int(input().strip())
28
for _ in range(T):
29
    n, k = map(int, input().split())
30
    a = list(map(int, input().split()))
31
32
    result = minimize_effort(n, k, a)
33
    print(result)
34",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053968
1390053969,unknown,unknown,unknown,"1
def solve():
2
3
    s = input()
4
5
    n = len(s)
6
7
    min_cost = float('inf')
8
9
    for i in range(n + 1):
10
11
        for j in range(n - i + 1):
12
13
            remaining = s[i:n - j]
14
15
            idle_count = remaining.count('0')
16
17
            active_removed = s[:i].count('1') + s[n - j:].count('1')
18
19
            min_cost = min(min_cost, max(idle_count, active_removed))
20
21
    print(min_cost)
22
23
t = int(input())
24
25
for _ in range(t):
26
27
    solve()",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053969
1390053970,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); 
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            for (char c : s.toCharArray()) {
17
                if (c == '1') {
18
                    currentConsecutiveOnes++;
19
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
20
                    totalOnes++;
21
                } else {
22
                    currentConsecutiveOnes = 0;
23
                }
24
            }
25
            26
            if (totalOnes == 0) {
27
                System.out.println(0);
28
                continue;
29
            }
30
            if (maxConsecutiveOnes == totalOnes) {
31
                System.out.println(0);
32
                continue;
33
            }
34
            35
            int totalZeros = n - totalOnes;
36
            int low = 0;
37
            int high = Math.max(totalOnes, totalZeros);
38
            int answer = high;
39
            40
            while (low <= high) {
41
                int mid = (low + high) / 2;
42
                int requiredOnes = Math.max(0, totalOnes - mid);
43
                44
                if (requiredOnes == 0) {
45
                    answer = mid;
46
                    high = mid - 1;
47
                    continue;
48
                }
49
                50
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
51
                if (maxOnes >= requiredOnes) {
52
                    answer = mid;
53
                    high = mid - 1;
54
                } else {
55
                    low = mid + 1;
56
                }
57
            }
58
            59
            System.out.println(answer);
60
        }
61
        sc.close();
62
    }
63
    64
    private static int maxOnesWithAtMostKZeros(String s, int k) {
65
        int left = 0;
66
        int zeros = 0;
67
        int maxOnes = 0;
68
        int n = s.length();
69
        70
        for (int right = 0; right < n; right++) {
71
            if (s.charAt(right) == '0') {
72
                zeros++;
73
            }
74
            while (zeros > k) {
75
                if (s.charAt(left) == '0') {
76
                    zeros--;
77
                }
78
                left++;
79
            }
80
            int currentOnes = (right - left + 1) - zeros;
81
            maxOnes = Math.max(maxOnes, currentOnes);
82
        }
83
        84
        return maxOnes;
85
    }
86
}",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053970
1390053966,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",107,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053966
