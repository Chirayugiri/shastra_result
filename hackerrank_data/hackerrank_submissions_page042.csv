submission_id,username,problem_name,language,code,page,url
1390055278,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055278
1390055280,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055280
1390055286,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
    for _ in range(t):
8
        s = input_data[line].strip()
9
        line += 1
10
        n = len(s)
11
        # get indices for active servers ('1')
12
        positions = [i for i, ch in enumerate(s) if ch == '1']
13
        m = len(positions)
14
        if m == 0:
15
            out_lines.append(""0"")
16
            continue
17
        # Precompute A: A[i] = positions[i] - i
18
        A = [positions[i] - i for i in range(m)]
19
        20
        # check(X) returns True if there exists a window in A
21
        # such that:
22
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
23
        # and A[j] - A[i] <= X.
24
        def check(X):
25
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                # slide j as far as possible while A[j]-A[i] <= X
33
                while j < m and A[j] - A[i] <= X:
34
                    j += 1
35
                # j now is one past the last index satisfying condition, so the window has length (j - i)
36
                if j - i >= m - X:
37
                    return True
38
            return False
39
40
        # Binary search for the minimum X
41
        lo, hi, ans = 0, n, n
42
        while lo <= hi:
43
            mid = (lo + hi) // 2
44
            if check(mid):
45
                ans = mid
46
                hi = mid - 1
47
            else:
48
                lo = mid + 1
49
        out_lines.append(str(ans))
50
    51
    sys.stdout.write(""\n"".join(out_lines))
52
    53
if __name__ == ""__main__"":
54
    solve()",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055286
1390055262,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055262
1390055265,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
    left = 0
3
    zeros = 0
4
    max_ones = 0
5
    n = len(s)
6
    7
    for right in range(n):
8
        if s[right] == '0':
9
            zeros += 1
10
        11
        while zeros > k:
12
            if s[left] == '0':
13
                zeros -= 1
14
            left += 1
15
        16
        current_ones = (right - left + 1) - zeros
17
        max_ones = max(max_ones, current_ones)
18
    19
    return max_ones
20
21
def min_server_pruning_cost(s):
22
    n = len(s)
23
    total_ones = s.count('1')
24
    25
    if total_ones == 0:
26
        return 0
27
    28
    total_zeros = n - total_ones
29
    low, high = 0, max(total_ones, total_zeros)
30
    answer = high
31
32
    while low <= high:
33
        mid = (low + high) // 2
34
        required_ones = max(0, total_ones - mid)
35
        if required_ones == 0:
36
            answer = mid
37
            high = mid - 1
38
            continue
39
40
        max_ones = max_ones_with_at_most_k_zeros(s, mid)
41
        if max_ones >= required_ones:
42
            answer = mid
43
            high = mid - 1
44
        else:
45
            low = mid + 1
46
47
    return answer
48
49
T = int(input().strip())
50
for _ in range(T):
51
    s = input().strip()
52
    print(min_server_pruning_cost(s))",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055265
1390055269,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055269
1390055258,unknown,unknown,unknown,"1
def minimum_decommission_cost(servers):
2
    n = len(servers)
3
    4
    # Convert the string to a list of integers (0 or 1)
5
    server_list = [int(c) for c in servers]
6
7
    # Compute prefix sum of active servers (1s)
8
    prefix_sum = [0] * (n + 1)
9
    for i in range(n):
10
        prefix_sum[i + 1] = prefix_sum[i] + server_list[i]
11
12
    total_ones = prefix_sum[n]  # Total active servers
13
    min_cost = total_ones  # Worst case: decommission all active servers
14
15
    j = 0  # Right boundary of the window
16
    for i in range(n + 1):
17
        # Move j to maintain segment_zeros >= total_ones_removed
18
        while j <= n and (j - i) - (prefix_sum[j] - prefix_sum[i]) <= (prefix_sum[i] + (total_ones - prefix_sum[j])):
19
            j += 1
20
        21
        # Calculate cost at the current window
22
        segment_zeros = (j - i - 1) - (prefix_sum[j - 1] - prefix_sum[i])
23
        left_ones = prefix_sum[i]
24
        right_ones = total_ones - prefix_sum[j - 1]
25
        cost = max(segment_zeros, left_ones + right_ones)
26
        27
        min_cost = min(min_cost, cost)
28
29
    return min_cost
30
31
def process_input():
32
    import sys
33
    input = sys.stdin.read
34
    data = input().split()
35
    36
    t = int(data[0])
37
    results = []
38
    39
    for i in range(1, t + 1):
40
        results.append(str(minimum_decommission_cost(data[i])))
41
    42
    print(""\n"".join(results))
43
44
# Correcting the name definition
45
if __name__ == ""__main__"":
46
    process_input()
47",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055258
1390055259,unknown,unknown,unknown,"1
import sys
2
3
def min_effort_to_breach(n, k, strengths):
4
    impacts = []
5
6
    for i in range(n):
7
        impact = strengths[i] - (n - i - 1)
8
        impacts.append((impact, i))
9
10
    impacts.sort(reverse=True)
11
12
    to_skip = set(impacts[i][1] for i in range(k))
13
14
    total_effort = 0
15
    penalty = 0
16
17
    for i in range(n):
18
        if i in to_skip:
19
            penalty += 1
20
        else:
21
            total_effort += strengths[i] + penalty
22
23
    return total_effort
24
25
def solve_test_cases():
26
    t = int(sys.stdin.readline().strip())  # Efficient input handling
27
    results = []
28
29
    for _ in range(t):
30
        n, k = map(int, sys.stdin.readline().strip().split())
31
        strengths = list(map(int, sys.stdin.readline().strip().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
34
    return results
35
36
def main():
37
    results = solve_test_cases()
38
    for result in results:
39
        print(result)
40
41
if __name__ == ""__main__"":
42
    main()
43",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055259
1390055260,unknown,unknown,unknown,"1
def min_decommission_cost(server_rack):
2
    n = len(server_rack)
3
4
    # Find the first and last occurrence of '1'
5
    first_one = server_rack.find('1')
6
    last_one = server_rack.rfind('1')
7
8
    # If there are no active servers, the cost is 0
9
    if first_one == -1:
10
        return 0
11
12
    # Core segment that must remain
13
    core_segment = server_rack[first_one:last_one + 1]
14
    15
    # Count idle servers in core segment
16
    remaining_idle = core_segment.count('0')
17
18
    # Try different trims from both ends
19
    min_cost = remaining_idle  # Start with keeping all '1's
20
21
    for trim_start in range(first_one + 1):  # Remove '1's from start
22
        for trim_end in range(n - last_one):  # Remove '1's from end
23
            decommissioned_active = trim_start + trim_end
24
            cost = max(remaining_idle, decommissioned_active)
25
            min_cost = min(min_cost, cost)
26
27
    return min_cost
28
29
# Read input
30
t = int(input().strip())  # Number of test cases
31
for _ in range(t):
32
    server_rack = input().strip()  # Read binary string
33
    print(min_decommission_cost(server_rack))
34",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055260
1390055256,unknown,unknown,unknown,"1
def find_earliest_fault(test_cases):
2
    result = []
3
    for n, k, arr in test_cases:
4
        batch_result = []
5
        for i in range(n - k + 1):
6
            batch = arr[i:i+k]
7
            fault = next((x for x in batch if x < 0), 0)
8
            batch_result.append(fault)
9
        result.append(batch_result)
10
    return result
11
12
t = int(input())  
13
test_cases = []
14
for _ in range(t):
15
    n, k = map(int, input().split()) 
16
    arr = list(map(int, input().split())) 
17
    test_cases.append((n, k, arr))
18
19
results = find_earliest_fault(test_cases)
20
for res in results:
21
    print("" "".join(map(str, res)))
22",42,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055256
