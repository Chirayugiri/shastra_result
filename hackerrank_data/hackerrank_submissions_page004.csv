submission_id,username,problem_name,language,code,page,url
1390056889,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    4
    for n, k, arr in test_cases:
5
        result = []
6
        dq = deque()
7
        8
        # Process first window
9
        for i in range(k):
10
            if arr[i] < 0:
11
                dq.append(i)
12
        13
        # Store the first result
14
        result.append(arr[dq[0]] if dq else 0)
15
        16
        # Process remaining windows
17
        for i in range(k, n):
18
            # Remove elements no longer in window
19
            if dq and dq[0] <= i - k:
20
                dq.popleft()
21
            22
            # Add new element if it's faulty
23
            if arr[i] < 0:
24
                dq.append(i)
25
            26
            # Store result for current window
27
            result.append(arr[dq[0]] if dq else 0)
28
        29
        results.append("" "".join(map(str, result)))
30
    31
    return results
32",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390056889
1390056939,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        result = []
8
        dq = deque()
9
        10
        # Process first window
11
        for i in range(k):
12
            if arr[i] < 0:
13
                dq.append(i)
14
        15
        # Store the first result
16
        result.append(arr[dq[0]] if dq else 0)
17
        18
        # Process remaining windows
19
        for i in range(k, n):
20
            # Remove elements no longer in window
21
            if dq and dq[0] <= i - k:
22
                dq.popleft()
23
            24
            # Add new element if it's faulty
25
            if arr[i] < 0:
26
                dq.append(i)
27
            28
            # Store result for current window
29
            result.append(arr[dq[0]] if dq else 0)
30
        31
        results.append("" "".join(map(str, result)))
32
    33
    return results
34
35
# Read input
36
t = int(input())
37
test_cases = []
38
for _ in range(t):
39
    n, k = map(int, input().split())
40
    arr = list(map(int, input().split()))
41
    test_cases.append((n, k, arr))
42
43
# Compute and print output
44
for res in earliest_faulty_readings(test_cases):
45
    print(res)",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390056939
1390056935,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056935
1390056661,unknown,unknown,unknown,"1
2
3
import java.util.*;
4
import java.io.*;
5
6
public class FirewallSkips {
7
    public static void main(String[] args) {
8
        FastReader in = new FastReader(System.in);
9
        int T = in.nextInt();
10
        11
        while (T-- > 0) {
12
            int n = in.nextInt();
13
            int k = in.nextInt();
14
            15
            long[] a = new long[n];
16
            long sumA = 0; // sum of all a[i]
17
            for (int i = 0; i < n; i++) {
18
                a[i] = in.nextLong();
19
                sumA += a[i];
20
            }
21
            22
            // Build array b[i] = a[i] + (i+1)  [using 1-based index for j]
23
            // We'll sort b in descending order to pick the top x.
24
            long[] b = new long[n];
25
            for (int i = 0; i < n; i++) {
26
                b[i] = a[i] + (i + 1);
27
            }
28
            29
            Arrays.sort(b);
30
            // Sort ascending by default; we want descending, so either:
31
            // 1) reverse in place, or
32
            // 2) build prefix sums from the end.
33
            // Let's just reverse in place for clarity.
34
            reverse(b); // Now b is descending.
35
            36
            // Build prefix sums of b in descending order:
37
            // p[x] = sum of top x elements in b (b[0] + b[1] + ... + b[x-1])
38
            long[] prefix = new long[n+1];
39
            prefix[0] = 0;
40
            for (int x = 1; x <= n; x++) {
41
                prefix[x] = prefix[x-1] + b[x-1];
42
            }
43
            44
            long ans = Long.MAX_VALUE;
45
            // Try x from 0..k (number of skips)
46
            for (int x = 0; x <= k; x++) {
47
                // cost(x) = sumA + x*n - prefix[x] - x*(x-1)/2
48
                // Make sure to use long to avoid overflow
49
                long cost = sumA 
50
                            + x * (long)n 
51
                            - prefix[x]
52
                            - ((long)x * (x - 1) / 2);
53
                ans = Math.min(ans, cost);
54
            }
55
            56
            System.out.println(ans);
57
        }
58
    }
59
    60
    // Utility to reverse array in place
61
    private static void reverse(long[] arr) {
62
        int left = 0, right = arr.length - 1;
63
        while (left < right) {
64
            long tmp = arr[left];
65
            arr[left] = arr[right];
66
            arr[right] = tmp;
67
            left++;
68
            right--;
69
        }
70
    }
71
    72
    // Fast input class (optional, for large I/O)
73
    static class FastReader {
74
        BufferedReader br;
75
        StringTokenizer st;
76
        77
        public FastReader(InputStream stream) {
78
            br = new BufferedReader(new InputStreamReader(stream));
79
        }
80
        81
        String next() {
82
            while (st == null || !st.hasMoreElements()) {
83
                try {
84
                    st = new StringTokenizer(br.readLine());
85
                } catch (IOException e) {
86
                    e.printStackTrace();
87
                }
88
            }
89
            return st.nextToken();
90
        }
91
        92
        int nextInt() {
93
            return Integer.parseInt(next());
94
        }
95
        96
        long nextLong() {
97
            return Long.parseLong(next());
98
        }
99
    }
100
}",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056661
1390056851,unknown,unknown,unknown,"1
def earliest_faulty_in_batches(arr, n, k):
2
    result = []
3
    4
    # Traverse the array in batches of size k
5
    for i in range(n - k + 1):
6
        batch = arr[i:i + k]
7
        found_fault = False
8
        9
        # Find the first negative number in the batch
10
        for num in batch:
11
            if num < 0:
12
                result.append(num)
13
                found_fault = True
14
                break
15
        16
        # If no negative number is found, append 0
17
        if not found_fault:
18
            result.append(0)
19
    20
    return result
21
22
# Reading input
23
t = int(input().strip())
24
outputs = []
25
26
for _ in range(t):
27
    n, k = map(int, input().strip().split())
28
    arr = list(map(int, input().strip().split()))
29
    outputs.append(earliest_faulty_in_batches(arr, n, k))
30
31
# Print results
32
for output in outputs:
33
    print("" "".join(map(str, output)))",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390056851
1390056460,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])  # Number of test cases
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())  # Number of firewalls and skips allowed
13
        strengths = list(map(int, data[index + 1].split()))  # Firewall strengths
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if __name__ == ""__main__"":
45
    main()",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056460
1390056535,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])  # Number of test cases
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split()) ",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056535
1390056633,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    # Try all possible combinations of skipping up to k firewalls
3
    # and find the minimum effort
4
    5
    # Initialize with maximum possible effort
6
    min_effort = float('inf')
7
    8
    # Helper function to calculate effort when skipping specific firewalls
9
    def calculate_effort(skip_mask):
10
        effort = 0
11
        skipped = 0
12
        13
        for i in range(n):
14
            # Check if current firewall is skipped
15
            if (skip_mask >> i) & 1:
16
                skipped += 1
17
            else:
18
                # Add effort for this firewall (including penalty from skipped firewalls)
19
                effort += firewalls[i] + skipped
20
        21
        return effort
22
    23
    # Try all possible combinations of skipping firewalls
24
    # For small n, we can use a brute force approach with bitmasks
25
    for mask in range(1 << n):
26
        # Count bits to ensure we skip at most k firewalls
27
        if bin(mask).count('1') <= k:
28
            effort = calculate_effort(mask)
29
            min_effort = min(min_effort, effort)
30
    31
    return min_effort
32
33
# Test with the provided examples
34
test_cases = [
35
    {""n"": 4, ""k"": 1, ""firewalls"": [5, 10, 11, 5], ""expected"": 21},
36
    {""n"": 4, ""k"": 4, ""firewalls"": [8, 7, 1, 4], ""expected"": 0}
37
]
38
39
for i, test in enumerate(test_cases):
40
    result = min_effort_to_breach(test[""n""], test[""k""], test[""firewalls""])
41
    print(f""Test {i+1}: Result = {result}, Expected = {test['expected']}"")
42
43
# Final solution for submission
44
print(""\nFinal solution:"")
45
print(""""""
46
def min_effort_to_breach(n, k, firewalls):
47
    # Try all possible combinations of skipping up to k firewalls
48
    # and find the minimum effort
49
    50
    # Initialize with maximum possible effort
51
    min_effort = float('inf')
52
    53
    # Helper function to calculate effort when skipping specific firewalls
54
    def calculate_effort(skip_mask):
55
        effort = 0
56
        skipped = 0
57
        58
        for i in range(n):
59
            # Check if current firewall is skipped
60
            if (skip_mask >> i) & 1:
61
                skipped += 1
62
            else:
63
                # Add effort for this firewall (including penalty from skipped firewalls)
64
                effort += firewalls[i] + skipped
65
        66
        return effort
67
    68
    # Try all possible combinations of skipping firewalls
69
    # For small n, we can use a brute force approach with bitmasks
70
    for mask in range(1 << n):
71
        # Count bits to ensure we skip at most k firewalls
72
        if bin(mask).count('1') <= k:
73
            effort = calculate_effort(mask)
74
            min_effort = min(min_effort, effort)
75
    76
    return min_effort
77
78
# Read input
79
T = int(input())
80
for _ in range(T):
81
    n, k = map(int, input().split())
82
    firewalls = list(map(int, input().split()))
83
    print(min_effort_to_breach(n, k, firewalls))
84
"""""")",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056633
1390056446,unknown,unknown,unknown,"1
def min_cost(s):
2
    total_ones = s.count('1')
3
    n = len(s)
4
    5
    scenario_empty = total_ones  # Cost when removing all '1's
6
    7
    # Scenario 1: Window lengths 1 to min(total_ones, n)
8
    scenario1_cost = float('inf')
9
    if total_ones == 0:
10
        scenario1_cost = 0  # If all are '0's, best is to remove all
11
    else:
12
        max_ones = 0
13
        L = min(total_ones, n)
14
        current_ones = sum(1 for c in s[:L] if c == '1')  # Initial window count
15
        16
        max_ones = current_ones  # First window
17
        for i in range(1, n - L + 1):
18
            current_ones -= (s[i-1] == '1')
19
            current_ones += (s[i + L - 1] == '1')
20
            max_ones = max(max_ones, current_ones)  # Keep track of max found
21
        22
        scenario1_cost = total_ones - max_ones  # Cost of transforming scenario 1
23
    24
    # Scenario 2: Window lengths > total_ones
25
    scenario2_cost = float('inf')
26
    if n > total_ones:
27
        min_zeros = float('inf')
28
        current_zeros = sum(1 for c in s[:total_ones + 1] if c == '0')  # Initial window count
29
        30
        min_zeros = current_zeros  # First window
31
        for i in range(1, n - (total_ones + 1) + 1):
32
            current_zeros -= (s[i-1] == '0')
33
            current_zeros += (s[i + total_ones] == '0')
34
            min_zeros = min(min_zeros, current_zeros)  # Keep track of min found
35
        36
        scenario2_cost = min_zeros  # Cost of transforming scenario 2
37
    38
    # Choose the best (minimum cost) option
39
    candidates = [scenario1_cost, scenario_empty]
40
    if n > total_ones:
41
        candidates.append(scenario2_cost)
42
    43
    return min(candidates)
44
45
# Read number of test cases
46
T = int(input())
47
for _ in range(T):
48
    s = input().strip()
49
    print(min_cost(s))
50",4,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056446
