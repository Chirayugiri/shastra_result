submission_id,username,problem_name,language,code,page,url
1390055032,unknown,unknown,unknown,"1
def min_effort(firewalls, k):
2
3
    n = len(firewalls)
4
5
    6
7
    if k >= n:
8
9
        return 0
10
11
    12
13
    # dp[i][j] represents min effort for firewalls[i:] with j skips used
14
15
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
16
17
    18
19
    # Base case: when we've processed all firewalls
20
21
    for j in range(k + 1):
22
23
        dp[n][j] = 0
24
25
    26
27
    # Fill DP table from right to left
28
29
    for i in range(n - 1, -1, -1):
30
31
        for j in range(k + 1):
32
33
            # Option 1: Skip this firewall (if skips remain)
34
35
            if j < k:
36
37
                dp[i][j] = dp[i + 1][j + 1]
38
39
            40
41
            # Option 2: Don't skip this firewall
42
43
            effort = firewalls[i] + j  # Current firewall + skips used before
44
45
            dp[i][j] = min(dp[i][j], effort + dp[i + 1][j])
46
47
    48
49
    return dp[0][0]
50
51
# Handle automatic input
52
53
t = int(input())
54
55
for _ in range(t):
56
57
    n, k = map(int, input().split())
58
59
    firewalls = list(map(int, input().split()))
60
61
    result = min_effort(firewalls, k)
62
63
    print(result)",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055032
1390055038,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
    8
    # Process first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Process the remaining windows
14
    for i in range(n - k + 1):
15
        # Append earliest fault in the current window
16
        if dq:
17
            result.append(arr[dq[0]])
18
        else:
19
            result.append(0)
20
        21
        # Remove elements that are out of the window
22
        if dq and dq[0] == i:
23
            dq.popleft()
24
        25
        # Add next element (if negative)
26
        if i + k < n and arr[i + k] < 0:
27
            dq.append(i + k)
28
    29
    return result
30
31
# Read input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())
35
    arr = list(map(int, input().split()))
36
    print(*earliest_faults(arr, k))",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055038
1390055034,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
import sys
3
4
def main():
5
    T = int(sys.stdin.readline().strip())
6
    for _ in range(T):
7
        n, k = map(int, sys.stdin.readline().split())
8
        a = list(map(int, sys.stdin.readline().split()))
9
        10
        sum_a = sum(a)
11
        values = [a[i] - (n - i - 1) for i in range(n)]
12
        values.sort(reverse=True)
13
        prefix_sum = [0] * (n + 1)
14
        for i in range(1, n + 1):
15
            prefix_sum[i] = prefix_sum[i - 1] + values[i - 1]
16
        max_m = min(k, n)
17
        max_total = float('-inf')
18
        for m in range(max_m + 1):
19
            current = prefix_sum[m] + (m * (m - 1)) // 2
20
            max_total = max(max_total, current)
21
        min_effort = sum_a - max_total
22
        print(min_effort)
23
24
if __name__ == ""__main__"":
25
    main()",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055034
1390055027,unknown,unknown,unknown,"1
print(21)
2
print(0)",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055027
1390055028,unknown,unknown,unknown,"1
def solve():
2
    T = int(input())
3
    for _ in range(T):
4
        n, k = map(int, input().split())
5
        a = list(map(int, input().split()))
6
        7
        min_effort = float('inf')
8
        9
        for i in range(1 << n):
10
            skipped = []
11
            remaining = []
12
            count = 0
13
            14
            for j in range(n):
15
                if (i >> j) & 1:
16
                    skipped.append(j)
17
                    count += 1
18
                else:
19
                    remaining.append(j)
20
            21
            if count <= k:
22
                effort = 0
23
                skipped_count = 0
24
                25
                for j in range(n):
26
                    if j in skipped:
27
                        skipped_count += 1
28
                    else:
29
                        effort += a[j] + skipped_count
30
                31
                min_effort = min(min_effort, effort)
32
        33
        print(min_effort)
34
        35
solve()
36",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055028
1390055026,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
10
        while (T-- > 0) {
11
            String s = sc.nextLine().trim();
12
            int n = s.length();
13
            int totalOnes = 0;
14
            int maxConsecutiveOnes = 0;
15
            int currentConsecutiveOnes = 0;
16
17
            // Calculate totalOnes and maxConsecutiveOnes
18
            for (char c : s.toCharArray()) {
19
                if (c == '1') {
20
                    currentConsecutiveOnes++;
21
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
22
                    totalOnes++;
23
                } else {
24
                    currentConsecutiveOnes = 0;
25
                }
26
            }
27
28
            // Handle cases where the cost is trivially 0
29
            if (totalOnes == 0 || maxConsecutiveOnes == totalOnes) {
30
                System.out.println(0);
31
                continue;
32
            }
33
34
            int totalZeros = n - totalOnes;
35
            int low = 0;
36
            int high = Math.max(totalOnes, totalZeros);
37
            int answer = high;
38
39
            // Binary search for the minimal possible cost
40
            while (low <= high) {
41
                int mid = (low + high) / 2;
42
                int requiredOnes = Math.max(0, totalOnes - mid);
43
44
                if (requiredOnes == 0) {
45
                    answer = mid;
46
                    high = mid - 1;
47
                    continue;
48
                }
49
50
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
51
                if (maxOnes >= requiredOnes) {
52
                    answer = mid;
53
                    high = mid - 1;
54
                } else {
55
                    low = mid + 1;
56
                }
57
            }
58
59
            System.out.println(answer);
60
        }
61
        sc.close();
62
    }
63
64
    // Helper function to calculate maximum ones in any window with at most k zeros
65
    private static int maxOnesWithAtMostKZeros(String s, int k) {
66
        int left = 0;
67
        int zeros = 0;
68
        int maxOnes = 0;
69
        int n = s.length();
70
71
        for (int right = 0; right < n; right++) {
72
            if (s.charAt(right) == '0') {
73
                zeros++;
74
            }
75
            // Shrink the window if zeros exceed k
76
            while (zeros > k) {
77
                if (s.charAt(left) == '0') {
78
                    zeros--;
79
                }
80
                left++;
81
            }
82
            // Calculate current number of ones in the window
83
            int currentOnes = (right - left + 1) - zeros;
84
            maxOnes = Math.max(maxOnes, currentOnes);
85
        }
86
87
        return maxOnes;
88
    }
89
}
90",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055026
1390055023,unknown,unknown,unknown,"1
def find_faulty_readings(test_cases):
2
    for case in test_cases:
3
        n, k = case[0], case[1]
4
        readings = case[2]
5
        result = []
6
        7
        for i in range(n - k + 1):
8
            batch = readings[i:i+k]
9
            fault = next((x for x in batch if x < 0), 0)  # Find the first negative number or 0 if no faults
10
            result.append(fault)
11
        12
        # Print the result for each test case in the format requested
13
        print("" "".join(map(str, result)))
14
15
def main():
16
    t = int(raw_input())  # Number of test cases
17
    test_cases = []
18
    19
    for _ in range(t):
20
        n, k = map(int, raw_input().split())  # Size of array and batch size
21
        arr = map(int, raw_input().split())   # Array of sensor readings
22
        test_cases.append((n, k, arr))
23
    24
    find_faulty_readings(test_cases)
25
26
if __name__ == ""__main__"":
27
    main()
28",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055023
1390055021,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
    left = 0
3
    zeros = 0
4
    max_ones = 0
5
    n = len(s)
6
7
    for right in range(n):
8
        if s[right] == '0':
9
            zeros += 1
10
11
        while zeros > k:
12
            if s[left] == '0':
13
                zeros -= 1
14
            left += 1
15
16
        current_ones = (right - left + 1) - zeros
17
        max_ones = max(max_ones, current_ones)
18
19
    return max_ones
20
21
22
def minimize_cost(t, test_cases):
23
    results = []
24
25
    for s in test_cases:
26
        n = len(s)
27
        total_ones = s.count('1')
28
29
        if total_ones == 0 or total_ones == n:
30
            results.append(0)
31
            continue
32
33
        total_zeros = n - total_ones
34
        low, high = 0, max(total_ones, total_zeros)
35
        answer = high
36
37
        while low <= high:
38
            mid = (low + high) // 2
39
            required_ones = max(0, total_ones - mid)
40
41
            if required_ones == 0:
42
                answer = mid
43
                high = mid - 1
44
                continue
45
46
            max_ones = max_ones_with_at_most_k_zeros(s, mid)
47
48
            if max_ones >= required_ones:
49
                answer = mid
50
                high = mid - 1
51
            else:
52
                low = mid + 1
53
54
        results.append(answer)
55
56
    return results
57
58
59
if __name__ == ""__main__"":
60
    t = int(input())
61
    test_cases = [input().strip() for _ in range(t)]
62
63
    results = minimize_cost(t, test_cases)
64
65
    for res in results:
66
        print(res)",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055021
1390055025,unknown,unknown,unknown,"1
def min_cost_to_decommission(rack):
2
    length = len(rack)
3
    min_cost = float('inf')
4
    5
    for prefix in range(length + 1):
6
        for suffix in range(length + 1 - prefix):
7
            remaining = rack[prefix:length - suffix]
8
            9
            if not remaining:
10
                continue
11
            12
            idle_count = remaining.count('0')
13
            active_removed = rack[:prefix].count('1') + rack[length - suffix:].count('1')
14
            15
            cost = max(idle_count, active_removed)
16
            min_cost = min(min_cost, cost)
17
    18
    return min_cost
19
20
def process_cases():
21
    test_cases = int(input().strip())
22
    results = []
23
    24
    for _ in range(test_cases):
25
        rack = input().strip()
26
        results.append(str(min_cost_to_decommission(rack)))
27
    28
    print(""\n"".join(results))
29
30
process_cases()",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055025
1390055019,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T;
7
    8
    while (T-- > 0) {
9
        int n, k;
10
        cin >> n >> k;
11
        12
        vector<int> a(n);
13
        long long sum_a = 0;
14
        15
        for (int i = 0; i < n; i++) {
16
            cin >> a[i];
17
            sum_a += a[i];
18
        }
19
        20
        vector<long long> values;
21
        for (int i = 0; i < n; i++) {
22
            long long val = a[i] - (n - i - 1LL);
23
            values.push_back(val);
24
        }
25
        26
        sort(values.begin(), values.end(), greater<long long>());
27
        28
        vector<long long> prefixSum(n + 1, 0);
29
        for (int i = 1; i <= n; i++) {
30
            prefixSum[i] = prefixSum[i - 1] + values[i - 1];
31
        }
32
        33
        int max_m = min(k, n);
34
        long long maxTotal = LLONG_MIN;
35
        36
        for (int m = 0; m <= max_m; m++) {
37
            long long current = prefixSum[m] + (m *1LL* (m - 1)) / 2;
38
            if (current > maxTotal) {
39
                maxTotal = current;
40
            }
41
        }
42
        43
        long long minEffort = sum_a - maxTotal;
44
        cout << minEffort << endl;
45
    }
46
    47
    return 0;
48
}",53,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055019
