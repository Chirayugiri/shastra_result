submission_id,username,problem_name,language,code,page,url
1390055929,unknown,unknown,unknown,"1
def minimum_decommission_cost(servers):
2
    n = len(servers)
3
    server_list = [int(c) for c in servers]
4
5
    prefix_sum = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_sum[i + 1] = prefix_sum[i] + server_list[i]
8
9
    total_ones = prefix_sum[n]
10
    min_cost = total_ones
11
12
    j = 0
13
    for i in range(n + 1):
14
        while j <= n and (j - i) - (prefix_sum[j] - prefix_sum[i]) <= (prefix_sum[i] + (total_ones - prefix_sum[j])):
15
            j += 1
16
        17
        segment_zeros = (j - i - 1) - (prefix_sum[j - 1] - prefix_sum[i])
18
        left_ones = prefix_sum[i]
19
        right_ones = total_ones - prefix_sum[j - 1]
20
        cost = max(segment_zeros, left_ones + right_ones)
21
        22
        min_cost = min(min_cost, cost)
23
24
    return min_cost
25
26
def process_input():
27
    import sys
28
    input = sys.stdin.read
29
    data = input().split()
30
    31
    t = int(data[0])
32
    results = []
33
    34
    for i in range(1, t + 1):
35
        results.append(str(minimum_decommission_cost(data[i])))
36
    37
    print(""\n"".join(results))
38
39
if __name__ == ""__main__"":
40
    process_input()",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055929
1390055933,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    4
    if k == 0:
5
        return total_effort  
6
7
    firewalls.sort()  
8
    min_skipped = sum(firewalls[:k])  
9
10
    return total_effort - min_skipped  
11
12
t = int(input())
13
for _ in range(t):
14
    n, k = map(int, input().split())
15
    firewalls = list(map(int, input().split()))
16
    print(min_effort(n, k, firewalls))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055933
1390055934,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
#include <climits>
5
6
using namespace std;
7
8
vector<int> min_decommissioning_cost(const vector<string>& test_cases) {
9
    vector<int> results;
10
    11
    for (const string& servers : test_cases) {
12
        int n = servers.size();
13
        int total_0 = 0;
14
        for (char c : servers) {
15
            if (c == '0') total_0++;
16
        }
17
        18
        19
        // Precompute prefix counts for 0s and 1s
20
        vector<int> prefix_0(n + 1, 0), prefix_1(n + 1, 0);
21
        for (int i = 1; i <= n; ++i) {
22
            prefix_0[i] = prefix_0[i-1] + (servers[i-1] == '0');
23
            prefix_1[i] = prefix_1[i-1] + (servers[i-1] == '1');
24
        }
25
        26
        // Precompute suffix counts for 0s and 1s
27
        vector<int> suffix_0(n + 1, 0), suffix_1(n + 1, 0);
28
        for (int j = 1; j <= n; ++j) {
29
            suffix_0[j] = suffix_0[j-1] + (servers[n - j] == '0');
30
            suffix_1[j] = suffix_1[j-1] + (servers[n - j] == '1');
31
        }
32
        33
        int min_cost = INT_MAX;
34
        35
        // Iterate over all possible prefixes (i)
36
        for (int i = 0; i <= n; ++i) {
37
            int j_max = n - i;
38
            int left = 0, right = j_max;
39
            int best_j = 0;
40
            int best_cost = INT_MAX;
41
            42
            // Binary search for the best j
43
            while (left <= right) {
44
                int mid = (left + right) / 2;
45
                int remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid]);
46
                int decommissioned_1 = prefix_1[i] + suffix_1[mid];
47
                int current_cost = max(remaining_0, decommissioned_1);
48
                49
                if (current_cost < best_cost) {
50
                    best_cost = current_cost;
51
                    best_j = mid;
52
                } else if (current_cost == best_cost && mid < best_j) {
53
                    best_j = mid;
54
                }
55
                56
                if (decommissioned_1 < remaining_0) {
57
                    left = mid + 1;
58
                } else {
59
                    right = mid - 1;
60
                }
61
            }
62
            63
            // Check neighboring j values
64
            for (int dj : {-1, 0, 1}) {
65
                int j = best_j + dj;
66
                if (j >= 0 && j <= j_max) {
67
                    int remaining_0 = total_0 - (prefix_0[i] + suffix_0[j]);
68
                    int decommissioned_1 = prefix_1[i] + suffix_1[j];
69
                    int current_cost = max(remaining_0, decommissioned_1);
70
                    if (current_cost < best_cost) {
71
                        best_cost = current_cost;
72
                    }
73
                }
74
            }
75
            76
            if (best_cost < min_cost) {
77
                min_cost = best_cost;
78
            }
79
        }
80
        81
        results.push_back(min_cost);
82
    }
83
    84
    return results;
85
}
86
87
int main() {
88
    int T;
89
    cin >> T;
90
    vector<string> test_cases(T);
91
    for (int i = 0; i < T; ++i) {
92
        cin >> test_cases[i];
93
    }
94
    95
    vector<int> results = min_decommissioning_cost(test_cases);
96
    97
    for (int result : results) {
98
        cout << result << endl;
99
    }
100
    101
    return 0;
102
} ",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055934
1390055926,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
# Input Handling
60
if __name__ == ""__main__"":
61
    T = int(input())
62
    test_cases = [input().strip() for _ in range(T)]
63
    results = min_decommissioning_cost(test_cases)
64
    for result in results:
65
        print(result)",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055926
1390055927,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_effort = float('inf')
6
7
    for i in range(1 << n):
8
        if bin(i).count('1') <= k:
9
            current_effort = 0
10
            current_a = a[:]
11
            for j in range(n):
12
                if (i >> j) & 1:
13
                    pass
14
                else:
15
                    current_effort += current_a[j]
16
                for l in range(j + 1, n):
17
                    if (i >> j) & 1:
18
                        current_a[l] += 1
19
            min_effort = min(min_effort, current_effort)
20
21
    return min_effort
22
23
t = int(input())
24
for _ in range(t):
25
    print(solve())",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055927
1390055921,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process the first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store the result for the first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process the remaining windows
17
    for i in range(k, n):
18
        # Remove elements that are out of the current window
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add the current element if it is negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Store the result for the current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Size of array and batch size
35
    arr = list(map(int, input().split()))  # Array elements
36
    37
    # Get the results and print as space-separated values
38
    print(*earliest_faulty_readings(arr, k))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055921
1390055916,unknown,unknown,unknown,"1
def earliest_faults(arr, k):
2
    result = []
3
    first_fault = 0  # Default if no faults in batch
4
5
    for i in range(len(arr) - k + 1):  # Iterate through batches
6
        batch = arr[i:i + k]
7
        first_fault = 0  # Reset for each batch
8
        9
        for num in batch:  # Find first faulty reading
10
            if num < 0:
11
                first_fault = num
12
                break
13
        14
        result.append(first_fault)
15
16
    return result
17
18
19
# Reading input
20
t = int(input())  # Number of test cases
21
for _ in range(t):
22
    n, k = map(int, input().split())  # Size of array and batch size
23
    arr = list(map(int, input().split()))  # Sensor readings
24
    25
    # Get the result and print it
26
    print(*earliest_faults(arr, k))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055916
1390055917,unknown,unknown,unknown,"1
def f(s):
2
    n = len(s)
3
    ans = n  
4
5
    for i in range(n + 1):
6
        r = s[i:] 
7
        z = r.count('0')
8
        o = s[:i].count('1')  
9
        c = max(z, o)  
10
        if c < ans:
11
            ans = c  
12
    return ans  
13
14
for _ in range(int(input())):
15
    print(f(input().strip()))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055917
1390055920,unknown,unknown,unknown,"1
def min_decommissioning_cost(s):
2
    # Find the first and last occurrence of '1'
3
    first_one = s.find('1')
4
    last_one = s.rfind('1')
5
6
    # If no '1' exists, all servers are idle and can be removed
7
    if first_one == -1:
8
        return 0
9
10
    # Get the substring containing all important servers
11
    core_section = s[first_one:last_one + 1]
12
13
    # Count idle servers (0s) remaining in the core section
14
    remaining_zeros = core_section.count('0')
15
16
    # Count removed active servers (1s)
17
    removed_ones = first_one + (len(s) - 1 - last_one)
18
19
    # Return the minimum possible cost
20
    return max(remaining_zeros, removed_ones)
21
22
# Read number of test cases
23
T = int(input().strip())
24
25
# Process each test case
26
for _ in range(T):
27
    s = input().strip()
28
    print(min_decommissioning_cost(s))",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055920
1390055915,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        int T = scanner.nextInt();
8
        scanner.nextLine(); // Consume newline
9
        10
        for (int t = 0; t < T; t++) {
11
            String s = scanner.nextLine();
12
            int n = s.length();
13
            14
            int[] prefixOnes = new int[n + 1];
15
            int[] prefixZeros = new int[n + 1];
16
            17
            // Calculate prefix sums
18
            for (int i = 0; i < n; i++) {
19
                prefixOnes[i + 1] = prefixOnes[i] + (s.charAt(i) == '1' ? 1 : 0);
20
                prefixZeros[i + 1] = prefixZeros[i] + (s.charAt(i) == '0' ? 1 : 0);
21
            }
22
            23
            int totalOnes = prefixOnes[n];
24
            int minCost = Integer.MAX_VALUE;
25
            26
            // Try all possible combinations of prefix and suffix removals
27
            for (int i = 0; i <= n; i++) {  // i = length of prefix to remove
28
                for (int j = i; j <= n; j++) {  // j = position to start removing suffix
29
                    // Removed prefix: [0...i-1]
30
                    // Kept substring: [i...j-1]
31
                    // Removed suffix: [j...n-1]
32
                    33
                    int removedPrefixOnes = prefixOnes[i];
34
                    int removedSuffixOnes = prefixOnes[n] - prefixOnes[j];
35
                    int totalRemovedOnes = removedPrefixOnes + removedSuffixOnes;
36
                    37
                    int keptZeros = prefixZeros[j] - prefixZeros[i];
38
                    39
                    int cost = Math.max(keptZeros, totalRemovedOnes);
40
                    minCost = Math.min(minCost, cost);
41
                }
42
            }
43
            44
            System.out.println(minCost);
45
        }
46
        47
        scanner.close();
48
    }
49
}",15,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055915
