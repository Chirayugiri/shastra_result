submission_id,username,problem_name,language,code,page,url
1390055831,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
9
        for (int testCase = 0; testCase < t; testCase++) {
10
            int n = scanner.nextInt();
11
            int k = scanner.nextInt();
12
13
            int[] strengths = new int[n];
14
            for (int i = 0; i < n; i++) {
15
                strengths[i] = scanner.nextInt();
16
            }
17
18
            System.out.println(minimumEffort(strengths, k));
19
        }
20
21
        scanner.close();
22
    }
23
24
    public static long minimumEffort(int[] strengths, int k) {
25
        int n = strengths.length;
26
27
        if (k >= n) {
28
            return 0;
29
        }
30
31
        long[] dp = new long[k + 1];
32
        Arrays.fill(dp, Long.MAX_VALUE / 2);
33
        dp[0] = 0;
34
35
        for (int i = 0; i < n; i++) {
36
            long[] newDp = new long[k + 1];
37
            Arrays.fill(newDp, Long.MAX_VALUE / 2);
38
39
            for (int j = 0; j <= k; j++) {
40
                if (j == 0) {
41
                    newDp[0] = dp[0] + strengths[i];
42
                } else {
43
                    newDp[j] = dp[j] + strengths[i] + j;
44
                }
45
46
                if (j > 0) {
47
                    newDp[j] = Math.min(newDp[j], dp[j - 1]);
48
                }
49
            }
50
51
            dp = newDp;
52
        }
53
54
        long minEffort = dp[0];
55
        for (int j = 1; j <= k; j++) {
56
            minEffort = Math.min(minEffort, dp[j]);
57
        }
58
59
        return minEffort;
60
    }
61
}
62",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055831
1390055835,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
    left = 0
3
    zeros = 0
4
    max_ones = 0
5
    n = len(s)
6
    7
    for right in range(n):
8
        if s[right] == '0':
9
            zeros += 1
10
        while zeros > k:
11
            if s[left] == '0':
12
                zeros -= 1
13
            left += 1
14
        current_ones = (right - left + 1) - zeros
15
        max_ones = max(max_ones, current_ones)
16
    17
    return max_ones
18
19
def min_flips_to_make_ones_consecutive(s):
20
    n = len(s)
21
    total_ones = s.count('1')
22
    23
    if total_ones == 0 or '1' * total_ones in s:
24
        return 0
25
    26
    total_zeros = n - total_ones
27
    max_consecutive_ones = max(map(len, s.split('0')))
28
    29
    low, high = 0, max(total_ones, total_zeros)
30
    answer = high
31
32
    while low <= high:
33
        mid = (low + high) // 2
34
        required_ones = max(0, total_ones - mid)
35
36
        if required_ones == 0:
37
            answer = mid
38
            high = mid - 1
39
            continue
40
        41
        max_ones = max_ones_with_at_most_k_zeros(s, mid)
42
        if max_ones >= required_ones:
43
            answer = mid
44
            high = mid - 1
45
        else:
46
            low = mid + 1
47
    48
    return answer
49
50
T = int(input().strip())
51
for _ in range(T):
52
    s = input().strip()
53
    print(min_flips_to_make_ones_consecutive(s))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055835
1390055837,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_fault_in_batches(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    for i in range(len(arr) - k + 1):
12
        if dq:
13
            result.append(arr[dq[0]])
14
        else:
15
            result.append(0)
16
        17
        while dq and dq[0] < i + 1:
18
            dq.popleft()
19
        20
        if i + k < len(arr) and arr[i + k] < 0:
21
            dq.append(i + k)
22
    23
    return result
24
25
# Read input
26
t = int(input())
27
for _ in range(t):
28
    n, k = map(int, input().split())
29
    arr = list(map(int, input().split()))
30
    print(*earliest_fault_in_batches(arr, k))",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055837
1390055827,unknown,unknown,unknown,"1
t = int(input())
2
3
while t:
4
    n, k = map(int, input().split())
5
    arr = list(map(int, input().split()))
6
7
    dp = [float('inf')] * (k + 1)
8
    dp[0] = 0
9
10
    for i in range(n):
11
        next_dp = [float('inf')] * (k + 1)
12
13
        for j in range(k + 1):
14
            next_dp[j] = min(next_dp[j], dp[j] + arr[i] + j)
15
            if j < k:
16
                next_dp[j + 1] = min(next_dp[j + 1], dp[j])
17
18
        dp = next_dp
19
20
    result = min(dp)
21
    print(result)
22
    t-=1
23
24",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055827
1390055830,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):
8
        if bin(i).count('1') > k:
9
            continue
10
        11
        current_effort = 0
12
        current_a = a[:] 
13
        14
        for j in range(n):
15
            if (i >> j) & 1:
16
                pass  
17
            else:
18
                current_effort += current_a[j]
19
            20
            for l in range(j + 1, n):
21
                if (i >> j) & 1:
22
                    current_a[l] += 1
23
        24
        min_effort = min(min_effort, current_effort)
25
    26
    return min_effort
27
28
t = int(input())
29
for _ in range(t):
30
    print(solve())",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055830
1390055828,unknown,unknown,unknown,"1
for _ in range(int(input())):
2
    x,y = map(int,input().split())
3
    arr = list(map(int,input().split()))
4
    effort = 0
5
6
    effort = sum(sorted(arr)[:x-y]) + x - y
7
    print(effort)",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055828
1390055819,unknown,unknown,unknown,"1
def minimum_decommission_cost(servers):
2
    n = len(servers)
3
    4
    # Convert the string to a list of integers (0 or 1)
5
    server_list = [int(c) for c in servers]
6
7
    # Compute prefix sum of active servers (1s)
8
    prefix_sum = [0] * (n + 1)
9
    for i in range(n):
10
        prefix_sum[i + 1] = prefix_sum[i] + server_list[i]
11
12
    total_ones = prefix_sum[n]  # Total active servers
13
    min_cost = total_ones  # Worst case: decommission all active servers
14
15
    j = 0  # Right boundary of the window
16
    for i in range(n + 1):
17
        # Move j to maintain segment_zeros >= total_ones_removed
18
        while j <= n and (j - i) - (prefix_sum[j] - prefix_sum[i]) <= (prefix_sum[i] + (total_ones - prefix_sum[j])):
19
            j += 1
20
        21
        # Calculate cost at current window
22
        segment_zeros = (j - i - 1) - (prefix_sum[j - 1] - prefix_sum[i])
23
        left_ones = prefix_sum[i]
24
        right_ones = total_ones - prefix_sum[j - 1]
25
        cost = max(segment_zeros, left_ones + right_ones)
26
        27
        min_cost = min(min_cost, cost)
28
29
    return min_cost
30
31
def process_input():
32
    import sys
33
    input = sys.stdin.read
34
    data = input().split()
35
    36
    t = int(data[0])
37
    results = []
38
    39
    for i in range(1, t + 1):
40
        results.append(str(minimum_decommission_cost(data[i])))
41
    42
    print(""\n"".join(results))
43
44
if __name__ == ""__main__"":
45
    process_input()
46",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055819
1390055820,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    static boolean check(int val, int[] idxArray, int count) {
7
        8
        if (val >= count) return true;
9
        int right = 0;
10
        for (int left = 0; left < count; left++) {
11
            12
            if (right < left) right = left;
13
            14
            while (right < count && (idxArray[right] - idxArray[left] - (right - left)) <= val) {
15
                right++;
16
            }
17
            int length = right - left; 
18
            if (length >= count - val) return true;
19
        }
20
        return false;
21
    }
22
    23
    public static void main(String[] args) {
24
        Scanner scanner = new Scanner(System.in);
25
        int testCases = scanner.nextInt();
26
        27
        while(testCases-- > 0) {
28
            String input = scanner.next();
29
            int size = input.length();
30
            31
            ArrayList<Integer> positions = new ArrayList<>();
32
            for (int i = 0; i < size; i++) {
33
                if (input.charAt(i) == '1') {
34
                    positions.add(i);
35
                }
36
            }
37
            int count = positions.size();
38
            39
            if (count == 0) {
40
                System.out.println(0);
41
                continue;
42
            }
43
            44
            int[] idxArray = new int[count];
45
            for (int i = 0; i < count; i++) {
46
                idxArray[i] = positions.get(i);
47
            }
48
            49
            int left = 0, right = count, result = right;
50
            while (left <= right) {
51
                int mid = left + (right - left) / 2;
52
                if (check(mid, idxArray, count)) {
53
                    result = mid;
54
                    right = mid - 1;
55
                } else {
56
                    left = mid + 1;
57
                }
58
            }
59
            System.out.println(result);
60
        }
61
        scanner.close();
62
    }
63
}
64",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055820
1390055824,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055824
1390055818,unknown,unknown,unknown,"1
import sys
2
def calculate_min_removal_cost():
3
    input_data = sys.stdin.read().splitlines()
4
    test_cases = int(input_data[0].strip())
5
    current_line = 1
6
    results = []
7
    8
    for _ in range(test_cases):
9
        server_status = input_data[current_line].strip()
10
        current_line += 1
11
        total_servers = len(server_status)
12
        13
        active_indices = [i for i, server in enumerate(server_status) if server == '1']
14
        active_server_count = len(active_indices)
15
        16
        if active_server_count == 0:
17
            results.append(""0"")
18
            continue
19
        20
        adjusted_positions = [active_indices[i] - i for i in range(active_server_count)]
21
        22
        def is_removal_feasible(limit):
23
            if active_server_count - limit <= 0:
24
                return True
25
            j = 0
26
            for i in range(active_server_count):
27
                if j < i:
28
                    j = i
29
                while j < active_server_count and adjusted_positions[j] - adjusted_positions[i] <= limit:
30
                    j += 1
31
                if j - i >= active_server_count - limit:
32
                    return True
33
            return False
34
        35
        low, high, min_removal_cost = 0, total_servers, total_servers
36
        while low <= high:
37
            mid = (low + high) // 2
38
            if is_removal_feasible(mid):
39
                min_removal_cost = mid
40
                high = mid - 1
41
            else:
42
                low = mid + 1
43
        44
        results.append(str(min_removal_cost))
45
    46
    sys.stdout.write(""\n"".join(results))
47
    48
if __name__ == ""__main__"":
49
    calculate_min_removal_cost()
50",19,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055818
