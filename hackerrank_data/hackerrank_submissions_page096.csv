submission_id,username,problem_name,language,code,page,url
1390054170,unknown,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    s = input().strip()
4
    n = len(s)
5
    a = [0] * (n + 1)
6
7
    for i in range(n):
8
        a[i + 1] = a[i] + (s[i] == ""1"")
9
10
    c = float(""inf"")
11
12
    for i in range(n + 1):
13
        b = a[i]
14
        for j in range(n + 1 - i):
15
            d = a[n] - a[n - j]
16
            e = max((n - i - j) - (a[n] - b - d), b + d)
17
            c = min(c, e)
18
19
    print(c)
20",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054170
1390054168,unknown,unknown,unknown,"1
def breach_effort(num_walls, max_skips, wall_strengths):
2
    dp = [[float('inf')] * (max_skips + 1) for _ in range(num_walls + 1)]
3
    4
    for skips in range(max_skips + 1):
5
        dp[0][skips] = 0
6
    7
    for wall in range(1, num_walls + 1):
8
        for skips in range(max_skips + 1):
9
            if skips > 0:
10
                dp[wall][skips] = dp[wall-1][skips-1]
11
            12
            strength = wall_strengths[wall-1] + skips
13
            dp[wall][skips] = min(dp[wall][skips], dp[wall-1][skips] + strength)
14
    15
    return min(dp[num_walls])
16
17
def process_cases():
18
    test_cases = int(input())
19
    results = []
20
    21
    for _ in range(test_cases):
22
        num_walls, max_skips = map(int, input().split())
23
        wall_strengths = list(map(int, input().split()))
24
        results.append(breach_effort(num_walls, max_skips, wall_strengths))
25
    26
    print(""\n"".join(map(str, results)))
27
28
process_cases()",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054168
1390054171,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054171
1390054165,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while(T--) {
12
        int n, k;
13
        cin >> n >> k;
14
        vector<long long> a(n);
15
        long long total = 0;
16
        for (int i = 0; i < n; i++) {
17
            cin >> a[i];
18
            total += a[i];
19
        }
20
        21
        // Build vector v[i] = a[i] + i + 1
22
        vector<long long> v(n);
23
        for (int i = 0; i < n; i++) {
24
            v[i] = a[i] + i + 1;
25
        }
26
        27
        // Sort v in descending order
28
        sort(v.begin(), v.end(), greater<long long>());
29
        30
        // Precompute prefix sums of v (for the best s indices to skip)
31
        vector<long long> prefix(n+1, 0);
32
        for (int i = 0; i < n; i++) {
33
            prefix[i+1] = prefix[i] + v[i];
34
        }
35
        36
        long long ans = total; // s=0: no skip
37
        // Try s=1 to k (s = number of skipped firewalls)
38
        for (int s = 1; s <= k; s++) {
39
            // Cost = total + s*n - (s*(s-1))/2 - (sum of top s values)
40
            long long cost = total + (long long)s * n - ((long long)s * (s - 1)) / 2 - prefix[s];
41
            ans = min(ans, cost);
42
        }
43
        cout << ans << endl;
44
    }
45
    return 0;
46
}
47",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054165
1390054166,unknown,unknown,unknown,"1
def min_server_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for s in test_cases:
5
        # Find the first and last occurrence of '1'
6
        first_one = s.find('1')
7
        last_one = s.rfind('1')
8
        9
        # If there are no active servers, cost is 0
10
        if first_one == -1:
11
            results.append(0)
12
            continue
13
        14
        # Trim the string from first '1' to last '1'
15
        trimmed = s[first_one:last_one + 1]
16
        17
        # Count remaining '0's in the trimmed string
18
        idle_servers_remaining = trimmed.count('0')
19
        20
        # Count removed '1's (total '1's - '1's in the trimmed portion)
21
        active_servers_removed = s.count('1') - trimmed.count('1')
22
        23
        # The final cost is the maximum of both values
24
        results.append(max(idle_servers_remaining, active_servers_removed))
25
    26
    # Print all results for each test case
27
    print(""\n"".join(map(str, results)))
28
29
# Read input
30
T = int(input().strip())
31
test_cases = [input().strip() for _ in range(T)]
32
33
# Run function
34
min_server_decommissioning_cost(test_cases)
35",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054166
1390054167,unknown,unknown,unknown,"1
def min_effort(n, k, strengths):
2
    total_effort = sum(strengths)
3
    4
    if k == n:
5
        return 0
6
    7
    min_effort = total_effort
8
    9
    for i in range(n):
10
        skipped = 0
11
        new_effort = 0
12
        13
        for j in range(n):
14
            if j == i and skipped < k:
15
                skipped += 1
16
                continue
17
            new_effort += strengths[j] + skipped
18
        19
        min_effort = min(min_effort, new_effort)
20
    21
    return min_effort
22
23
T = int(input())
24
for _ in range(T):
25
    n, k = map(int, input().split())
26
    strengths = list(map(int, input().split()))
27
    print(min_effort(n, k, strengths))",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054167
1390054163,unknown,unknown,unknown,"1
def min_effort(n, k, strengths):
2
    min_effort = float('inf')
3
4
    for skip_mask in range(1 << n):
5
        if bin(skip_mask).count('1') != k:
6
            continue
7
        8
        effort = 0
9
        increased_strengths = strengths[:]
10
        for i in range(n):
11
            if skip_mask & (1 << i):
12
                for j in range(i + 1, n):
13
                    increased_strengths[j] += 1
14
            else:
15
                effort += increased_strengths[i]
16
        17
        min_effort = min(min_effort, effort)
18
19
    return min_effort
20
21
t = int(input().strip())
22
23
for _ in range(t):
24
    n, k = map(int, input().split())
25
26
    strengths = list(map(int, input().split()))
27
28
    print(min_effort(n, k, strengths))
29",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054163
1390054156,unknown,unknown,unknown,"1
# Read number of test cases
2
t = int(input().strip())
3
4
for _ in range(t):
5
    # Read server string
6
    servers = input().strip()
7
    n = len(servers)
8
    9
    # Precompute prefix sums
10
    prefix_active = [0] * (n + 1)
11
    prefix_idle = [0] * (n + 1)
12
    13
    for i in range(n):
14
        prefix_active[i + 1] = prefix_active[i] + (1 if servers[i] == '1' else 0)
15
        prefix_idle[i + 1] = prefix_idle[i] + (1 if servers[i] == '0' else 0)
16
    17
    total_active = prefix_active[n]
18
    total_idle = prefix_idle[n]
19
    20
    min_cost = float('inf')
21
    22
    # Key insight: For each left position, there exists at most one optimal right position
23
    for left in range(n + 1):
24
        active_removed_left = prefix_active[left]
25
        26
        # For each left boundary, the right boundary should be as far right as possible
27
        # while keeping the idle_remaining below or equal to active_removed_total
28
        right = n
29
        while right >= left:
30
            active_removed_right = total_active - prefix_active[right]
31
            active_removed_total = active_removed_left + active_removed_right
32
            idle_remaining = prefix_idle[right] - prefix_idle[left]
33
            34
            # Check if this is a better solution
35
            cost = max(idle_remaining, active_removed_total)
36
            min_cost = min(min_cost, cost)
37
            38
            # If removing more from right would reduce cost, try next position
39
            if idle_remaining > active_removed_total:
40
                right -= 1
41
            else:
42
                # We've found the optimal right boundary for this left boundary
43
                break
44
    45
    print(min_cost)",96,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054156
