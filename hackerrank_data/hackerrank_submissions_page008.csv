submission_id,username,problem_name,language,code,page,url
1390056115,unknown,unknown,unknown,"1
def min_cost(s):
2
    total_ones = s.count('1')
3
    n = len(s)
4
    5
    scenario_empty = total_ones  # Cost when removing all '1's
6
    7
    # Scenario 1: Window lengths 1 to min(total_ones, n)
8
    scenario1_cost = float('inf')
9
    if total_ones == 0:
10
        scenario1_cost = 0  # If all are '0's, best is to remove all
11
    else:
12
        max_ones = 0
13
        L = min(total_ones, n)
14
        current_ones = sum(1 for c in s[:L] if c == '1')  # Initial window count
15
        16
        max_ones = current_ones  # First window
17
        for i in range(1, n - L + 1):
18
            current_ones -= (s[i-1] == '1')
19
            current_ones += (s[i + L - 1] == '1')
20
            max_ones = max(max_ones, current_ones)  # Keep track of max found
21
        22
        scenario1_cost = total_ones - max_ones  # Cost of transforming scenario 1
23
    24
    # Scenario 2: Window lengths > total_ones
25
    scenario2_cost = float('inf')
26
    if n > total_ones:
27
        min_zeros = float('inf')
28
        current_zeros = sum(1 for c in s[:total_ones + 1] if c == '0')  # Initial window count
29
        30
        min_zeros = current_zeros  # First window
31
        for i in range(1, n - (total_ones + 1) + 1):
32
            current_zeros -= (s[i-1] == '0')
33
            current_zeros += (s[i + total_ones] == '0')
34
            min_zeros = min(min_zeros, current_zeros)  # Keep track of min found
35
        36
        scenario2_cost = min_zeros  # Cost of transforming scenario 2
37
    38
    # Choose the best (minimum cost) option
39
    candidates = [scenario1_cost, scenario_empty]
40
    if n > total_ones:
41
        candidates.append(scenario2_cost)
42
    43
    return min(candidates)
44
45
# Read number of test cases
46
T = int(input())
47
for _ in range(T):
48
    s = input().strip()
49
    print(min_cost(s))
50",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056115
1390056118,unknown,unknown,unknown,"1
2
t = int(input())
3
for _ in range(t):
4
    s = input()
5
    n = len(s)
6
    min_cost = float('inf')
7
8
    for i in range(n + 1):
9
        for j in range(i, n + 1):
10
            sub = s[i:j]
11
12
            if not sub:
13
                remaining_zeros = 0
14
                removed_ones = s.count('1')
15
16
            else:
17
                remaining_zeros = sub.count('0')
18
                removed_ones = s.count('1') - sub.count('1')
19
20
            cost = max(remaining_zeros, removed_ones)
21
            min_cost = min(min_cost, cost)
22
23
    print(min_cost)
24
25",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056118
1390056120,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056120
1390056101,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
    results = []
10
    11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Compute impact: (strength + index, index)
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Get top k elements based on impact
24
        impact.sort(reverse=True)
25
        to_skip = {idx for _, idx in impact[:k]}  # Convert to set for quick lookup
26
        27
        # Compute minimum effort
28
        effort, skipped = 0, 0
29
        for i in range(n):
30
            if i in to_skip:
31
                skipped += 1
32
            else:
33
                effort += strengths[i] + skipped
34
        35
        results.append(str(effort))
36
    37
    # Fast output
38
    sys.stdout.write(""\n"".join(results) + ""\n"")
39
40
if __name__ == ""__main__"":
41
    main()
42",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056101
1390056103,unknown,unknown,unknown,"1
import sys
2
def solve():
3
    x = sys.stdin.buffer.read().split()
4
    if not x: return
5
    t = int(x[0])
6
    i = 1
7
    o = []
8
    for _ in range(t):
9
        s = x[i].decode()
10
        i += 1
11
        n = len(s)
12
        A = [0]*(n+1)
13
        B = [0]*(n+1)
14
        for j in range(n):
15
            B[j+1] = B[j] + (s[j]=='1')
16
            A[j+1] = A[j] + (s[j]=='0')
17
        T = A[n]
18
        C = [0]*(n+1)
19
        E = [0]*(n+1)
20
        for j in range(n):
21
            E[j+1] = E[j] + (s[n-1-j]=='1')
22
            C[j+1] = C[j] + (s[n-1-j]=='0')
23
        r = 10**9
24
        for x_ in range(n+1):
25
            m = n - x_
26
            y = T - A[x_] - B[x_]
27
            if y < 0: y = 0
28
            if y > m: y = m
29
            for z in (y, y-1, y+1):
30
                if z < 0 or z > m: continue
31
                v1 = B[x_] + E[z]
32
                v2 = T - (A[x_] + C[z])
33
                v = v1 if v1 >= v2 else v2
34
                if v < r: r = v
35
        o.append(str(r))
36
    sys.stdout.write(""\n"".join(o))
37
if __name__==""__main__"":
38
    solve()
39
40
41",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056103
1390056111,unknown,unknown,unknown,"1
import java.util.*;
2
import java.io.*;
3
4
public class FirewallSkips {
5
    public static void main(String[] args) {
6
        FastReader in = new FastReader(System.in);
7
        int T = in.nextInt();
8
        9
        while (T-- > 0) {
10
            int n = in.nextInt();
11
            int k = in.nextInt();
12
            13
            long[] a = new long[n];
14
            long sumA = 0; // sum of all a[i]
15
            for (int i = 0; i < n; i++) {
16
                a[i] = in.nextLong();
17
                sumA += a[i];
18
            }
19
            20
            // Build array b[i] = a[i] + (i+1)  [using 1-based index for j]
21
            // We'll sort b in descending order to pick the top x.
22
            long[] b = new long[n];
23
            for (int i = 0; i < n; i++) {
24
                b[i] = a[i] + (i + 1);
25
            }
26
            27
            Arrays.sort(b);
28
            // Sort ascending by default; we want descending, so either:
29
            // 1) reverse in place, or
30
            // 2) build prefix sums from the end.
31
            // Let's just reverse in place for clarity.
32
            reverse(b); // Now b is descending.
33
            34
            // Build prefix sums of b in descending order:
35
            // p[x] = sum of top x elements in b (b[0] + b[1] + ... + b[x-1])
36
            long[] prefix = new long[n+1];
37
            prefix[0] = 0;
38
            for (int x = 1; x <= n; x++) {
39
                prefix[x] = prefix[x-1] + b[x-1];
40
            }
41
            42
            long ans = Long.MAX_VALUE;
43
            // Try x from 0..k (number of skips)
44
            for (int x = 0; x <= k; x++) {
45
                // cost(x) = sumA + x*n - prefix[x] - x*(x-1)/2
46
                // Make sure to use long to avoid overflow
47
                long cost = sumA 
48
                            + x * (long)n 
49
                            - prefix[x]
50
                            - ((long)x * (x - 1) / 2);
51
                ans = Math.min(ans, cost);
52
            }
53
            54
            System.out.println(ans);
55
        }
56
    }
57
    58
    // Utility to reverse array in place
59
    private static void reverse(long[] arr) {
60
        int left = 0, right = arr.length - 1;
61
        while (left < right) {
62
            long tmp = arr[left];
63
            arr[left] = arr[right];
64
            arr[right] = tmp;
65
            left++;
66
            right--;
67
        }
68
    }
69
    70
    // Fast input class (optional, for large I/O)
71
    static class FastReader {
72
        BufferedReader br;
73
        StringTokenizer st;
74
        75
        public FastReader(InputStream stream) {
76
            br = new BufferedReader(new InputStreamReader(stream));
77
        }
78
        79
        String next() {
80
            while (st == null || !st.hasMoreElements()) {
81
                try {
82
                    st = new StringTokenizer(br.readLine());
83
                } catch (IOException e) {
84
                    e.printStackTrace();
85
                }
86
            }
87
            return st.nextToken();
88
        }
89
        90
        int nextInt() {
91
            return Integer.parseInt(next());
92
        }
93
        94
        long nextLong() {
95
            return Long.parseLong(next());
96
        }
97
    }
98
}",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056111
1390056095,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056095
1390056098,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390056098
1390056094,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056094
1390056090,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class BreachFirewall {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        int T = Integer.parseInt(br.readLine()); // Number of test cases
8
        StringBuilder result = new StringBuilder();
9
10
        while (T-- > 0) {
11
            StringTokenizer st = new StringTokenizer(br.readLine());
12
            int n = Integer.parseInt(st.nextToken());
13
            int k = Integer.parseInt(st.nextToken());
14
15
            int[] firewalls = new int[n];
16
            st = new StringTokenizer(br.readLine());
17
            int totalEffort = 0;
18
19
            for (int i = 0; i < n; i++) {
20
                firewalls[i] = Integer.parseInt(st.nextToken());
21
                totalEffort += firewalls[i]; // Calculate total sum
22
            }
23
24
            List<Integer> modifiedValues = new ArrayList<>();
25
            for (int i = 0; i < n; i++) {
26
                modifiedValues.add(firewalls[i] - (n - i - 1)); // Transform array
27
            }
28
29
            // Sort in descending order
30
            modifiedValues.sort(Collections.reverseOrder());
31
32
            // Prefix sum calculation with boundary checks
33
            int[] prefixSum = new int[n + 1];
34
            for (int i = 0; i < n; i++) {
35
                prefixSum[i + 1] = prefixSum[i] + modifiedValues.get(i);
36
            }
37
38
            // Finding the maximum sum with `t` firewall skips
39
            int maxSum = 0;
40
            int maxT = Math.min(k, n);
41
42
            for (int t = 0; t <= maxT; t++) {
43
                int current = prefixSum[t] + (t * (t - 1)) / 2;
44
                maxSum = Math.max(maxSum, current);
45
            }
46
47
            // Output the minimized firewall breach effort
48
            result.append(totalEffort - maxSum).append(""\n"");
49
        }
50
51
        System.out.print(result);
52
    }
53
}
54",8,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056090
