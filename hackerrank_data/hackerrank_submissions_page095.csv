submission_id,username,problem_name,language,code,page,url
1390054185,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultySensor {
4
    public static List<Integer> earliestFaults(int[] arr, int k) {
5
        List<Integer> result = new ArrayList<>();
6
        Deque<Integer> deque = new LinkedList<>();
7
8
        for (int i = 0; i < arr.length; i++) {
9
            10
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
11
                deque.poll();
12
            }
13
14
            15
            if (arr[i] < 0) {
16
                deque.offer(i);
17
            }
18
19
            20
            if (i >= k - 1) {
21
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
22
            }
23
        }
24
        return result;
25
    }
26
27
    public static void main(String[] args) {
28
        Scanner scanner = new Scanner(System.in);
29
        int t = scanner.nextInt(); 
30
31
        while (t-- > 0) {
32
            int n = scanner.nextInt(); 
33
            int k = scanner.nextInt(); 
34
            int[] arr = new int[n];
35
36
            for (int i = 0; i < n; i++) {
37
                arr[i] = scanner.nextInt();
38
            }
39
40
            41
            List<Integer> faults = earliestFaults(arr, k);
42
            for (int val : faults) {
43
                System.out.print(val + "" "");
44
            }
45
            System.out.println();
46
        }
47
        scanner.close();
48
    }
49
}",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054185
1390054186,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054186
1390054190,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, n, k):
4
    result = []
5
    q = deque()  
6
    7
8
    for i in range(k):
9
        if arr[i] < 0:
10
            q.append(i)
11
    12
13
    if q:
14
        result.append(arr[q[0]])
15
    else:
16
        result.append(0)
17
    18
19
    for i in range(k, n):
20
    21
        while q and q[0] <= i - k:
22
            q.popleft()
23
        24
        25
        if arr[i] < 0:
26
            q.append(i)
27
        28
        29
        if q:
30
            result.append(arr[q[0]])
31
        else:
32
            result.append(0)
33
    34
    return result
35
36
t = int(input())
37
for _ in range(t):
38
    n, k = map(int, input().split())
39
    arr = list(map(int, input().split()))
40
    ans = earliest_faulty_readings(arr, n, k)
41
    print(*ans)
42",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054190
1390054181,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    queue = deque()
6
7
    # Process first k elements
8
    for i in range(k):
9
        if arr[i] < 0:
10
            queue.append(i)
11
    12
    # Add the first faulty element or 0 if none found
13
    result.append(arr[queue[0]] if queue else 0)
14
    15
    # Process the rest of the array
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of the window
18
        if queue and queue[0] < i - k + 1:
19
            queue.popleft()
20
        21
        # Add new element if it's negative
22
        if arr[i] < 0:
23
            queue.append(i)
24
        25
        # Add the first faulty element or 0
26
        result.append(arr[queue[0]] if queue else 0)
27
28
    return result
29
30
# Read input
31
t = int(input())  # Number of test cases
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    print(*earliest_faulty_readings(arr, k))
36",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054181
1390054183,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt(); 
7
8
        while (T-- > 0) {
9
            int n = sc.nextInt();
10
            int k = sc.nextInt();
11
            int arr[] = new int[n];
12
13
    14
            for (int i = 0; i < n; i++) {
15
                arr[i] = sc.nextInt();
16
            }
17
18
            ArrayList<Integer> list = new ArrayList<>();
19
            Queue<Integer> queue = new LinkedList<>(); 
20
21
            int i = 0, j = 0;
22
23
            while (j < n) {
24
    25
                if (arr[j] < 0) {
26
                    queue.add(arr[j]);
27
                }
28
29
              30
                if (j - i + 1 == k) {
31
                   32
                    if (!queue.isEmpty()) {
33
                        list.add(queue.peek());
34
                    } else {
35
                        list.add(0); 
36
                    }
37
38
                39
                    if (!queue.isEmpty() && queue.peek() == arr[i]) {
40
                        queue.poll();
41
                    }
42
                    i++; 
43
                }
44
45
                j++; 
46
            }
47
48
       49
            for (int l = 0; l < list.size(); l++) {
50
                System.out.print(list.get(l) + "" "");
51
            }
52
            System.out.println(); 
53
        }
54
55
        sc.close();
56
    }
57
}
58",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054183
1390054182,unknown,unknown,unknown,"1
def solve():
2
3
    import sys
4
5
    input_data = sys.stdin.read().splitlines()
6
7
    t = int(input_data[0].strip())
8
9
    line = 1
10
11
    out_lines = []
12
13
    for _ in range(t):
14
15
        s = input_data[line].strip()
16
17
        line += 1
18
19
        n = len(s)
20
21
        # get indices for active servers ('1')
22
23
        positions = [i for i, ch in enumerate(s) if ch == '1']
24
25
        m = len(positions)
26
27
        if m == 0:
28
29
            out_lines.append(""0"")
30
31
            continue
32
33
        # Precompute A: A[i] = positions[i] - i
34
35
        A = [positions[i] - i for i in range(m)]
36
37
        38
39
        # check(X) returns True if there exists a window in A
40
41
        # such that:
42
43
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
44
45
        # and A[j] - A[i] <= X.
46
47
        def check(X):
48
49
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
50
51
            if m - X <= 0:
52
53
                return True
54
55
            j = 0
56
57
            for i in range(m):
58
59
                if j < i:
60
61
                    j = i
62
63
                # slide j as far as possible while A[j]-A[i] <= X
64
65
                while j < m and A[j] - A[i] <= X:
66
67
                    j += 1
68
69
                # j now is one past the last index satisfying condition, so the window has length (j - i)
70
71
                if j - i >= m - X:
72
73
                    return True
74
75
            return False
76
77
        # Binary search for the minimum X
78
79
        lo, hi, ans = 0, n, n
80
81
        while lo <= hi:
82
83
            mid = (lo + hi) // 2
84
85
            if check(mid):
86
87
                ans = mid
88
89
                hi = mid - 1
90
91
            else:
92
93
                lo = mid + 1
94
95
        out_lines.append(str(ans))
96
97
    98
99
    sys.stdout.write(""\n"".join(out_lines))
100
101
    102
103
if __name__ == '__main__':
104
105
    solve()",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054182
1390054176,unknown,unknown,unknown,"1
for _ in range(int(input())):
2
    n, k = map(int, input().split())
3
    nums = list(map(int, input().split()))
4
    output = []
5
6
    for j in range(n - k + 1):
7
        window = nums[j:j + k]
8
        9
        first_negative = next((num for num in window if num < 0), 0)
10
        11
        output.append(first_negative)
12
13
    print(*output)",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054176
1390054180,unknown,unknown,unknown,"1
def min_decommission_cost(rack):
2
    n = len(rack)
3
    4
    # Precompute cumulative sums for O(1) range queries
5
    active_prefix = [0] * (n + 1)  # Active servers (1's) from left
6
    idle_prefix = [0] * (n + 1)    # Idle servers (0's) from left
7
    8
    for i in range(n):
9
        active_prefix[i + 1] = active_prefix[i] + (1 if rack[i] == '1' else 0)
10
        idle_prefix[i + 1] = idle_prefix[i] + (1 if rack[i] == '0' else 0)
11
        12
    total_active = active_prefix[n]
13
    total_idle = idle_prefix[n]
14
    15
    min_cost = float('inf')
16
    17
    # We need to find i and j where:
18
    # i = number of servers to remove from beginning
19
    # j = number of servers to remove from end
20
    for i in range(n + 1):
21
        for j in range(n + 1 - i):  # Ensure we don't remove more than n servers
22
            # Active servers removed from beginning and end
23
            removed_active = active_prefix[i] + (active_prefix[n] - active_prefix[n - j])
24
            25
            # Idle servers remaining in the middle
26
            remaining_idle = idle_prefix[n - j] - idle_prefix[i]
27
            28
            cost = max(remaining_idle, removed_active)
29
            min_cost = min(min_cost, cost)
30
    31
    return min_cost
32
33
def main():
34
    t = int(input().strip())
35
    36
    for _ in range(t):
37
        rack = input().strip()
38
        result = min_decommission_cost(rack)
39
        print(result)
40
41
if __name__ == ""__main__"":
42
    main()",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054180
1390054174,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054174
1390054173,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
#include <stdio.h>
3
#include <stdlib.h>
4
5
void findEarliestFaultyReadings(int *arr, int n, int k) {
6
    int *result = (int *)malloc((n - k + 1) * sizeof(int));
7
    int front = 0, rear = 0;
8
    int queue[n];
9
    10
    // Process the first window
11
    for (int i = 0; i < k; i++) {
12
        if (arr[i] < 0) {
13
            queue[rear++] = i;
14
        }
15
    }
16
    17
    // Store result for the first batch
18
    result[0] = (front < rear)  arr[queue[front]] : 0;
19
    20
    // Process the remaining windows
21
    for (int i = k; i < n; i++) {
22
        // Remove elements not within the window
23
        while (front < rear && queue[front] <= i - k) {
24
            front++;
25
        }
26
        27
        // Add new element if it's faulty
28
        if (arr[i] < 0) {
29
            queue[rear++] = i;
30
        }
31
        32
        // Store result for current batch
33
        result[i - k + 1] = (front < rear) ? arr[queue[front]] : 0;
34
    }
35
    36
    // Print the result
37
    for (int i = 0; i < n - k + 1; i++) {
38
        printf(""%d "", result[i]);
39
    }
40
    printf(""\n"");
41
    42
    free(result);
43
}
44
45
int main() {
46
    int t;
47
    scanf(""%d"", &t);
48
    49
    while (t--) {
50
        int n, k;
51
        scanf(""%d %d"", &n, &k);
52
        int arr[n];
53
        54
        for (int i = 0; i < n; i++) {
55
            scanf(""%d"", &arr[i]);
56
        }
57
        58
        findEarliestFaultyReadings(arr, n, k);
59
    }
60
    61
    return 0;
62
}",95,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054173
