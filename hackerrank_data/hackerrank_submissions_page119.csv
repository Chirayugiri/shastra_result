submission_id,username,problem_name,language,code,page,url
1390053762,unknown,unknown,unknown,"1
def minimize_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    4
    # Create list of (value + index) for each firewall
5
    skip_value = []
6
    for i in range(n):
7
        skip_value.append((firewalls[i] + i, i))
8
9
    # Sort by descending benefit to skip
10
    skip_value.sort(reverse=True)
11
12
    # Mark which firewalls to skip
13
    skipped = [0] * n
14
    for i in range(k):
15
        _, idx = skip_value[i]
16
        skipped[idx] = 1
17
18
    # Now calculate final effort
19
    effort = 0
20
    penalty = 0
21
    for i in range(n):
22
        if skipped[i]:
23
            penalty += 1
24
        else:
25
            effort += firewalls[i] + penalty
26
27
    return effort
28
29
# Main driver
30
T = int(input())
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    firewalls = list(map(int, input().split()))
34
    print(minimize_effort(n, k, firewalls))",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053762
1390053763,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        min_cost = float('inf')
7
        8
        # Iterate over all possible prefixes to remove
9
        for i in range(n + 1):
10
            # Iterate over all possible suffixes to remove
11
            for j in range(n + 1):
12
                # Calculate the remaining servers after removing i from the start and j from the end
13
                remaining_servers = servers[i:n-j] if i + j <= n else """"
14
                15
                # Count remaining idle servers (0's) and decommissioned active servers (1's)
16
                remaining_idle = remaining_servers.count('0')
17
                decommissioned_active = (servers[:i].count('1') + servers[n-j:].count('1'))
18
                19
                # Calculate the cost
20
                cost = max(remaining_idle, decommissioned_active)
21
                22
                # Update the minimum cost
23
                min_cost = min(min_cost, cost)
24
        25
        results.append(min_cost)
26
    27
    return results
28
29
# Input reading
30
T = int(input())
31
test_cases = [input().strip() for _ in range(T)]
32
33
# Get results
34
results = min_decommissioning_cost(test_cases)
35
36
# Output results
37
for result in results:
38
    print(result)
39
40",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053763
1390053764,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053764
1390053755,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(n, k, arr):
4
5
    dq = deque()  # Stores indices of negative numbers
6
7
    res = []
8
9
    # Process first batch
10
11
    for i in range(k):
12
13
        if arr[i] < 0:
14
15
            dq.append(i)
16
17
    # Store result for the first batch
18
19
    res.append(arr[dq[0]] if dq else 0)
20
21
    # Process remaining batches
22
23
    for i in range(k, n):
24
25
        # Remove elements that are out of the window
26
27
        while dq and dq[0] < i - k + 1:
28
29
            dq.popleft()
30
31
        # Add the new element if it's negative
32
33
        if arr[i] < 0:
34
35
            dq.append(i)
36
37
        # Store result for the current batch
38
39
        res.append(arr[dq[0]] if dq else 0)
40
41
    return res
42
43
# Read input
44
45
t = int(input())  # Number of test cases
46
47
for _ in range(t):
48
49
    n, k = map(int, input().split())  # Size of array and batch size
50
51
    arr = list(map(int, input().split()))  # Array elements
52
53
    # Process and print output
54
55
    print("" "".join(map(str, earliest_faulty_readings(n, k, arr))))",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053755
1390053759,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process the first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store the result for the first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process the remaining windows
17
    for i in range(k, n):
18
        # Remove elements that are out of the current window
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add the current element if it is negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Store the result for the current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Size of array and batch size
35
    arr = list(map(int, input().split()))  # Array elements
36
    37
    # Get the results and print as space-separated values
38
    print(*earliest_faulty_readings(arr, k))",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053759
1390053761,unknown,unknown,unknown,"1
def min_decommissioning_cost(s):
2
    n = len(s)
3
    4
    prefix_active = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_active[i+1] = prefix_active[i] + (1 if s[i] == '1' else 0)
7
    8
    total_active = prefix_active[n]
9
    10
    min_cost = float('inf')
11
    12
    for start in range(n + 1):
13
        prefix_removed = prefix_active[start]
14
        15
        for end in range(start, n + 1):
16
            if start == end:
17
                min_cost = min(min_cost, total_active)
18
                continue
19
            20
            active_remaining = prefix_active[end] - prefix_active[start]
21
            22
            active_removed = prefix_removed + (total_active - prefix_active[end])
23
            24
            idle_remaining = (end - start) - active_remaining
25
            26
            cost = max(idle_remaining, active_removed)
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
import sys
32
input = sys.stdin.readline
33
34
t = int(input())
35
for _ in range(t):
36
    server_rack = input().strip()
37
    print(min_decommissioning_cost(server_rack))",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053761
1390053748,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053748
1390053751,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        8
        while (T-- > 0) {
9
            int n = sc.nextInt();
10
            int k = sc.nextInt();
11
            12
            long[] arr = new long[n];
13
            for (int i = 0; i < n; i++) {
14
                arr[i] = sc.nextLong();
15
            }
16
            17
            long totalSum = 0;
18
            for (long val : arr) {
19
                totalSum += val;
20
            }
21
            22
            long currentWindowSum = 0;
23
            for (int i = 0; i < k; i++) {
24
                currentWindowSum += arr[i];
25
            }
26
            27
            long maxWindowSum = currentWindowSum;
28
            29
            for (int i = k; i < n; i++) {
30
                currentWindowSum = currentWindowSum + arr[i] - arr[i - k];
31
                maxWindowSum = Math.max(maxWindowSum, currentWindowSum);
32
            }
33
            34
            System.out.println(totalSum - maxWindowSum );
35
        }
36
        37
        sc.close();
38
    }
39
}
40",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053751
1390053754,unknown,unknown,unknown,"1
import sys
2
3
def min_effort(n, k, firewalls):
4
    if k >= n:
5
        return 0  # If we can skip all firewalls, effort is 0.
6
7
    total_effort = sum(firewalls)  # Base case: no firewalls skipped
8
    min_effort = total_effort  # Track the minimum possible effort
9
10
    # Precompute prefix sum for efficient range calculations
11
    prefix_sum = [0] * (n + 1)
12
    for i in range(n):
13
        prefix_sum[i + 1] = prefix_sum[i] + firewalls[i]
14
15
    # Try skipping every contiguous k firewalls using a sliding window
16
    for i in range(n - k + 1):  
17
        skipped_sum = prefix_sum[i + k] - prefix_sum[i]  # Sum of skipped firewalls
18
        increased_security = (n - (i + k)) * k  # Strength increase for remaining firewalls
19
        remaining_effort = total_effort - skipped_sum + increased_security
20
21
        min_effort = min(min_effort, remaining_effort)
22
23
    return min_effort
24
25
# Read input
26
t = int(sys.stdin.readline().strip())  
27
output = []
28
29
for _ in range(t):
30
    n, k = map(int, sys.stdin.readline().split())
31
    firewalls = list(map(int, sys.stdin.readline().split()))
32
    output.append(str(min_effort(n, k, firewalls)))
33
34
# Print final output
35
sys.stdout.write(""\n"".join(output) + ""\n"")
36",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053754
1390053747,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    ans = float('inf')
5
6
    for i in range(n + 1):  # Iterate through all possible start positions
7
        for j in range(i, n + 1):  # Iterate through all possible end positions
8
            remaining = s[i:j]
9
            zeros_remaining = remaining.count('0')
10
            ones_removed = s[:i].count('1') + s[j:].count('1')
11
            ans = min(ans, max(zeros_remaining, ones_removed))
12
13
    print(ans)
14
15
t = int(input())
16
for _ in range(t):
17
    solve()",119,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053747
