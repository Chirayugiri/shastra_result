submission_id,username,problem_name,language,code,page,url
1390053744,unknown,unknown,unknown,"1
from collections import deque
2
3
def first_negative_in_windows(arr, k):
4
    dq = deque()
5
    result = []
6
    7
    # Process the first window of size k
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Append result for first window
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process remaining windows
16
    for i in range(k, len(arr)):
17
        # Remove indices that are out of the current window
18
        while dq and dq[0] < i - k + 1:
19
            dq.popleft()
20
            21
        # If current element is negative, add its index
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Append the earliest negative reading for current window if exists, else 0
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
def main():
31
    import sys
32
    input_data = sys.stdin.read().strip().split()
33
    if not input_data:
34
        return
35
36
    t = int(input_data[0])
37
    index = 1
38
    outputs = []
39
    40
    for _ in range(t):
41
        n = int(input_data[index])
42
        k = int(input_data[index + 1])
43
        index += 2
44
        45
        arr = list(map(int, input_data[index:index+n]))
46
        index += n
47
        48
        res = first_negative_in_windows(arr, k)
49
        outputs.append("" "".join(map(str, res)))
50
    51
    # Print each test case result on a new line
52
    print(""\n"".join(outputs))
53
54
if __name__ == '__main__':
55
    main()
56",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053744
1390053737,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    for _ in range(test_cases):
4
        n, k = map(int, input().split())
5
        arr = list(map(int, input().split()))
6
        result = []
7
        for i in range(n - k + 1):
8
            batch = arr[i:i+k]
9
            faulty = 0
10
            for num in batch:
11
                if num < 0:
12
                    faulty = num
13
                    break
14
            result.append(faulty)
15
        results.append(result)
16
    return results
17
18
# Read the number of test cases
19
test_cases = int(input())
20
results = earliest_faulty_readings(test_cases)
21
22
# Print the results
23
for result in results:
24
    print(' '.join(map(str, result)) + ' ')
25
26",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053737
1390053738,unknown,unknown,unknown,"1
def min_cost_optimization(servers):
2
    n = len(servers)
3
    min_cost = float('inf')
4
    5
    for prefix in range(n + 1):
6
        for suffix in range(n + 1 - prefix):
7
            remaining = servers[prefix:n-suffix]
8
            9
            idle_servers = remaining.count('0')
10
            active_servers_removed = servers[:prefix].count('1') + servers[n-suffix:].count('1')
11
            12
            cost = max(idle_servers, active_servers_removed)
13
            min_cost = min(min_cost, cost)
14
    15
    return min_cost
16
17
def solve():
18
    t = int(input())
19
    20
    for _ in range(t):
21
        servers = input().strip()
22
        result = min_cost_optimization(servers)
23
        print(result)
24
25
if __name__ == ""__main__"":
26
    solve()",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053738
1390053739,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()
38",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053739
1390053734,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    min_cost = float('inf')
5
6
    for i in range(n + 1):
7
        for j in range(n - i + 1):
8
            remaining_s = s[i:n - j]
9
            10
            idle_count = 0
11
            for char in remaining_s:
12
                if char == '0':
13
                    idle_count += 1
14
            15
            active_removed = 0
16
            for k in range(i):
17
                if s[k] == '1':
18
                    active_removed += 1
19
            for k in range(n - j, n):
20
                if s[k] == '1':
21
                    active_removed += 1
22
23
            cost = max(idle_count, active_removed)
24
            min_cost = min(min_cost, cost)
25
            26
    print(min_cost)
27
28
t = int(input())
29
for _ in range(t):
30
    solve()",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053734
1390053735,unknown,unknown,unknown,"1
def min_effort_to_breach_firewalls(test_cases):
2
    results = []
3
    4
    for n, k, strengths in test_cases:
5
        # Sort the strengths to consider the weakest firewalls first
6
        strengths.sort()
7
        8
        # Initialize the minimum effort to a large number
9
        min_effort = float('inf')
10
        11
        # Iterate over the number of skips
12
        for skips in range(min(k, n) + 1):
13
            # Calculate the effort if we skip 'skips' firewalls
14
            current_effort = 0
15
            16
            # Calculate the effort for the remaining firewalls after skipping
17
            for i in range(skips, n):
18
                current_effort += strengths[i] + skips
19
            20
            # Update the minimum effort
21
            min_effort = min(min_effort, current_effort)
22
        23
        results.append(min_effort)
24
    25
    return results
26
27
# Input reading
28
T = int(input())
29
test_cases = []
30
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    strengths = list(map(int, input().split()))
34
    test_cases.append((n, k, strengths))
35
36
# Get results
37
results = min_effort_to_breach_firewalls(test_cases)
38
39
# Output results
40
for result in results:
41
    print(result)
42
43
44",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053735
1390053736,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    5
    6
    for j in range(k + 1):
7
        dp[0][j] = 0
8
    9
    for i in range(1, n + 1):
10
        for j in range(k + 1):
11
            12
            if j > 0:
13
                14
                dp[i][j] = dp[i-1][j-1]
15
            16
           17
            current_strength = strengths[i-1] + j  
18
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
19
    20
 21
    return min(dp[n])
22
23
def solve():
24
    t = int(input())
25
    results = []
26
    27
    for _ in range(t):
28
        n, k = map(int, input().split())
29
        strengths = list(map(int, input().split()))
30
        results.append(min_effort_to_breach(n, k, strengths))
31
    32
    for result in results:
33
        print(result)
34
35
solve()",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053736
1390053732,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <cmath>
4
using namespace std;
5
6
void findFaulty(int n, int k, vector<int>& arr) {
7
    vector<int>reports;
8
    int i = 0;
9
    int j = k-1;
10
    while(i<j && j<n){
11
        bool neg = false;
12
        int val = 0;
13
        for(int x = i; x <= j; x++){
14
            if(arr[x]<0){
15
                val = arr[x];
16
                neg = true;
17
                break;
18
            }
19
        }
20
        reports.push_back(neg ? val: 0 );
21
        i++;
22
        j++;
23
    }
24
    for(auto report : reports){
25
        cout<<report<<"" "";
26
    }
27
    cout<<endl;
28
    29
}
30
31
int main() {
32
    int t;
33
    cin >> t;
34
    while (t--) {
35
        int n, k;
36
        cin >> n >> k;
37
        vector<int> arr(n);
38
        for (int i = 0; i < n; i++) {
39
            cin >> arr[i];
40
        }
41
        findFaulty(n, k, arr);
42
    }
43
    return 0;
44
}
45",120,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053732
