submission_id,username,problem_name,language,code,page,url
1390054943,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    if k >= n:
3
        return 0
4
    5
    # Calculate the effort for all possible combinations of skipping firewalls
6
    efforts = []
7
    for mask in range(1 << n):
8
        if bin(mask).count('1') <= k:
9
            skipped = [i for i in range(n) if mask & (1 << i)]
10
            extra = 0
11
            total = 0
12
            13
            for i in range(n):
14
                if i in skipped:
15
                    extra += 1
16
                else:
17
                    total += strengths[i] + extra
18
                    19
            efforts.append(total)
20
    21
    return min(efforts)
22
23
t = int(input())
24
for _ in range(t):
25
    n, k = map(int, input().split())
26
    strengths = list(map(int, input().split()))
27
    print(min_effort_to_breach(n, k, strengths))",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054943
1390054946,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(len(arr)):
8
        # Remove elements that are out of the current batch window
9
        while dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
        12
        # Add the current element if it's faulty (negative)
13
        if arr[i] < 0:
14
            dq.append(i)
15
        16
        # Determine the earliest faulty reading for the current batch
17
        if i >= k - 1:
18
            result.append(arr[dq[0]] if dq else 0)
19
    20
    return result
21
22
def process_test_cases(test_cases):
23
    results = []
24
    for size, k, arr in test_cases:
25
        results.append(earliest_faulty_readings(arr, k))
26
    return results
27
28
# Read input
29
if __name__ == ""__main__"":
30
    t = int(input().strip())
31
    test_cases = []
32
    33
    for _ in range(t):
34
        size, k = map(int, input().split())
35
        arr = list(map(int, input().split()))
36
        test_cases.append((size, k, arr))
37
    38
    # Process and print results
39
    results = process_test_cases(test_cases)
40
    for res in results:
41
        print("" "".join(map(str, res)))",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054946
1390054942,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054942
1390054939,unknown,unknown,unknown,1,58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054939
1390054937,unknown,unknown,unknown,"1
import sys  
2
from itertools import accumulate  
3
4
def min_effort(arr, k):  
5
    n = len(arr)  
6
    T = sum(arr)  
7
    A = [arr[i] + (i + 1) for i in range(n)]  
8
    A.sort(reverse=True)  
9
    P = [0] + list(accumulate(A))  
10
    m_max = min(k, n)  
11
    best = float('inf')  
12
    13
    for m in range(m_max + 1):  
14
        cost = T + m * n - (m * m - m) // 2 - P[m]  
15
        if cost < best:  
16
            best = cost  
17
            18
    return best  
19
20
def solve():  
21
    data = sys.stdin.read().strip().split()  
22
    if not data:  
23
        return  
24
    t = int(data[0])  
25
    index = 1  
26
    res = []  
27
    28
    for _ in range(t):  
29
        n = int(data[index])  
30
        index += 1  
31
        k = int(data[index])  
32
        index += 1  
33
        arr = list(map(int, data[index:index + n]))  
34
        index += n  
35
        res.append(str(min_effort(arr, k)))  
36
        37
    sys.stdout.write(""\n"".join(res) + ""\n"")  
38
39
if __name__ == ""__main__"":  
40
    solve()  ",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054937
1390054940,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void findEarliestFaultyReadings(int *arr, int n, int k) {
5
    int *result = (int *)malloc((n - k + 1) * sizeof(int));
6
    int front = 0, rear = 0;
7
    int queue[n];
8
    9
    // Process the first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) {
12
            queue[rear++] = i;
13
        }
14
    }
15
    16
    // Store result for the first batch
17
    result[0] = (front < rear) ? arr[queue[front]] : 0;
18
    19
    // Process the remaining windows
20
    for (int i = k; i < n; i++) {
21
        // Remove elements not within the window
22
        while (front < rear && queue[front] <= i - k) {
23
            front++;
24
        }
25
        26
        // Add new element if it's faulty
27
        if (arr[i] < 0) {
28
            queue[rear++] = i;
29
        }
30
        31
        // Store result for current batch
32
        result[i - k + 1] = (front < rear) ? arr[queue[front]] : 0;
33
    }
34
    35
    // Print the result
36
    for (int i = 0; i < n - k + 1; i++) {
37
        printf(""%d "", result[i]);
38
    }
39
    printf(""\n"");
40
    41
    free(result);
42
}
43
44
int main() {
45
    int t;
46
    scanf(""%d"", &t);
47
    48
    while (t--) {
49
        int n, k;
50
        scanf(""%d %d"", &n, &k);
51
        int arr[n];
52
        53
        for (int i = 0; i < n; i++) {
54
            scanf(""%d"", &arr[i]);
55
        }
56
        57
        findEarliestFaultyReadings(arr, n, k);
58
    }
59
    60
    return 0;
61
}",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054940
1390054929,unknown,unknown,unknown,"1
def min_decommission_cost(s: str) -> int:
2
    n = len(s)
3
    ones_pos = [i for i, ch in enumerate(s) if ch == '1']
4
    T = len(ones_pos)
5
    6
    if T == 0:
7
        return 0
8
    9
    zeros_total = s.count('0')
10
    ans = min(zeros_total, T) 
11
    12
    for X in range(1, T + 1):
13
        for i in range(0, T - X + 1):
14
            left = ones_pos[i]
15
            right = ones_pos[i + X - 1]
16
            length = right - left + 1
17
            zeros_in_block = length - X
18
            candidate = max(zeros_in_block, T - X)
19
            ans = min(ans, candidate)
20
    21
    return ans
22
23
if __name__ == '__main__':
24
    T = int(input().strip())
25
    for _ in range(T):
26
        s = input().strip()
27
        print(min_decommission_cost(s))",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054929
1390054932,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    T = int(sys.stdin.readline().strip())
5
    for _ in range(T):
6
        n, k = map(int, sys.stdin.readline().split())
7
        a = list(map(int, sys.stdin.readline().split()))
8
        9
        sum_a = sum(a)
10
        values = [a[i] - (n - i - 1) for i in range(n)]
11
        values.sort(reverse=True)
12
        prefix_sum = [0] * (n + 1)
13
        for i in range(1, n + 1):
14
            prefix_sum[i] = prefix_sum[i - 1] + values[i - 1]
15
        maximum_m = min(k, n)
16
        maximum_total = float('-inf')
17
        for m in range(maximum_m + 1):
18
            current = prefix_sum[m] + (m * (m - 1)) // 2
19
            maximum_total = max(maximum_total, current)
20
        minimum_effort = sum_a - maximum_total
21
        print(minimum_effort)
22
23
if __name__ == ""__main__"":
24
    main()",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054932
1390054936,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054936
1390054927,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    ans = float('inf')
6
    7
    for i in range(n + 1):
8
        for j in range(n - i + 1):
9
            remaining = s[i:n-j]
10
            11
            idle_count = 0
12
            for char in remaining:
13
                if char == '0':
14
                    idle_count += 1
15
            16
            active_removed = 0
17
            for k in range(i):
18
                if s[k] == '1':
19
                    active_removed += 1
20
            for k in range(n - j, n):
21
                if s[k] == '1':
22
                    active_removed += 1
23
            24
            ans = min(ans, max(idle_count, active_removed))
25
    26
    print(ans)
27
28
t = int(input())
29
for _ in range(t):
30
    solve()
31",58,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054927
