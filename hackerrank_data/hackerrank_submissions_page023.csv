submission_id,username,problem_name,language,code,page,url
1390055733,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
#include <climits>
5
6
using namespace std;
7
8
vector<int> min_decommissioning_cost(const vector<string>& test_cases) {
9
    vector<int> results;
10
    11
    for (const string& servers : test_cases) {
12
        int n = servers.size();
13
        int total_0 = 0;
14
        for (char c : servers) {
15
            if (c == '0') total_0++;
16
        }
17
        int total_1 = n - total_0;
18
        19
        // Precompute prefix counts for 0s and 1s
20
        vector<int> prefix_0(n + 1, 0), prefix_1(n + 1, 0);
21
        for (int i = 1; i <= n; ++i) {
22
            prefix_0[i] = prefix_0[i-1] + (servers[i-1] == '0');
23
            prefix_1[i] = prefix_1[i-1] + (servers[i-1] == '1');
24
        }
25
        26
        // Precompute suffix counts for 0s and 1s
27
        vector<int> suffix_0(n + 1, 0), suffix_1(n + 1, 0);
28
        for (int j = 1; j <= n; ++j) {
29
            suffix_0[j] = suffix_0[j-1] + (servers[n - j] == '0');
30
            suffix_1[j] = suffix_1[j-1] + (servers[n - j] == '1');
31
        }
32
        33
        int min_cost = INT_MAX;
34
        35
        // Iterate over all possible prefixes (i)
36
        for (int i = 0; i <= n; ++i) {
37
            int j_max = n - i;
38
            int left = 0, right = j_max;
39
            int best_j = 0;
40
            int best_cost = INT_MAX;
41
            42
            // Binary search for the best j
43
            while (left <= right) {
44
                int mid = (left + right) / 2;
45
                int remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid]);
46
                int decommissioned_1 = prefix_1[i] + suffix_1[mid];
47
                int current_cost = max(remaining_0, decommissioned_1);
48
                49
                if (current_cost < best_cost) {
50
                    best_cost = current_cost;
51
                    best_j = mid;
52
                } else if (current_cost == best_cost && mid < best_j) {
53
                    best_j = mid;
54
                }
55
                56
                if (decommissioned_1 < remaining_0) {
57
                    left = mid + 1;
58
                } else {
59
                    right = mid - 1;
60
                }
61
            }
62
            63
            // Check neighboring j values
64
            for (int dj : {-1, 0, 1}) {
65
                int j = best_j + dj;
66
                if (j >= 0 && j <= j_max) {
67
                    int remaining_0 = total_0 - (prefix_0[i] + suffix_0[j]);
68
                    int decommissioned_1 = prefix_1[i] + suffix_1[j];
69
                    int current_cost = max(remaining_0, decommissioned_1);
70
                    if (current_cost < best_cost) {
71
                        best_cost = current_cost;
72
                    }
73
                }
74
            }
75
            76
            if (best_cost < min_cost) {
77
                min_cost = best_cost;
78
            }
79
        }
80
        81
        results.push_back(min_cost);
82
    }
83
    84
    return results;
85
}
86
87
int main() {
88
    int T;
89
    cin >> T;
90
    vector<string> test_cases(T);
91
    for (int i = 0; i < T; ++i) {
92
        cin >> test_cases[i];
93
    }
94
    95
    vector<int> results = min_decommissioning_cost(test_cases);
96
    97
    for (int result : results) {
98
        cout << result << endl;
99
    }
100
    101
    return 0;
102
}",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055733
1390055734,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    firewalls.sort()  
3
    effort = sum(firewalls[:n - k])  
4
    return effort
5
6
t = int(input().strip())
7
for _ in range(t):
8
    n, k = map(int, input().strip().split())
9
    firewalls = list(map(int, input().strip().split()))
10
    print(min_effort(n, k, firewalls))
11",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055734
1390055743,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
45
main()",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055743
1390055725,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); 
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
        28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
        79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055725
1390055724,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();
7
8
        while (T-- > 0) {
9
            int n = scanner.nextInt();
10
            int k = scanner.nextInt();
11
            int[] a = new int[n];
12
            int sum_a = 0;
13
14
            for (int i = 0; i < n; i++) {
15
                a[i] = scanner.nextInt();
16
                sum_a += a[i];
17
            }
18
19
            List<Integer> v = new ArrayList<>();
20
            for (int i = 0; i < n; i++) {
21
                v.add(a[i] - (n - i - 1));
22
            }
23
24
            v.sort(Collections.reverseOrder());
25
26
            int[] prefix = new int[n + 1];
27
            for (int i = 0; i < n; i++) {
28
                prefix[i + 1] = prefix[i] + v.get(i);
29
            }
30
31
            int max_sum = 0;
32
            int max_t = Math.min(k, n);
33
            for (int t = 0; t <= max_t; t++) {
34
                int current = prefix[t] + t * (t - 1) / 2;
35
                max_sum = Math.max(max_sum, current);
36
            }
37
38
            System.out.println(sum_a - max_sum);
39
        }
40
        scanner.close();
41
    }
42
}
43",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055724
1390055730,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases): 
2
    results = []
3
    4
    for s in test_cases:
5
        n = len(s)
6
        7
        prefix_ones = [0] * (n + 1)
8
        prefix_zeros = [0] * (n + 1)
9
        10
        for i in range(1, n + 1):
11
            prefix_ones[i] = prefix_ones[i - 1] + (1 if s[i - 1] == '1' else 0)
12
            prefix_zeros[i] = prefix_zeros[i - 1] + (1 if s[i - 1] == '0' else 0)
13
        14
        total_ones = prefix_ones[n]
15
        total_zeros = prefix_zeros[n]
16
        17
        min_cost = float('inf')
18
        19
        for i in range(n):
20
            for j in range(i + 1, n + 1):
21
                ones_in_subarray = prefix_ones[j] - prefix_ones[i]
22
                zeros_in_subarray = prefix_zeros[j] - prefix_zeros[i]
23
                removed_ones = total_ones - ones_in_subarray
24
                cost = max(zeros_in_subarray, removed_ones)
25
                min_cost = min(min_cost, cost)
26
        27
        results.append(min_cost)
28
    29
    return results
30
31
T = int(input())  
32
test_cases = [input().strip() for _ in range(T)]
33
34
results = min_decommissioning_cost(test_cases)
35
36
for result in results:
37
    print(result)
38",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055730
1390055715,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    static boolean feasible(int X, int[] onesIndices, int total1) {
6
        if (X >= total1) return true;
7
        int j = 0;
8
        for (int i = 0; i < total1; i++) {
9
            if (j < i) j = i;
10
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
11
                j++;
12
            }
13
            int m = j - i;
14
            if (m >= total1 - X) return true;
15
        }
16
        return false;
17
    }
18
    19
    public static void main(String[] args) {
20
        Scanner sc = new Scanner(System.in);
21
        int T = sc.nextInt();
22
        23
        while(T-- > 0) {
24
            String s = sc.next();
25
            int n = s.length();
26
            27
            ArrayList<Integer> onesList = new ArrayList<>();
28
            for (int i = 0; i < n; i++) {
29
                if (s.charAt(i) == '1') {
30
                    onesList.add(i);
31
                }
32
            }
33
            int total1 = onesList.size();
34
            35
            if (total1 == 0) {
36
                System.out.println(0);
37
                continue;
38
            }
39
            40
            int[] onesIndices = new int[total1];
41
            for (int i = 0; i < total1; i++) {
42
                onesIndices[i] = onesList.get(i);
43
            }
44
            45
            int low = 0, high = total1, ans = high;
46
            while (low <= high) {
47
                int mid = low + (high - low) / 2;
48
                if (feasible(mid, onesIndices, total1)) {
49
                    ans = mid;
50
                    high = mid - 1;
51
                } else {
52
                    low = mid + 1;
53
                }
54
            }
55
            System.out.println(ans);
56
        }
57
        sc.close();
58
    }
59
}",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055715
1390055716,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
    for _ in range(t):
8
        s = input_data[line].strip()
9
        line += 1
10
        n = len(s)
11
12
        positions = [i for i, ch in enumerate(s) if ch == '1']
13
        m = len(positions)
14
        if m == 0:
15
            out_lines.append(""0"")
16
            continue
17
        18
        A = [positions[i] - i for i in range(m)]
19
        20
    21
        def check(X):
22
            23
            if m - X <= 0:
24
                return True
25
            j = 0
26
            for i in range(m):
27
                if j < i:
28
                    j = i
29
                30
                while j < m and A[j] - A[i] <= X:
31
                    j += 1
32
                if j - i >= m - X:
33
                    return True
34
            return False
35
36
        37
        lo, hi, ans = 0, n, n
38
        while lo <= hi:
39
            mid = (lo + hi) // 2
40
            if check(mid):
41
                ans = mid
42
                hi = mid - 1
43
            else:
44
                lo = mid + 1
45
        out_lines.append(str(ans))
46
    47
    sys.stdout.write(""\n"".join(out_lines))
48
    49
if __name__ == '__main__':
50
    solve()",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055716
1390055717,unknown,unknown,unknown,"1
def m(n, k, a):
2
    if k >= n:
3
        return 0
4
    L = []
5
    for i in range(n):
6
        L.append((a[i] - (n - i - 1), i))
7
    L.sort(reverse=True)
8
    S = set(x[1] for x in L[:k])
9
    t = 0
10
    p = 0
11
    for i in range(n):
12
        if i in S:
13
            p += 1
14
        else:
15
            t += a[i] + p
16
    return t
17
18
def s():
19
    t = int(input())
20
    r = []
21
    for _ in range(t):
22
        n, k = map(int, input().split())
23
        a = list(map(int, input().split()))
24
        r.append(m(n, k, a))
25
    return r
26
27
def main():
28
    for x in s():
29
        print(x)
30
31
if __name__ == ""__main__"":
32
    main()
33",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055717
1390055711,unknown,unknown,unknown,"1
t = int(input())  
2
3
for _ in range(t):  
4
    n, k = map(int, input().split())  
5
    firewalls = list(map(int, input().split()))  
6
7
    if k >= n:  
8
        print(0)  
9
        continue  
10
11
    min_effort = sum(firewalls)  
12
13
    for i in range(n - k + 1):  
14
        effort = 0  
15
        skipped = 0  
16
17
        for j in range(n):  
18
            if i <= j < i + k:  
19
                skipped += 1  
20
                continue  
21
22
            effort += firewalls[j] + skipped  
23
24
        min_effort = min(min_effort, effort)  
25
26
    print(min_effort)  
27",23,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055711
