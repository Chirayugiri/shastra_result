submission_id,username,problem_name,language,code,page,url
1390055300,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    if n == 0:
3
        return 0  # No firewalls to pass
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    dp[0][0] = 0
6
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Do not skip
10
            dp[i][j] = dp[i-1][j] + firewalls[i-1] + j
11
            # Case 2: Skip if possible
12
            if j > 0:
13
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
14
    15
    return min(dp[n])
16
17
T = int(input())
18
for _ in range(T):
19
    n, k = map(int, input().split())
20
    firewalls = list(map(int, input().split()))
21
    if len(firewalls) != n:
22
        print(""Invalid input"")  # Handle input error
23
        exit()
24
    print(min_effort(n, k, firewalls))",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055300
1390055303,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
3
    # DP array, initialized with large values
4
5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
7
    dp[0][0] = 0  # Base case: No firewalls, no effort
8
9
    # DP Computation
10
11
    for i in range(1, n + 1):
12
13
        for j in range(k + 1):
14
15
            # Case 1: Don't skip this firewall
16
17
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
18
19
            # Case 2: Skip this firewall (if skips available)
20
21
            if j > 0:
22
23
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
24
25
    # Answer is the minimum effort across all skip possibilities
26
27
    return min(dp[n])
28
29
# Read input
30
31
T = int(input())  # Number of test cases
32
33
for _ in range(T):
34
35
    n, k = map(int, input().split())  # Read n and k
36
37
    firewalls = list(map(int, input().split()))  # Firewall strengths
38
39
    # Compute and print the minimum effort
40
41
    print(min_effort(n, k, firewalls))",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055303
1390055299,unknown,unknown,unknown,"1
def compute_min_cost(s):
2
    T = s.count('1')
3
    if T == 0:
4
        return 0
5
    n = len(s)
6
    7
    # Compute x_max_case1: max number of 1's in window of length T
8
    x_max_case1 = 0
9
    if T <= n:
10
        current = sum(1 for c in s[:T] if c == '1')
11
        x_max_case1 = current
12
        for i in range(1, n - T + 1):
13
            if s[i-1] == '1':
14
                current -= 1
15
            if s[i + T - 1] == '1':
16
                current += 1
17
            if current > x_max_case1:
18
                x_max_case1 = current
19
    20
    # Compute x_max_case2: max of min(run_length, T-1) for all runs of 1's
21
    x_max_case2 = 0
22
    current_run = 0
23
    for c in s:
24
        if c == '1':
25
            current_run += 1
26
        else:
27
            if current_run > 0:
28
                candidate = min(current_run, T-1)
29
                if candidate > x_max_case2:
30
                    x_max_case2 = candidate
31
                current_run = 0
32
    # Check the last run
33
    if current_run > 0:
34
        candidate = min(current_run, T-1)
35
        if candidate > x_max_case2:
36
            x_max_case2 = candidate
37
    38
    case1_cost = T - x_max_case1
39
    case2_cost = T - x_max_case2
40
    return min(case1_cost, case2_cost)
41
42
def main():
43
    import sys
44
    input = sys.stdin.read().split()
45
    T_cases = int(input[0])
46
    for i in range(1, T_cases + 1):
47
        s = input[i]
48
        print(compute_min_cost(s))
49
50
if __name__ == ""__main__"":
51
    main()",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055299
1390055294,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process the first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store the result for the first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process the remaining windows
17
    for i in range(k, n):
18
        # Remove elements that are out of the current window
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add the current element if it is negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Store the result for the current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Size of array and batch size
35
    arr = list(map(int, input().split()))  # Array elements
36
    37
    # Get the results and print as space-separated values
38
    print(*earliest_faulty_readings(arr, k))",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055294
1390055297,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        # Calculate the potential reduction for each firewall if skipped
6
        # Reduction for a[i] is a[i] - (number of firewalls after it) * 1
7
        # Because skipping it increases the strength of all subsequent firewalls by 1
8
        # So, the net reduction is a[i] - (n - i - 1)
9
        reductions = []
10
        for i in range(n):
11
            reductions.append(a[i] - (n - i - 1))
12
        13
        # Select the top k reductions (most positive)
14
        # If a reduction is negative, it's better not to skip that firewall
15
        # So, we only consider positive reductions
16
        positive_reductions = [r for r in reductions if r > 0]
17
        positive_reductions.sort(reverse=True)
18
        19
        # Take the top min(k, len(positive_reductions)) reductions
20
        skip_count = min(k, len(positive_reductions))
21
        total_reduction = sum(positive_reductions[:skip_count])
22
        23
        # Calculate the total effort
24
        # Initial total effort is sum(a)
25
        # After skipping, the total effort is sum(a) - total_reduction
26
        # Because the skipped firewalls are reduced by their a[i], but the subsequent firewalls are increased by skip_count
27
        # Wait, no. The total effort is sum(a) - sum of a[i] for skipped firewalls + skip_count * (number of firewalls after the last skipped firewall)
28
        # This is getting complicated. Let's think differently.
29
        30
        # Alternative approach:
31
        # Sort the firewalls in descending order of a[i] - (n - i - 1)
32
        # Skip the top k firewalls in this order
33
        # Calculate the total effort accordingly
34
        35
        # Let's implement this alternative approach
36
        # Create a list of tuples (a[i], i)
37
        firewall_indices = [(a[i], i) for i in range(n)]
38
        # Sort by a[i] - (n - i - 1) in descending order
39
        firewall_indices.sort(key=lambda x: x[0] - (n - x[1] - 1), reverse=True)
40
        41
        # Select the top k firewalls to skip
42
        skip_indices = set()
43
        for i in range(min(k, n)):
44
            skip_indices.add(firewall_indices[i][1])
45
        46
        # Calculate the total effort
47
        total_effort = 0
48
        increase = 0
49
        for i in range(n):
50
            if i in skip_indices:
51
                increase += 1
52
            else:
53
                total_effort += a[i] + increase
54
        55
        results.append(total_effort)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = []
61
for _ in range(T):
62
    n, k = map(int, input().split())
63
    a = list(map(int, input().split()))
64
    test_cases.append((n, k, a))
65
66
# Compute results
67
results = min_effort(test_cases)
68
69
# Output results
70
for res in results:
71
    print(res)",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055297
1390055298,unknown,unknown,unknown,"1
def min_cost(server_rack):
2
    n = len(server_rack)
3
    total_zeros = server_rack.count('0')
4
    total_ones = n - total_zeros
5
    min_cost = float('inf')
6
    7
    left = 0
8
    current_zeros = 0
9
    for right in range(n):
10
        if server_rack[right] == '0':
11
            current_zeros += 1
12
        13
        zeros_remaining = current_zeros
14
        ones_removed = total_ones - (right - left + 1 - current_zeros)
15
        16
        cost = max(zeros_remaining, ones_removed)
17
        if cost < min_cost:
18
            min_cost = cost
19
        20
        while left <= right and cost > min_cost:
21
            if server_rack[left] == '0':
22
                current_zeros -= 1
23
            left += 1
24
    25
    return min_cost
26
27
T = int(input())
28
for _ in range(T):
29
    server_rack = input().strip()
30
    print(min_cost(server_rack))",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055298
1390055290,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    ios::sync_with_stdio(false);
10
    cin.tie(nullptr);
11
    12
    int T;
13
    cin >> T;
14
    while(T--) {
15
        string s;
16
        cin >> s;
17
        int n = s.size();
18
        19
        // Build prefix sums for zeros and ones.
20
        // prefix0[i] = number of '0's in s[0, i)
21
        // prefix1[i] = number of '1's in s[0, i)
22
        vector<int> prefix0(n+1, 0), prefix1(n+1, 0);
23
        for (int i = 0; i < n; i++) {
24
            prefix0[i+1] = prefix0[i] + (s[i] == '0');
25
            prefix1[i+1] = prefix1[i] + (s[i] == '1');
26
        }
27
        int totalOnes = prefix1[n];
28
        29
        // We'll binary search for the minimal cost C in the range [0, n].
30
        int low = 0, high = n, ans = n;
31
        while(low <= high) {
32
            int mid = (low + high) / 2;
33
            bool feasible = false;
34
            35
            // For each possible prefix removal (i.e. for each starting index l of the kept substring)
36
            for (int l = 0; l <= n; l++) {
37
                // In the kept substring s[l, r), the zeros count is: prefix0[r] - prefix0[l].
38
                // We require that prefix0[r] - prefix0[l] <= mid.
39
                // That is, prefix0[r] <= prefix0[l] + mid.
40
                // Because prefix0 is non-decreasing, we can use upper_bound:
41
                int allowed = prefix0[l] + mid;
42
                // Find the first index r (in [l, n+1)) where prefix0[r] > allowed.
43
                int r = upper_bound(prefix0.begin() + l, prefix0.end(), allowed) - prefix0.begin();
44
                // Then the maximum r with zeros constraint is r_max = r - 1.
45
                if(r - 1 < l) continue; // should not happen because at least r = l exists.
46
                int r_max = r - 1;
47
                // Ones kept in s[l, r_max) is:
48
                int onesKept = prefix1[r_max] - prefix1[l];
49
                // We need onesKept >= totalOnes - mid.
50
                if(onesKept >= totalOnes - mid) {
51
                    feasible = true;
52
                    break;
53
                }
54
            }
55
            56
            if(feasible) {
57
                ans = mid;
58
                high = mid - 1;
59
            } else {
60
                low = mid + 1;
61
            }
62
        }
63
        64
        cout << ans << ""\n"";
65
    }
66
    return 0;
67
}",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055290
1390055293,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    dp[0][0] = 0
7
8
    for i in range(1, n + 1):
9
        for j in range(k + 1):
10
            dp[i][j] = min(dp[i][j], dp[i - 1][j] + a[i - 1] + j)
11
12
            if j > 0:
13
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
14
15
    min_effort = float('inf')
16
    for j in range(k + 1):
17
        min_effort = min(min_effort, dp[n][j])
18
19
    print(min_effort)
20
21
22
t = int(input())
23
for _ in range(t):
24
    solve()",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055293
1390055292,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    if n==k:
3
        return 0
4
    total_effort = sum(firewalls)
5
    min_effort = total_effort  # Start with no skips
6
    7
    for i in range(n):
8
        if k > 0:  # If we can skip at least one firewall
9
            new_effort = total_effort - firewalls[i]  # Remove the skipped firewall's effort
10
            new_effort += sum(1 for j in range(i + 1, n))  # Increase remaining firewalls' strength
11
            min_effort = min(min_effort, new_effort)  # Keep track of the minimum effort
12
13
    return min_effort
14
15
t = int(input())
16
for _ in range(t):
17
    n, k = map(int, input().split())
18
    firewalls = list(map(int, input().split()))
19
    print(min_effort(n, k, firewalls))
20",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055292
1390055288,unknown,unknown,unknown,"1
#include <cmath>
2
3
#include <cstdio>
4
5
#include <vector>
6
7
#include <iostream>
8
9
#include <algorithm>
10
11
using namespace std;
12
13
int main() {
14
15
    ios::sync_with_stdio(false);
16
17
    cin.tie(nullptr);
18
19
    20
21
    int T;
22
23
    cin >> T;
24
25
    while(T--) {
26
27
        string s;
28
29
        cin >> s;
30
31
        int n = s.size();
32
33
        34
35
36
        vector<int> prefix0(n+1, 0), prefix1(n+1, 0);
37
38
        for (int i = 0; i < n; i++) {
39
40
            prefix0[i+1] = prefix0[i] + (s[i] == '0');
41
42
            prefix1[i+1] = prefix1[i] + (s[i] == '1');
43
44
        }
45
46
        int totalOnes = prefix1[n];
47
48
        49
50
51
        int low = 0, high = n, ans = n;
52
53
        while(low <= high) {
54
55
            int mid = (low + high) / 2;
56
57
            bool feasible = false;
58
59
            60
61
           62
            for (int l = 0; l <= n; l++) {
63
64
               65
                int allowed = prefix0[l] + mid;
66
67
               68
69
                int r = upper_bound(prefix0.begin() + l, prefix0.end(), allowed) - prefix0.begin();
70
71
72
                if(r - 1 < l) continue;  
73
                74
                75
                int r_max = r - 1;
76
77
            78
79
                int onesKept = prefix1[r_max] - prefix1[l];
80
81
               82
83
                if(onesKept >= totalOnes - mid) {
84
85
                    feasible = true;
86
87
                    break;
88
89
                }
90
91
            }
92
93
            94
95
            if(feasible) {
96
97
                ans = mid;
98
99
                high = mid - 1;
100
101
            } else {
102
103
                low = mid + 1;
104
105
            }
106
107
        }
108
109
        110
111
        cout << ans << ""\n"";
112
113
    }
114
115
    return 0;
116
117
}
118",41,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055288
