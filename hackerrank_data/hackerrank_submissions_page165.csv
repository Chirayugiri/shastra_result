submission_id,username,problem_name,language,code,page,url
1390052819,unknown,unknown,unknown,"1
def min_decommissioning_cost(t, test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        7
        # Count total idle and active servers
8
        total_idle = servers.count('0')
9
        total_active = servers.count('1')
10
        11
        # If there are no active servers, cost is 0
12
        if total_active == 0:
13
            results.append(0)
14
            continue
15
        16
        min_cost = float('inf')
17
        18
        left_idle = 0  # Idle servers removed from the left
19
        left_active = 0  # Active servers removed from the left
20
        21
        for i in range(n + 1):  # Try removing from the left
22
            right_idle = total_idle - left_idle
23
            right_active = total_active - left_active
24
            25
            # Try removing from the right as well
26
            for j in range(n + 1 - i):
27
                remaining_idle = right_idle - servers[n - j:].count('0')
28
                removed_active = left_active + servers[n - j:].count('1')
29
                30
                # Cost is max of remaining idle and removed active
31
                cost = max(remaining_idle, removed_active)
32
                min_cost = min(min_cost, cost)
33
            34
            # Update left counters if we haven't processed all characters
35
            if i < n:
36
                if servers[i] == '0':
37
                    left_idle += 1
38
                else:
39
                    left_active += 1
40
        41
        results.append(min_cost)
42
    43
    return results
44
45
# Reading input
46
t = int(input().strip())
47
test_cases = [input().strip() for _ in range(t)]
48
49
# Compute results
50
results = min_decommissioning_cost(t, test_cases)
51
52
# Output results
53
for res in results:
54
    print(res)",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052819
1390052827,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
7
        Scanner sc = new Scanner(System.in);
8
9
        int t = sc.nextInt();
10
11
        while (t-- > 0) {
12
13
            int n = sc.nextInt(), k = sc.nextInt();
14
15
            int[] arr = new int[n];
16
17
            for (int i = 0; i < n; i++) arr[i] = sc.nextInt();
18
19
            Deque<Integer> dq = new LinkedList<>();
20
21
            for (int i = 0; i < n; i++) {
22
23
                if (arr[i] < 0) dq.addLast(i);
24
25
                if (i >= k - 1) {
26
27
                    while (!dq.isEmpty() && dq.peekFirst() < i - k + 1) dq.pollFirst();
28
29
                    System.out.print((dq.isEmpty() ? 0 : arr[dq.peekFirst()]) + "" "");
30
31
                }
32
33
            }
34
35
            System.out.println();
36
37
        }
38
39
        sc.close();
40
41
    }
42
43
}",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052827
1390052826,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()  # Stores indices of negative numbers in the current window
6
7
    # Process first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
12
    # Store the result for the first window
13
    result.append(arr[dq[0]] if dq else 0)
14
15
    # Process the remaining windows
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of the current window
18
        while dq and dq[0] < i - k + 1:
19
            dq.popleft()
20
21
        # Add the new element if it's negative
22
        if arr[i] < 0:
23
            dq.append(i)
24
25
        # Store the result for the current window
26
        result.append(arr[dq[0]] if dq else 0)
27
28
    return result
29
30
31
# Reading input
32
t = int(input().strip())
33
for _ in range(t):
34
    n, k = map(int, input().strip().split())
35
    arr = list(map(int, input().strip().split()))
36
    37
    # Get the result and print it
38
    print("" "".join(map(str, earliest_faulty_readings(arr, k))))
39",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052826
1390052807,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
vector<int> earliest_faulty_readings(vector<int>& arr, int k) {
5
    int n = arr.size();
6
    vector<int> result;
7
    deque<int> dq;  // Stores indices of negative numbers
8
9
    // Process first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) dq.push_back(i);
12
    }
13
14
    // Process the sliding window
15
    for (int i = k; i <= n; i++) {
16
        // Append first negative number in the window
17
        if (!dq.empty()) 
18
            result.push_back(arr[dq.front()]);  // First negative in the deque
19
        else 
20
            result.push_back(0);  // No negative number
21
22
        // Remove elements that are out of the current window
23
        while (!dq.empty() && dq.front() < i - k + 1) {
24
            dq.pop_front();
25
        }
26
27
        // Add the next element if negative
28
        if (i < n && arr[i] < 0) {
29
            dq.push_back(i);
30
        }
31
    }
32
33
    return result;
34
}
35
36
int main() {
37
    int t;
38
    cin >> t;  // Number of test cases
39
    while (t--) {
40
        int n, k;
41
        cin >> n >> k;  // Size of array and batch size
42
        vector<int> arr(n);
43
        for (int i = 0; i < n; i++) {
44
            cin >> arr[i];
45
        }
46
        47
        vector<int> result = earliest_faulty_readings(arr, k);
48
        for (int num : result) {
49
            cout << num << "" "";
50
        }
51
        cout << endl;
52
    }
53
    return 0;
54
}",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052807
1390052811,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()  # To store indices of negative values
6
    7
    for i in range(len(arr)):
8
        # Remove elements that are out of the current window
9
        if dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
12
        # If the current element is faulty, add it to the deque
13
        if arr[i] < 0:
14
            dq.append(i)
15
        16
        # If we have processed at least k elements, find the earliest fault
17
        if i >= k - 1:
18
            result.append(arr[dq[0]] if dq else 0)
19
    20
    return result
21
22
# Read input
23
t = int(input())  # Number of test cases
24
25
for _ in range(t):
26
    n, k = map(int, input().split())  # Read n and k
27
    arr = list(map(int, input().split()))  # Read array elements
28
    29
    # Get the result and print it
30
    print("" "".join(map(str, earliest_faulty_readings(arr, k))))",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052811
1390052816,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
        while (t-- > 0) {
9
            int n = scanner.nextInt();
10
            int k = scanner.nextInt();
11
            int[] a = new int[n];
12
            for (int j = 0; j < n; j++) {
13
                a[j] = scanner.nextInt();
14
            }
15
            solve(n, k, a);
16
        }
17
        scanner.close();
18
    }
19
20
    public static void solve(int n, int k, int[] a) {
21
        long minEffort = Long.MAX_VALUE;
22
23
        for (int i = 0; i < (1 << n); i++) {
24
            int skippedCount = Integer.bitCount(i);
25
26
            if (skippedCount <= k) {
27
                long effort = 0;
28
                int increasedStrength = 0;
29
                int currentSkippedIndex = 0;
30
                int[] skippedIndices = new int[skippedCount];
31
                int skippedIndexPointer = 0;
32
33
                for (int j = 0; j < n; j++) {
34
                    if ((i & (1 << j)) != 0) {
35
                        skippedIndices[skippedIndexPointer++] = j;
36
                    }
37
                }
38
39
                for (int j = 0; j < n; j++) {
40
                    if (currentSkippedIndex < skippedCount && skippedIndices[currentSkippedIndex] == j) {
41
                        increasedStrength++;
42
                        currentSkippedIndex++;
43
                    } else {
44
                        effort += (long) a[j] + increasedStrength;
45
                    }
46
                }
47
                minEffort = Math.min(minEffort, effort);
48
            }
49
        }
50
        System.out.println(minEffort);
51
    }
52
}",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052816
1390052801,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    min_cost = float('inf')
4
    best_left = 0
5
    best_right = 0
6
    7
    # Try all possible combinations of removing servers from left and right
8
    for left in range(n + 1):  # Number of servers to remove from left
9
        for right in range(n + 1 - left):  # Number of servers to remove from right
10
            # The remaining servers after decommissioning
11
            remaining = server_string[left:n-right]
12
            13
            if not remaining:  # If all servers are decommissioned
14
                idle_remaining = 0
15
                active_removed = server_string.count('1')
16
            else:
17
                idle_remaining = remaining.count('0')
18
                19
                # Calculate active servers removed
20
                left_part = server_string[:left]
21
                right_part = server_string[n-right:]
22
                active_removed = left_part.count('1') + right_part.count('1')
23
            24
            # Cost is the maximum of idle remaining and active removed
25
            cost = max(idle_remaining, active_removed)
26
            27
            if cost < min_cost:
28
                min_cost = cost
29
                best_left = left
30
                best_right = right
31
    32
    return min_cost
33
34
def main():
35
    t = int(input().strip())
36
    37
    for _ in range(t):
38
        server_string = input().strip()
39
        result = min_decommission_cost(server_string)
40
        print(result)
41
42
if __name__ == ""__main__"":
43
    main()",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052801
1390052802,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_effort = float('inf')
6
7
    for i in range(1 << n):  
8
        skipped_indices = []
9
        skipped_count = 0
10
        current_effort = 0
11
        current_a = a[:]  
12
13
        for j in range(n):
14
            if (i >> j) & 1:
15
                skipped_indices.append(j)
16
                skipped_count += 1
17
18
        if skipped_count <= k:
19
            skipped_indices.sort()
20
            offset = 0
21
            22
            for j in range(n):
23
                if j in skipped_indices:
24
                    offset+=1
25
                    continue;
26
                else:
27
                    current_effort += current_a[j] + offset;
28
29
            min_effort = min(min_effort, current_effort)
30
31
    print(min_effort)
32
33
T = int(input())
34
for _ in range(T):
35
    solve()",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052802
1390052797,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_faulty_readings(test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        n, k, arr = case
8
        result = []
9
        10
        for i in range(n - k + 1):
11
            batch = arr[i:i+k]
12
            found_fault = False
13
            for num in batch:
14
                if num < 0: 
15
                    result.append(num)
16
                    found_fault = True
17
                    break
18
            if not found_fault:
19
                result.append(0)  
20
        results.append(result)
21
    22
    return results
23
24
t = int(input()) 
25
test_cases = []
26
for _ in range(t):
27
    n, k = map(int, input().split())  
28
    arr = list(map(int, input().split())) 
29
    test_cases.append((n, k, arr))
30
31
32
results = find_faulty_readings(test_cases)
33
for result in results:
34
    print("" "".join(map(str, result)))
35",165,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052797
