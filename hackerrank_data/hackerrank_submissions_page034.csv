submission_id,username,problem_name,language,code,page,url
1390055446,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
    5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):
8
        skipped = []
9
        efforts = []
10
        11
        for j in range(n):
12
            if (i >> j) & 1:
13
                skipped.append(j)
14
            else:
15
                efforts.append(j)
16
        17
        if len(skipped) <= k:
18
            effort = 0
19
            skipped_count = 0
20
            for j in range(n):
21
                if j in skipped:
22
                    skipped_count += 1
23
                else:
24
                    effort += a[j] + skipped_count
25
            min_effort = min(min_effort, effort)
26
    27
    print(min_effort)
28
    29
t = int(input())
30
for _ in range(t):
31
    solve()",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055446
1390055449,unknown,unknown,unknown,"1
def min_cost(server_rack):
2
    n = len(server_rack)
3
    total_zeros = server_rack.count('0')
4
    total_ones = n - total_zeros
5
    min_cost = float('inf')
6
    7
    left = 0
8
    current_zeros = 0
9
    for right in range(n):
10
        if server_rack[right] == '0':
11
            current_zeros += 1
12
        13
        zeros_remaining = current_zeros
14
        ones_removed = total_ones - (right - left + 1 - current_zeros)
15
        16
        cost = max(zeros_remaining, ones_removed)
17
        if cost < min_cost:
18
            min_cost = cost
19
        20
        while left <= right and cost > min_cost:
21
            if server_rack[left] == '0':
22
                current_zeros -= 1
23
            left += 1
24
            zeros_remaining = current_zeros
25
            ones_removed = total_ones - (right - left + 1 - current_zeros)
26
            cost = max(zeros_remaining, ones_removed)
27
            if cost < min_cost:
28
                min_cost = cost
29
    30
    return min_cost
31
32
T = int(input())
33
for _ in range(T):
34
    server_rack = input().strip()
35
    print(min_cost(server_rack))",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055449
1390055450,unknown,unknown,unknown,"1
def compute_min_cost(s):
2
    T = s.count('1')
3
    if T == 0:
4
        return 0
5
    n = len(s)
6
    7
    # Compute x_max_case1: max number of 1's in window of length T
8
    x_max_case1 = 0
9
    if T <= n:
10
        current = sum(1 for c in s[:T] if c == '1')
11
        x_max_case1 = current
12
        for i in range(1, n - T + 1):
13
            if s[i-1] == '1':
14
                current -= 1
15
            if s[i + T - 1] == '1':
16
                current += 1
17
            if current > x_max_case1:
18
                x_max_case1 = current
19
    20
    # Compute x_max_case2: max of min(run_length, T-1) for all runs of 1's
21
    x_max_case2 = 0
22
    current_run = 0
23
    for c in s:
24
        if c == '1':
25
            current_run += 1
26
        else:
27
            if current_run > 0:
28
                candidate = min(current_run, T-1)
29
                if candidate > x_max_case2:
30
                    x_max_case2 = candidate
31
                current_run = 0
32
    # Check the last run
33
    if current_run > 0:
34
        candidate = min(current_run, T-1)
35
        if candidate > x_max_case2:
36
            x_max_case2 = candidate
37
    38
    case1_cost = T - x_max_case1
39
    case2_cost = T - x_max_case2
40
    return min(case1_cost, case2_cost)
41
42
def main():
43
    import sys
44
    input = sys.stdin.read().split()
45
    T_cases = int(input[0])
46
    for i in range(1, T_cases + 1):
47
        s = input[i]
48
        print(compute_min_cost(s))
49
50
if _name_ == ""_main_"":
51
    main()",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055450
1390055442,unknown,unknown,unknown,"1
2
3
4
5
6
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
  9
import java.util.Scanner;
10
11
public class Main {
12
13
    public static void main(String[] args) {
14
15
        Scanner sc = new Scanner(System.in);
16
17
        int T = sc.nextInt();
18
19
        sc.nextLine(); // Consume the newline after T
20
21
        while (T-- > 0) {
22
23
            String s = sc.nextLine().trim();
24
25
            int n = s.length();
26
27
            int totalOnes = 0;
28
29
            int maxConsecutiveOnes = 0;
30
31
            int currentConsecutiveOnes = 0;
32
33
            34
35
            // Calculate totalOnes and maxConsecutiveOnes
36
37
            for (char c : s.toCharArray()) {
38
39
                if (c == '1') {
40
41
                    currentConsecutiveOnes++;
42
43
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
44
45
                    totalOnes++;
46
47
                } else {
48
49
                    currentConsecutiveOnes = 0;
50
51
                }
52
53
            }
54
55
            56
57
            // Handle cases where the cost is trivially 0
58
59
            if (totalOnes == 0) {
60
61
                System.out.println(0);
62
63
                continue;
64
65
            }
66
67
            if (maxConsecutiveOnes == totalOnes) {
68
69
                System.out.println(0);
70
71
                continue;
72
73
            }
74
75
            76
77
            int totalZeros = n - totalOnes;
78
79
            int low = 0;
80
81
            int high = Math.max(totalOnes, totalZeros);
82
83
            int answer = high;
84
85
            86
87
            // Binary search for the minimal possible cost
88
89
            while (low <= high) {
90
91
                int mid = (low + high) / 2;
92
93
                int requiredOnes = Math.max(0, totalOnes - mid);
94
95
                96
97
                if (requiredOnes == 0) {
98
99
                    answer = mid;
100
101
                    high = mid - 1;
102
103
                    continue;
104
105
                }
106
107
                108
109
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
110
111
                if (maxOnes >= requiredOnes) {
112
113
                    answer = mid;
114
115
                    high = mid - 1;
116
117
                } else {
118
119
                    low = mid + 1;
120
121
                }
122
123
            }
124
125
            126
127
            System.out.println(answer);
128
129
        }
130
131
        sc.close();
132
133
    }
134
135
    136
137
    // Helper function to calculate maximum ones in any window with at most k zeros
138
139
    private static int maxOnesWithAtMostKZeros(String s, int k) {
140
141
        int left = 0;
142
143
        int zeros = 0;
144
145
        int maxOnes = 0;
146
147
        int n = s.length();
148
149
        150
151
        for (int right = 0; right < n; right++) {
152
153
            if (s.charAt(right) == '0') {
154
155
                zeros++;
156
157
            }
158
159
            // Shrink the window if zeros exceed k
160
161
            while (zeros > k) {
162
163
                if (s.charAt(left) == '0') {
164
165
                    zeros--;
166
167
                }
168
169
                left++;
170
171
            }
172
173
            // Calculate current number of ones in the window
174
175
            int currentOnes = (right - left + 1) - zeros;
176
177
            maxOnes = Math.max(maxOnes, currentOnes);
178
179
        }
180
181
        182
183
        return maxOnes;
184
185
    }
186
187
}",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055442
1390055443,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
if __name__ == ""__main__"":
60
    T = int(input())
61
    test_cases = [input().strip() for _ in range(T)]
62
    results = min_decommissioning_cost(test_cases)
63
    for result in results:
64
        print(result)",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055443
1390055444,unknown,unknown,unknown,"1
import java.util.*;
2
public class Main {
3
    public static void main(String[] args) {
4
        Scanner sc = new Scanner(System.in);
5
        int t = sc.nextInt();
6
        while (t-- > 0) {
7
            int n = sc.nextInt(), k = sc.nextInt();
8
            int[] a = new int[n];
9
            for (int i = 0; i < n; i++) a[i] = sc.nextInt();
10
            System.out.println(minEffort(n, k, a));
11
        }
12
        sc.close();
13
    }
14
    15
    static long minEffort(int n, int k, int[] a) {
16
        long[] curr = new long[k + 1];
17
        long[] next = new long[k + 1];
18
19
        Arrays.fill(curr, Long.MAX_VALUE);
20
        Arrays.fill(next, Long.MAX_VALUE);
21
22
        Arrays.fill(next, 0);
23
        24
        for (int i = n - 1; i >= 0; i--) {
25
            for (int skip = 0; skip <= k; skip++) {
26
                long takeEffort = a[i] + skip;
27
28
                if (i < n - 1) {
29
                    takeEffort += next[skip];
30
                }
31
32
                long skipEffort = Long.MAX_VALUE;
33
                if (skip < k) {
34
                    skipEffort = next[skip + 1];
35
                }
36
37
                curr[skip] = Math.min(takeEffort, skipEffort);
38
            }
39
40
            long[] temp = next;
41
            next = curr;
42
            curr = temp;
43
        }
44
        45
        return next[0];
46
    }
47
}",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055444
1390055439,unknown,unknown,unknown,"1
def min_decommissioning_cost(rack):
2
    n = len(rack)
3
    prefix_zeros = [0] * (n + 1)
4
    prefix_ones = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_zeros[i+1] = prefix_zeros[i] + (1 if rack[i] == '0' else 0)
7
        prefix_ones[i+1] = prefix_ones[i] + (1 if rack[i] == '1' else 0)
8
    total_zeros = prefix_zeros[n]
9
    total_ones = prefix_ones[n]
10
    min_cost = float('inf')
11
    for i in range(n + 1):
12
        for j in range(n + 1 - i):
13
            if i + j == n:
14
                continue
15
            zeros_removed_start = prefix_zeros[i]
16
            ones_removed_start = prefix_ones[i]
17
            zeros_removed_end = total_zeros - prefix_zeros[n-j]
18
            ones_removed_end = total_ones - prefix_ones[n-j]
19
            remaining_zeros = total_zeros - zeros_removed_start - zeros_removed_end
20
            removed_ones = ones_removed_start + ones_removed_end
21
            cost = max(remaining_zeros, removed_ones)
22
            min_cost = min(min_cost, cost)
23
    return min_cost
24
def solve_test_cases():
25
    t = int(input())  
26
    results = []
27
    for _ in range(t):
28
        rack = input().strip()
29
        result = min_decommissioning_cost(rack)
30
        results.append(result)
31
    return results
32
if __name__ == ""__main__"":
33
    results = solve_test_cases()
34
    for result in results:
35
        print(result)",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055439
1390055441,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommission {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt(); // Number of test cases
7
        scanner.nextLine(); // Consume the newline after the integer input
8
9
        while (T-- > 0) {
10
            String servers = scanner.nextLine();
11
            int n = servers.length();
12
13
            // Total count of 1s and 0s in the entire string
14
            int totalOnes = 0;
15
            int[] onesPrefixSum = new int[n+1]; // Prefix sum array for ones
16
17
            for (int i = 0; i < n; i++) {
18
                totalOnes += servers.charAt(i) == '1' ? 1 : 0;
19
                onesPrefixSum[i+1] = onesPrefixSum[i] + (servers.charAt(i) == '1' ? 1 : 0);
20
            }
21
22
            int minCost = Integer.MAX_VALUE;
23
24
            // Calculate costs for all subarrays between i and j
25
            for (int i = 0; i <= n; i++) {
26
                for (int j = i; j <= n; j++) {
27
                    int onesRemoved = onesPrefixSum[i] + (totalOnes - onesPrefixSum[j]);
28
                    int zeroesRemaining = j - i - (onesPrefixSum[j] - onesPrefixSum[i]);
29
                    int currentCost = Math.max(zeroesRemaining, onesRemoved);
30
                    minCost = Math.min(minCost, currentCost);
31
                }
32
            }
33
34
            System.out.println(minCost);
35
        }
36
37
        scanner.close();
38
    }
39
}",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055441
1390055440,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055440
1390055438,unknown,unknown,unknown,"1
def min_decommission_cost(binary_string):
2
    left = 0
3
    right = len(binary_string) - 1
4
    5
    while left <= right and binary_string[left] == '0':
6
        left += 1
7
    8
    while right >= left and binary_string[right] == '0':
9
        right -= 1
10
    11
    if left > right:
12
        return 0
13
    14
    remaining_zeros = binary_string[left:right+1].count('0')
15
    removed_ones = binary_string[:left].count('1') + binary_string[right+1:].count('1')
16
    17
    return max(remaining_zeros, removed_ones)
18
19
T = int(input())  
20
for _ in range(T):
21
    binary_string = input().strip()
22
    print(min_decommission_cost(binary_string))
23",34,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055438
