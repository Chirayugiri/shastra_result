submission_id,username,problem_name,language,code,page,url
1390054961,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void earliest_faulty_readings(int arr[], int n, int k) {
5
    int i;
6
    int front = 0, rear = 0;  // Deque implemented using an array
7
    int deque[n]; // Stores indices of negative numbers
8
9
    // Process the first window
10
    for (i = 0; i < k; i++) {
11
        if (arr[i] < 0)
12
            deque[rear++] = i;
13
    }
14
15
    // Process rest of the windows
16
    for (i = k; i <= n; i++) {
17
        // Print the first negative number in the current window
18
        if (front < rear)
19
            printf(""%d "", arr[deque[front]]);
20
        else
21
            printf(""0 "");
22
23
        // Remove elements not in this window
24
        while (front < rear && deque[front] < i - k + 1)
25
            front++;
26
27
        // Add the new element if negative
28
        if (i < n && arr[i] < 0)
29
            deque[rear++] = i;
30
    }
31
32
    printf(""\n"");
33
}
34
35
int main() {
36
    int t;
37
    scanf(""%d"", &t);
38
39
    while (t--) {
40
        int n, k;
41
        scanf(""%d %d"", &n, &k);
42
        int arr[n];
43
44
        for (int i = 0; i < n; i++)
45
            scanf(""%d"", &arr[i]);
46
47
        earliest_faulty_readings(arr, n, k);
48
    }
49
50
    return 0;
51
}",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054961
1390054962,unknown,unknown,unknown,"1
def main():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split(""\n"")
5
    6
    t = int(data[0])
7
    index = 1
8
9
    results = []
10
    for _ in range(t):
11
        n, k = map(int, data[index].split())
12
        strengths = list(map(int, data[index + 1].split()))
13
        index += 2
14
        15
        if k >= n:
16
            results.append(""0"")
17
            continue
18
        19
        # Calculate the impact of each firewall: strength + index
20
        impact = [(strengths[i] + i, i) for i in range(n)]
21
        22
        # Sort firewalls by impact (higher impact should be skipped)
23
        impact.sort(reverse=True)
24
        25
        # Select the top k firewalls to skip
26
        to_skip = set(idx for _, idx in impact[:k])
27
        28
        # Compute the minimal effort
29
        effort = 0
30
        skipped = 0
31
        32
        for i in range(n):
33
            if i in to_skip:
34
                skipped += 1
35
            else:
36
                effort += strengths[i] + skipped
37
        38
        results.append(str(effort))
39
    40
    # Print all results at once (faster output handling)
41
    sys.stdout.write(""\n"".join(results) + ""\n"")
42
43
if __name__ == ""__main__"":
44
    main()
45",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054962
1390054963,unknown,unknown,unknown,"1
def min_decommission_cost(s: str) -> int:
2
    n = len(s)
3
    ones_pos = [i for i, ch in enumerate(s) if ch == '1']
4
    T = len(ones_pos)
5
    6
    if T == 0:
7
        return 0
8
    9
    zeros_total = s.count('0')
10
    ans = min(zeros_total, T) 
11
    12
    for X in range(1, T + 1):
13
        for i in range(0, T - X + 1):
14
            left = ones_pos[i]
15
            right = ones_pos[i + X - 1]
16
            length = right - left + 1
17
            zeros_in_block = length - X
18
            candidate = max(zeros_in_block, T - X)
19
            ans = min(ans, candidate)
20
    21
    return ans
22
23
if __name__ == '__main__':
24
    T = int(input().strip())
25
    for _ in range(T):
26
        s = input().strip()
27
        print(min_decommission_cost(s))",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054963
1390054954,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
    left = 0
3
    zeros = 0
4
    max_ones = 0
5
    n = len(s)
6
7
    for right in range(n):
8
        if s[right] == '0':
9
            zeros += 1
10
11
        while zeros > k:
12
            if s[left] == '0':
13
                zeros -= 1
14
            left += 1
15
16
        current_ones = (right - left + 1) - zeros
17
        max_ones = max(max_ones, current_ones)
18
19
    return max_ones
20
21
22
def minimize_cost(t, test_cases):
23
    results = []
24
25
    for s in test_cases:
26
        n = len(s)
27
        total_ones = s.count('1')
28
29
        if total_ones == 0 or total_ones == n:
30
            results.append(0)
31
            continue
32
33
        total_zeros = n - total_ones
34
        low, high = 0, max(total_ones, total_zeros)
35
        answer = high
36
37
        while low <= high:
38
            mid = (low + high) // 2
39
            required_ones = max(0, total_ones - mid)
40
41
            if required_ones == 0:
42
                answer = mid
43
                high = mid - 1
44
                continue
45
46
            max_ones = max_ones_with_at_most_k_zeros(s, mid)
47
48
            if max_ones >= required_ones:
49
                answer = mid
50
                high = mid - 1
51
            else:
52
                low = mid + 1
53
54
        results.append(answer)
55
56
    return results
57
58
59
if __name__ == ""__main__"":
60
    t = int(input())
61
    test_cases = [input().strip() for _ in range(t)]
62
63
    results = minimize_cost(t, test_cases)
64
65
    for res in results:
66
        print(res)",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054954
1390054957,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, arr = case
5
        result = []
6
        for i in range(n - k + 1):
7
            batch = arr[i:i+k]
8
            earliest_fault = 0
9
            for num in batch:
10
                if num < 0:
11
                    earliest_fault = num
12
                    break
13
            result.append(earliest_fault)
14
        results.append(result)
15
    return results
16
17
# Read input
18
t = int(input())
19
test_cases = []
20
for _ in range(t):
21
    n, k = map(int, input().split())
22
    arr = list(map(int, input().split()))
23
    test_cases.append((n, k, arr))
24
25
# Compute results
26
results = earliest_faulty_readings(test_cases)
27
28
# Output results
29
for result in results:
30
    print(' '.join(map(str, result)) + ' ')",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054957
1390054960,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054960
1390054952,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054952
1390054953,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    strengths.sort(reverse=True)
3
    return sum(strengths[k:])
4
5
t = int(input())
6
for _ in range(t):
7
    n, k = map(int, input().split())
8
    strengths = list(map(int, input().split()))
9
    print(min_effort_to_breach(n, k, strengths))",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054953
1390054949,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054949
1390054948,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    prefix_ones = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_ones[i + 1] = prefix_ones[i] + (servers[i] == '1')
7
    8
    total_ones = prefix_ones[n]
9
    min_cost = total_ones  
10
11
    for end in range(n + 1):
12
        active_removed = total_ones - prefix_ones[end]
13
        idle_remaining = end - prefix_ones[end]
14
        min_cost = min(min_cost, max(active_removed, idle_remaining))
15
16
    return min_cost
17
18
t = int(input())
19
for _ in range(t):
20
    servers = input().strip()
21
    print(min_decommissioning_cost(servers))
22",57,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054948
