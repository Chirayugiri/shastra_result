submission_id,username,problem_name,language,code,page,url
1390054613,unknown,unknown,unknown,"1
def decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
7
        for i in range(n + 1):
8
            for j in range(n - i + 1):
9
                remaining_string = case[i:n - j]
10
11
                if not remaining_string:
12
                    removed_count = case[:i].count('1') + case[n - j:].count('1')
13
                    cost = removed_count
14
                else:
15
                    idle_count = remaining_string.count('0')
16
                    removed_count = case[:i].count('1') + case[n - j:].count('1')
17
                    cost = max(idle_count, removed_count)
18
19
                min_cost = min(min_cost, cost)
20
21
        results.append(min_cost)
22
    return results
23
24
# Input parsing
25
T = int(input())
26
test_cases = [input().strip() for _ in range(T)]
27
28
# Call the function and print the results
29
results = decommission_cost(test_cases)
30
for result in results:
31
    print(result)",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054613
1390054616,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    ios::sync_with_stdio(false);
10
    cin.tie(nullptr);
11
    12
    int T;
13
    cin >> T;
14
    while(T--) {
15
        string s;
16
        cin >> s;
17
        int n = s.size();
18
        19
        // Build prefix sums for zeros and ones.
20
        // prefix0[i] = number of '0's in s[0, i)
21
        // prefix1[i] = number of '1's in s[0, i)
22
        vector<int> prefix0(n+1, 0), prefix1(n+1, 0);
23
        for (int i = 0; i < n; i++) {
24
            prefix0[i+1] = prefix0[i] + (s[i] == '0');
25
            prefix1[i+1] = prefix1[i] + (s[i] == '1');
26
        }
27
        int totalOnes = prefix1[n];
28
        29
        // We'll binary search for the minimal cost C in the range [0, n].
30
        int low = 0, high = n, ans = n;
31
        while(low <= high) {
32
            int mid = (low + high) / 2;
33
            bool feasible = false;
34
            35
            // For each possible prefix removal (i.e. for each starting index l of the kept substring)
36
            for (int l = 0; l <= n; l++) {
37
                // In the kept substring s[l, r), the zeros count is: prefix0[r] - prefix0[l].
38
                // We require that prefix0[r] - prefix0[l] <= mid.
39
                // That is, prefix0[r] <= prefix0[l] + mid.
40
                // Because prefix0 is non-decreasing, we can use upper_bound:
41
                int allowed = prefix0[l] + mid;
42
                // Find the first index r (in [l, n+1)) where prefix0[r] > allowed.
43
                int r = upper_bound(prefix0.begin() + l, prefix0.end(), allowed) - prefix0.begin();
44
                // Then the maximum r with zeros constraint is r_max = r - 1.
45
                if(r - 1 < l) continue; // should not happen because at least r = l exists.
46
                int r_max = r - 1;
47
                // Ones kept in s[l, r_max) is:
48
                int onesKept = prefix1[r_max] - prefix1[l];
49
                // We need onesKept >= totalOnes - mid.
50
                if(onesKept >= totalOnes - mid) {
51
                    feasible = true;
52
                    break;
53
                }
54
            }
55
            56
            if(feasible) {
57
                ans = mid;
58
                high = mid - 1;
59
            } else {
60
                low = mid + 1;
61
            }
62
        }
63
        64
        cout << ans << ""\n"";
65
    }
66
    return 0;
67
}",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054616
1390054615,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    firewalls = [(val, i) for i, val in enumerate(firewalls)]
3
    firewalls.sort()
4
    5
    skipped = set()
6
    for i in range(k):
7
        skipped.add(firewalls[i][1])
8
    9
    effort = 0
10
    extra_security = 0
11
    12
    for i in range(n):
13
        if i in skipped:
14
            extra_security += 1
15
        else:
16
            effort += firewalls[i][0] + extra_security
17
    18
    return effort
19
20
def main():
21
    T = int(input())
22
    23
    for _ in range(T):
24
        n, k = map(int, input().split())
25
        firewalls = list(map(int, input().split()))
26
        result = min_effort_to_breach(n, k, firewalls)
27
        print(result)
28
29
if __name__ == ""__main__"":
30
    main()",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054615
1390054610,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    """"""
3
    Calculate the minimum cost of decommissioning servers efficiently.
4
    5
    Args:
6
        servers (str): Binary string representing rack of servers (0 for idle, 1 for active)
7
    8
    Returns:
9
        int: Minimum possible cost
10
    """"""
11
    n = len(servers)
12
    13
    # Precompute prefix and suffix sums for active servers
14
    prefix_active = [0] * (n + 1)
15
    for i in range(n):
16
        prefix_active[i + 1] = prefix_active[i] + (1 if servers[i] == '1' else 0)
17
    18
    suffix_active = [0] * (n + 1)
19
    for i in range(n - 1, -1, -1):
20
        suffix_active[i] = suffix_active[i + 1] + (1 if servers[i] == '1' else 0)
21
    22
    # Total active servers
23
    total_active = prefix_active[n]
24
    25
    min_cost = float('inf')
26
    27
    # Try all possible combinations of removing servers from beginning (i) and end (j)
28
    for i in range(n + 1):
29
        for j in range(n + 1 - i):
30
            if i + j > n:
31
                continue
32
            33
            # Active servers decommissioned
34
            active_decommissioned = prefix_active[i] + suffix_active[n - j]
35
            36
            # Idle servers remaining
37
            remaining_servers = n - i - j
38
            remaining_active = total_active - active_decommissioned
39
            idle_remaining = remaining_servers - remaining_active
40
            41
            cost = max(idle_remaining, active_decommissioned)
42
            min_cost = min(min_cost, cost)
43
    44
    return min_cost
45
46
def main():
47
    # Read number of test cases
48
    t = int(input().strip())
49
    50
    for _ in range(t):
51
        servers = input().strip()
52
        print(min_decommissioning_cost(servers))
53
54
if __name__ == ""__main__"":
55
    main()",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054610
1390054611,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])  # Number of test cases
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())  # Number of firewalls and skips allowed
13
        strengths = list(map(int, data[index + 1].split()))  # Firewall strengths
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if __name__ == ""__main__"":
45
    main()
46",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054611
1390054612,unknown,unknown,unknown,"1
def solve():
2
    import sys, bisect
3
    data = sys.stdin.read().strip().split()
4
    if not data:
5
        return
6
    t = int(data[0])
7
    index = 1
8
    out = []
9
    for _ in range(t):
10
        s = data[index].strip()
11
        index += 1
12
        n = len(s)
13
        P0 = [0]*(n+1)
14
        P1 = [0]*(n+1)
15
        for i in range(n):
16
            P0[i+1] = P0[i] + (1 if s[i]=='0' else 0)
17
            P1[i+1] = P1[i] + (1 if s[i]=='1' else 0)
18
        total_ones = P1[n]
19
        low, high, ans = 0, max(P0[n], total_ones), max(P0[n], total_ones)
20
        def feasible(X):
21
            for L in range(n+1):
22
                threshold = X + P0[L]
23
                R = bisect.bisect_right(P0, threshold) - 1
24
                if R >= L and (P1[R] - P1[L] >= total_ones - X):
25
                    return True
26
            return False
27
        while low <= high:
28
            mid = (low + high) // 2
29
            if feasible(mid):
30
                ans = mid
31
                high = mid - 1
32
            else:
33
                low = mid + 1
34
        out.append(str(ans))
35
    sys.stdout.write(""\n"".join(out))
36
    37
if __name__ == ""__main__"":
38
    solve()
39",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054612
1390054606,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    if k >= n:
3
        return 0
4
    5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            if j <= i - 1: 
13
                dp[i][j] = dp[i-1][j] + strengths[i-1] + j
14
            15
            if j > 0:  
16
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
17
    18
    return min(dp[n])
19
20
def solve_test_case():
21
    n, k = map(int, input().split())
22
    strengths = list(map(int, input().split()))
23
    return min_effort_to_breach(n, k, strengths)
24
25
def main():
26
    t = int(input())
27
    for _ in range(t):
28
        result = solve_test_case()
29
        print(result)
30
31
if __name__ == ""__main__"":
32
    main()",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054606
1390054607,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
3
    dp[0][0] = 0  
4
5
    for i in range(1, n + 1):
6
        for j in range(k + 1):
7
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
8
            if j > 0:
9
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
10
11
    return min(dp[n])
12
13
T = int(input())  
14
for _ in range(T):
15
    n, k = map(int, input().split())  
16
    firewalls = list(map(int, input().split()))  
17
    print(min_effort(n, k, firewalls))
18",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054607
1390054609,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    min_cost = float('inf')
4
5
    for i in range(n + 1):  
6
        for j in range(n + 1 - i): 
7
            if i + j > n:
8
                continue
9
10
            remaining = server_rack[i:n-j]
11
            12
            if not remaining:
13
                continue  
14
            idle_remaining = remaining.count('0')
15
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
16
17
            cost = max(idle_remaining, active_removed)
18
            min_cost = min(min_cost, cost)
19
    20
    return min_cost
21
22
t = int(input())
23
results = []
24
25
for _ in range(t):
26
    server_rack = input().strip()
27
    results.append(min_decommissioning_cost(server_rack))
28
29
for result in results:
30
    print(result)",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054609
1390054604,unknown,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n, k = map(int, input().split())
4
    a = list(map(int, input().split()))
5
    6
    if k >= n:
7
        print(0)
8
        continue
9
    10
    savings = []
11
    for i in range(n):
12
        savings.append((a[i] - (n - i - 1), i))
13
    14
    savings.sort(reverse=True)
15
    16
    to_skip = set()
17
    for i in range(k):
18
        _, idx = savings[i]
19
        to_skip.add(idx)
20
    21
    effort = 0
22
    skipped = 0
23
    24
    for i in range(n):
25
        if i in to_skip:
26
            skipped += 1
27
        else:
28
            effort += a[i] + skipped
29
    30
    print(effort)
31",74,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054604
