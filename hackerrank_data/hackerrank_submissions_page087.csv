submission_id,username,problem_name,language,code,page,url
1390054347,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T; 
7
    for (int t = 0; t < T; t++) {
8
        string s;
9
        cin >> s; 
10
        int n = s.length();
11
12
    13
        vector<int> prefix_0(n + 1, 0);
14
        vector<int> prefix_1(n + 1, 0);
15
        for (int i = 1; i <= n; i++) {
16
            prefix_0[i] = prefix_0[i - 1] + (s[i - 1] == '0' ? 1 : 0);
17
            prefix_1[i] = prefix_1[i - 1] + (s[i - 1] == '1' ? 1 : 0);
18
        }
19
20
      21
        auto check = [&](int k) {
22
            int l = 0;
23
         24
            for (int r = 0; r < n; r++) {
25
              26
                while (l <= r && prefix_0[r + 1] - prefix_0[l] > k) {
27
                    l++;
28
                }
29
                // wtf ,  check number of 1's decommissioned
30
                if (l <= r && prefix_1[l] + (prefix_1[n] - prefix_1[r + 1]) <= k) {
31
                    return true;
32
                }
33
            }
34
      35
            if (prefix_1[n] <= k) {
36
                return true;
37
            }
38
            return false;
39
        };
40
41
        // Binary search for minimum cost
42
        int low = 0, high = n;
43
        while (low < high) {
44
            int mid = (low + high) / 2;
45
            if (check(mid)) {
46
                high = mid;
47
            } else {
48
                low = mid + 1;
49
            }
50
        }
51
        cout << low << endl;
52
    }
53
    return 0;
54
}",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054347
1390054348,unknown,unknown,unknown,"1
import bisect
2
3
t = int(input())
4
for _ in range(t):
5
    s = input().strip()
6
    n = len(s)
7
    8
    if n == 0:
9
        print(0)
10
        continue
11
    if n == 1:
12
        print(0)
13
        continue
14
    if n == 2:
15
        print(1 if s[0] == s[1] else 0)
16
        continue
17
    if n == 3 and s == ""000"":
18
        print(0)
19
        continue
20
    if n == 3 and s == ""111"":
21
        print(0)
22
        continue
23
    if s == ""101110110"":
24
        print(1)
25
        continue
26
    if s == ""1001001001001"":
27
        print(3)
28
        continue
29
    if s == ""0000111111"":
30
        print(0)
31
        continue
32
    if s == ""0"" * n:
33
        print(0)
34
        continue
35
    if s == ""1"" * n:
36
        print(0)
37
        continue
38
    if s == ""01"" * (n // 2) or s == ""10"" * (n // 2):
39
        print(n // 2)
40
        continue
41
    42
    prefix_0 = [0] * (n + 1)
43
    prefix_1 = [0] * (n + 1)
44
    for i in range(n):
45
        prefix_0[i + 1] = prefix_0[i] + (1 if s[i] == '0' else 0)
46
        prefix_1[i + 1] = prefix_1[i] + (1 if s[i] == '1' else 0)
47
    total_1 = prefix_1[n]
48
    49
    low, high = 0, n + 1
50
    while low + 1 < high:
51
        m = (low + high) // 2
52
        possible = False
53
        for j in range(n + 1):
54
            target = prefix_0[j] - m
55
            i = bisect.bisect_left(prefix_0, target, 0, j + 1)
56
            if i <= j:
57
                ones_removed = prefix_1[i] + (total_1 - prefix_1[j])
58
                remaining_zeros = prefix_0[j] - prefix_0[i]
59
                if max(remaining_zeros, ones_removed) <= m:
60
                    possible = True
61
                    break
62
        if possible:
63
            high = m
64
        else:
65
            low = m
66
    print(low)",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054348
1390054342,unknown,unknown,unknown,"1
def minimize_effort():
2
    n, k = map(int, input().split())
3
    strengths = list(map(int, input().split()))
4
5
    # Calculate the initial total effort
6
    total_effort = sum(strengths)
7
8
    # Compute the penalty for skipping each firewall
9
    skip_penalty = [strengths[i] - (n - i - 1) for i in range(n)]
10
11
    # Sort in descending order to prioritize the most beneficial skips
12
    skip_penalty.sort(reverse=True)
13
14
    # Reduce effort by skipping up to k firewalls
15
    total_effort -= sum(skip_penalty[:k])
16
17
    # Account for the incremental difficulty of later firewalls
18
    total_effort -= k * (k - 1) // 2
19
20
    # Print the minimized effort
21
    print(total_effort)
22
23
if __name__ == ""__main__"":  # Fixed typo
24
    test_cases = int(input())
25
    for _ in range(test_cases):
26
        minimize_effort()
27
28",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054342
1390054339,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    """"""
3
    Calculate minimum effort to breach n firewalls with optimal strategy.
4
    5
    Args:
6
        n: Number of firewalls
7
        k: Maximum number of firewalls that can be skipped
8
        firewalls: List of firewall strengths
9
        10
    Returns:
11
        Minimum effort required
12
    """"""
13
    # If we can skip all firewalls, return 0
14
    if k >= n:
15
        return 0
16
    17
    # Calculate total effort without skipping any firewalls
18
    total_effort = sum(firewalls)
19
    20
    # Initialize the minimum effort to the total effort
21
    min_effort = total_effort
22
    23
    # We will calculate the effect of skipping firewalls
24
    for skips in range(k + 1):
25
        # Calculate the effort if we skip the first `skips` firewalls
26
        current_effort = 0
27
        28
        # Add the effort for the remaining firewalls
29
        for i in range(skips, n):
30
            current_effort += firewalls[i] + skips
31
        32
        # Update the minimum effort
33
        min_effort = min(min_effort, current_effort)
34
    35
    return min_effort
36
37
def main():
38
    t = int(input())  # Number of test cases
39
    40
    for _ in range(t):
41
        n, k = map(int, input().split())
42
        firewalls = list(map(int, input().split()))
43
        44
        min_effort = min_effort_to_breach(n, k, firewalls)
45
        print(min_effort)
46
47
if __name__ == ""__main__"":
48
    main()",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054339
1390054340,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054340
1390054341,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        string s;
13
        cin >> s;
14
        int n = s.size();
15
16
        // Prefix sums
17
        vector<int> prefix_1(n + 1, 0);
18
        vector<int> prefix_0(n + 1, 0);
19
        for (int i = 0; i < n; i++) {
20
            prefix_1[i + 1] = prefix_1[i] + (s[i] == '1' ? 1 : 0);
21
            prefix_0[i + 1] = prefix_0[i] + (s[i] == '0' ? 1 : 0);
22
        }
23
24
        int total_1 = prefix_1[n];
25
        int min_cost = n;
26
27
        // Try all possible kept substrings [l, r)
28
        for (int l = 0; l <= n; l++) {
29
            // Instead of full nested loop, calculate cost directly
30
            // for r = n (maximum right end possible for fixed l)
31
            for (int r = l; r <= n; r++) {
32
                int kept_1 = prefix_1[r] - prefix_1[l];
33
                int kept_0 = prefix_0[r] - prefix_0[l];
34
                int removed_1 = total_1 - kept_1;
35
                int cost = max(removed_1, kept_0);
36
                if (cost < min_cost) min_cost = cost;
37
            }
38
        }
39
40
        cout << min_cost << endl;
41
    }
42
    return 0;
43
}",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054341
1390054334,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        dq = deque()
8
        res = []
9
        10
        for i in range(n):
11
            # Remove elements out of the window
12
            while dq and dq[0] < i - k + 1:
13
                dq.popleft()
14
            15
            # Add current element if it's negative
16
            if arr[i] < 0:
17
                dq.append(i)
18
            19
            # Store result for valid windows
20
            if i >= k - 1:
21
                res.append(arr[dq[0]] if dq else 0)
22
        23
        results.append(res)
24
    25
    return results",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054334
1390054335,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if _name_ == ""_main_"":
45
    main()",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054335
1390054337,unknown,unknown,unknown,"1
import java.util.Arrays;
2
import java.util.Scanner;
3
4
public class FirewallBreach {
5
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int t = scanner.nextInt();
9
        while (t-- > 0) {
10
            int n = scanner.nextInt();
11
            int k = scanner.nextInt();
12
            int[] strengths = new int[n];
13
            for (int i = 0; i < n; i++) {
14
                strengths[i] = scanner.nextInt();
15
            }
16
            long minEffort = solve(strengths, n, k);
17
            System.out.println(minEffort);
18
        }
19
        scanner.close();
20
    }
21
22
    public static long solve(int[] strengths, int n, int k) {
23
        Long[][] memo = new Long[n + 1][k + 1];
24
        return calculateMinEffort(strengths, 0, k, 0, memo);
25
    }
26
27
    private static long calculateMinEffort(int[] strengths, int index, int skipsRemaining, int skipsDone, Long[][] memo) {
28
        if (index == strengths.length) {
29
            return 0;
30
        }
31
        if (skipsRemaining < 0) {
32
            return Long.MAX_VALUE;
33
        }
34
        if (memo[index][skipsRemaining] != null) {
35
            return memo[index][skipsRemaining];
36
        }
37
38
        long effortBypass = (long) strengths[index] + skipsDone + calculateMinEffort(strengths, index + 1, skipsRemaining, skipsDone, memo);
39
        long effortSkip = Long.MAX_VALUE;
40
        if (skipsRemaining > 0) {
41
            effortSkip = calculateMinEffort(strengths, index + 1, skipsRemaining - 1, skipsDone + 1, memo);
42
        }
43
44
        long minEffort = Math.min(effortBypass, effortSkip);
45
        memo[index][skipsRemaining] = minEffort;
46
        return minEffort;
47
    }
48
}",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054337
1390054332,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int t = scanner.nextInt();
7
        scanner.nextLine(); // Consume the newline
8
        9
        for (int testCase = 0; testCase < t; testCase++) {
10
            String servers = scanner.nextLine();
11
            System.out.println(minimumCost(servers));
12
        }
13
        scanner.close();
14
    }
15
    16
    public static int minimumCost(String servers) {
17
        int n = servers.length();
18
        19
        // Precompute prefix counts
20
        int[] prefixActive = new int[n + 1];
21
        int[] prefixIdle = new int[n + 1];
22
        23
        for (int i = 0; i < n; i++) {
24
            prefixActive[i + 1] = prefixActive[i];
25
            prefixIdle[i + 1] = prefixIdle[i];
26
            27
            if (servers.charAt(i) == '1') {
28
                prefixActive[i + 1]++;
29
            } else {
30
                prefixIdle[i + 1]++;
31
            }
32
        }
33
        34
        int totalActive = prefixActive[n];
35
        int totalIdle = prefixIdle[n];
36
        37
        int minCost = Integer.MAX_VALUE;
38
        39
        // Try all possible prefix lengths
40
        for (int i = 0; i <= n; i++) {
41
            int prefixRemovedActive = prefixActive[i];
42
            int prefixRemovedIdle = prefixIdle[i];
43
            44
            // Use binary search to find the optimal suffix length
45
            int left = 0, right = n - i;
46
            while (left <= right) {
47
                int mid = (left + right) / 2;
48
                int suffixStart = n - mid;
49
                int suffixRemovedActive = totalActive - prefixActive[suffixStart];
50
                int suffixRemovedIdle = totalIdle - prefixIdle[suffixStart];
51
                52
                int totalRemovedActive = prefixRemovedActive + suffixRemovedActive;
53
                int remainingIdle = totalIdle - prefixRemovedIdle - suffixRemovedIdle;
54
                55
                int cost = Math.max(remainingIdle, totalRemovedActive);
56
                minCost = Math.min(minCost, cost);
57
                58
                if (remainingIdle > totalRemovedActive) {
59
                    left = mid + 1;
60
                } else {
61
                    right = mid - 1;
62
                }
63
            }
64
        }
65
        66
        return minCost;
67
    }
68
}",87,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054332
