submission_id,username,problem_name,language,code,page,url
1390054710,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        result = []
8
        dq = deque()
9
        10
        # Process first window
11
        for i in range(k):
12
            if arr[i] < 0:
13
                dq.append(i)
14
        15
        # Store the first result
16
        result.append(arr[dq[0]] if dq else 0)
17
        18
        # Process remaining windows
19
        for i in range(k, n):
20
            # Remove elements no longer in window
21
            if dq and dq[0] <= i - k:
22
                dq.popleft()
23
            24
            # Add new element if it's faulty
25
            if arr[i] < 0:
26
                dq.append(i)
27
            28
            # Store result for current window
29
            result.append(arr[dq[0]] if dq else 0)
30
        31
        results.append("" "".join(map(str, result)))
32
    33
    return results
34
35
# Read input
36
t = int(input())
37
test_cases = []
38
for _ in range(t):
39
    n, k = map(int, input().split())
40
    arr = list(map(int, input().split()))
41
    test_cases.append((n, k, arr))
42
43
# Compute and print output
44
for res in earliest_faulty_readings(test_cases):
45
    print(res)",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054710
1390054711,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include <climits>
7
using namespace std;
8
9
int minEffort(vector<int>& firewalls, int n, int k){
10
    int mineffort = INT_MAX;
11
    for(int skip = 0; skip<=k && skip<=n; skip++){
12
        int effort = 0;
13
        for(int i=skip; i<n; i++){
14
            effort += firewalls[i] + skip;
15
        }
16
        mineffort = mineffort<=effort? mineffort:effort;
17
    }
18
    return mineffort;
19
}
20
21
int main() {
22
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
23
    int t;
24
    cin>>t;
25
    while(t--){
26
        int n, k;
27
        cin>>n>>k;
28
        vector<int> firewalls(n);
29
        for(int i=0; i<n; i++){
30
            cin>>firewalls[i];
31
        }
32
        cout<<minEffort(firewalls, n, k)<<endl;
33
    }
34
    return 0;
35
}
36",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054711
1390054712,unknown,unknown,unknown,"1
import sys
2
3
def min_decommission_cost(server_string):
4
    n = len(server_string)
5
    total_ones = server_string.count('1')
6
7
    # Edge cases: If all are '0's or all are '1's
8
    if total_ones == 0 or total_ones == n:
9
        return 0
10
11
    min_cost = float('inf')
12
13
    # Sliding window for size `k`
14
    for k in range(1, n):  # We keep segments of size `k`
15
        ones_in_window = 0
16
        # Initial window calculation
17
        for i in range(k):
18
            if server_string[i] == '1':
19
                ones_in_window += 1
20
        21
        # Compute cost for first window
22
        zeros_in_window = k - ones_in_window
23
        ones_removed = total_ones - ones_in_window
24
        min_cost = min(min_cost, max(zeros_in_window, ones_removed))
25
26
        # Slide window across string
27
        for i in range(k, n):
28
            if server_string[i - k] == '1':
29
                ones_in_window -= 1  # Remove outgoing element
30
            if server_string[i] == '1':
31
                ones_in_window += 1  # Add incoming element
32
33
            zeros_in_window = k - ones_in_window
34
            ones_removed = total_ones - ones_in_window
35
            min_cost = min(min_cost, max(zeros_in_window, ones_removed))
36
37
    return min_cost
38
39
def solve():
40
    t = int(sys.stdin.readline().strip())
41
    results = []
42
43
    for _ in range(t):
44
        server_string = sys.stdin.readline().strip()
45
        results.append(str(min_decommission_cost(server_string)))
46
47
    sys.stdout.write(""\n"".join(results) + ""\n"")
48
49
# Run the function
50
solve()
51",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054712
1390054703,unknown,unknown,unknown,"1
def min_cost_server_pruning(server_rack):
2
    n = len(server_rack)
3
    min_cost = float('inf')
4
    5
    for i in range(n + 1):
6
        for j in range(n + 1 - i):
7
            remaining = server_rack[i:n-j]
8
            idle_remaining = remaining.count('0')
9
            10
            removed_start = server_rack[:i].count('1')
11
            removed_end = server_rack[n-j:].count('1')
12
            active_decommissioned = removed_start + removed_end
13
            14
            cost = max(idle_remaining, active_decommissioned)
15
            min_cost = min(min_cost, cost)
16
    17
    return min_cost
18
19
t = int(input())
20
for _ in range(t):
21
    server_rack = input().strip()
22
    print(min_cost_server_pruning(server_rack))",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054703
1390054702,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054702
1390054706,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
    # This deque will store indices of the negative numbers in the current window
5
    dq = deque()
6
    result = []
7
    8
    for i in range(len(arr)):
9
        # If current element is negative, add its index
10
        if arr[i] < 0:
11
            dq.append(i)
12
        13
        # When we've reached at least one complete window, record the answer
14
        if i >= k - 1:
15
            # Remove indices that are out of the current window (i-k+1 is window's start index)
16
            while dq and dq[0] < i - k + 1:
17
                dq.popleft()
18
            19
            # If the deque is not empty, the front element is the earliest negative in the window
20
            if dq:
21
                result.append(arr[dq[0]])
22
            else:
23
                result.append(0)
24
    25
    return result
26
27
# Reading input and processing test cases
28
if __name__ == ""__main__"":
29
    t = int(input().strip())  # Number of test cases
30
    for _ in range(t):
31
        n, k = map(int, input().strip().split())
32
        arr = list(map(int, input().strip().split()))
33
        output = earliest_faults(arr, k)
34
        print("" "".join(map(str, output)))",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054706
1390054698,unknown,unknown,unknown,"1
import sys
2
3
def minimize_server_shutdown_cost():
4
    num_cases = int(sys.stdin.readline().strip())
5
    6
    for _ in range(num_cases):
7
        server_status = sys.stdin.readline().strip()
8
        9
        active_servers = [index for index, state in enumerate(server_status) if state == '1']
10
        total_active = len(active_servers)
11
        12
        # If no active servers or already consecutive, no operations needed
13
        if total_active == 0 or active_servers[-1] - active_servers[0] == total_active - 1:
14
            print(0)
15
            continue
16
        17
        low, high = 0, total_active
18
        19
        while high - low > 1:
20
            mid_point = (low + high) // 2
21
            servers_to_keep = total_active - mid_point
22
            23
            is_possible = False
24
            for i in range(mid_point + 1):
25
                first, last = active_servers[i], active_servers[i + servers_to_keep - 1]
26
                if (last - first + 1) - servers_to_keep <= mid_point:
27
                    is_possible = True
28
                    break
29
            30
            if is_possible:
31
                high = mid_point
32
            else:
33
                low = mid_point
34
        35
        print(high)
36
37
if __name__ == ""__main__"":
38
    minimize_server_shutdown_cost()
39",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054698
1390054700,unknown,unknown,unknown,"1
def decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
7
        for i in range(n + 1):
8
            for j in range(n - i + 1):
9
                remaining_string = case[i:n - j]
10
11
                if not remaining_string:
12
                    removed_count = case[:i].count('1') + case[n - j:].count('1')
13
                    cost = removed_count
14
                else:
15
                    idle_count = remaining_string.count('0')
16
                    removed_count = case[:i].count('1') + case[n - j:].count('1')
17
                    cost = max(idle_count, removed_count)
18
19
                min_cost = min(min_cost, cost)
20
21
        results.append(min_cost)
22
    return results
23
24
# Input parsing
25
T = int(input())
26
test_cases = [input().strip() for _ in range(T)]
27
28
# Call the function and print the results
29
results = decommission_cost(test_cases)
30
for result in results:
31
    print(result)",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054700
1390054701,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    4
    if k == 0:
5
        return total_effort
6
    7
    min_effort = total_effort
8
    9
    for i in range(n - k + 1):
10
        skipped = sum(firewalls[i:i+k])
11
        penalty = sum(range(1, n - (i + k) + 1))
12
        effort = total_effort - skipped + penalty
13
        min_effort = min(min_effort, effort)
14
    15
    return min_effort
16
17
def main():
18
    T = int(input())
19
    20
    for _ in range(T):
21
        n, k = map(int, input().split())
22
        firewalls = list(map(int, input().split()))
23
        print(min_effort_to_breach(n, k, firewalls))
24
25
if __name__ == ""__main__"":
26
    main()
27",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054701
1390054697,unknown,unknown,unknown,"1
class FirewallBreach {
2
3
    public static void main(String[] args) {
4
        Scanner scanner = new Scanner(System.in);
5
        int t = scanner.nextInt();
6
        while (t-- > 0) {
7
            String serverRack = scanner.next();
8
            int minCost = calculateMinCost(serverRack);
9
            System.out.println(minCost);
10
        }
11
        scanner.close();
12
    }
13
14
    public static int calculateMinCost(String serverRack) {
15
        int n = serverRack.length();
16
        int min_cost = n; // Initialize with maximum possible cost
17
18
        for (int removedPrefixCount = 0; removedPrefixCount <= n; ++removedPrefixCount) {
19
            for (int removedSuffixCount = 0; removedSuffixCount <= n - removedPrefixCount; ++removedSuffixCount) {
20
                int current_idle_servers = 0;
21
                int current_active_removed = 0;
22
23
                // Count removed active servers (prefix)
24
                for (int i = 0; i < removedPrefixCount; ++i) {
25
                    if (serverRack.charAt(i) == '1') {
26
                        current_active_removed++;
27
                    }
28
                }
29
                // Count removed active servers (suffix)
30
                for (int i = n - removedSuffixCount; i < n; ++i) {
31
                    if (serverRack.charAt(i) == '1') {
32
                        current_active_removed++;
33
                    }
34
                }
35
36
                // Count remaining idle servers
37
                for (int i = removedPrefixCount; i < n - removedSuffixCount; ++i) {
38
                    if (serverRack.charAt(i) == '0') {
39
                        current_idle_servers++;
40
                    }
41
                }
42
43
                int cost = Math.max(current_idle_servers, current_active_removed);
44
                min_cost = Math.min(min_cost, cost);
45
            }
46
        }
47
        return min_cost;
48
    }
49
}",70,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054697
