submission_id,username,problem_name,language,code,page,url
1390053322,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] arr = new int[n];
11
            for (int i = 0; i < n; i++) arr[i] = sc.nextInt();
12
13
            long minEffort = Long.MAX_VALUE;
14
15
            // Case when skipping 0 to k firewalls
16
            if (k >= n) {
17
                // Skip all firewalls
18
                System.out.println(0);
19
                continue;
20
            }
21
22
            // Try all combinations where we skip up to k firewalls
23
            // For k=1, try skipping each firewall one by one
24
            // General approach:
25
            boolean[] skip = new boolean[n];
26
            // Priority Queue to skip k largest firewalls
27
            PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);
28
29
            for (int i = 0; i < n; i++) {
30
                pq.add(new int[]{arr[i], i});
31
            }
32
33
            for (int s = 0; s <= k; s++) {
34
                Arrays.fill(skip, false);
35
                PriorityQueue<int[]> temp = new PriorityQueue<>(pq);
36
37
                // Skip 's' largest firewalls
38
                for (int j = 0; j < s; j++) {
39
                    int[] top = temp.poll();
40
                    skip[top[1]] = true;
41
                }
42
43
                long effort = 0;
44
                int skipped = 0;
45
                for (int i = 0; i < n; i++) {
46
                    if (skip[i]) {
47
                        skipped++;
48
                    } else {
49
                        effort += arr[i] + skipped;
50
                    }
51
                }
52
53
                minEffort = Math.min(minEffort, effort);
54
            }
55
56
            System.out.println(minEffort);
57
        }
58
        sc.close();
59
    }
60
}",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053322
1390053326,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    min_cost = float('inf')
5
6
    for i in range(n + 1):
7
        for j in range(n - i + 1):
8
            remaining_s = s[i:n - j]
9
            10
            idle_count = remaining_s.count('0')
11
            active_removed = s[:i].count('1') + s[n - j:].count('1')
12
            13
            cost = max(idle_count, active_removed)
14
            min_cost = min(min_cost, cost)
15
            16
    print(min_cost)
17
18
t = int(input())
19
for _ in range(t):
20
    solve()",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053326
1390053327,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053327
1390053317,unknown,unknown,unknown,"1
def solve():
2
    server_rack = input().strip()
3
    n = len(server_rack)
4
    min_cost = float('inf')
5
6
    for left_remove_count in range(n + 1):
7
        for right_remove_count in range(n - left_remove_count + 1):
8
            removed_prefix = server_rack[:left_remove_count]
9
            removed_suffix = server_rack[n - right_remove_count:]
10
            remaining_rack = server_rack[left_remove_count:n - right_remove_count]
11
12
            idle_remaining = remaining_rack.count('0')
13
            active_removed = removed_prefix.count('1') + removed_suffix.count('1')
14
            cost = max(idle_remaining, active_removed)
15
            min_cost = min(min_cost, cost)
16
17
    print(min_cost)
18
19
T = int(input())
20
for _ in range(T):
21
    solve()",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053317
1390053320,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static int minEffort(int[] firewalls, int k) {
7
        int n = firewalls.length;
8
        if (k >= n) return 0;
9
10
        int[][] dp = new int[n + 1][k + 1];
11
        for (int[] row : dp) Arrays.fill(row, Integer.MAX_VALUE);
12
13
        for (int j = 0; j <= k; j++) dp[n][j] = 0;
14
15
        for (int i = n - 1; i >= 0; i--) {
16
            for (int j = 0; j <= k; j++) {
17
                if (j < k) dp[i][j] = dp[i + 1][j + 1];
18
                int effort = firewalls[i] + j;
19
                dp[i][j] = Math.min(dp[i][j], effort + dp[i + 1][j]);
20
            }
21
        }
22
23
        return dp[0][0];
24
    }
25
26
    public static void main(String[] args) {
27
        Scanner sc = new Scanner(System.in);
28
        int t = sc.nextInt();
29
30
        while (t-- > 0) {
31
            int n = sc.nextInt();
32
            int k = sc.nextInt();
33
            int[] firewalls = new int[n];
34
35
            for (int i = 0; i < n; i++) {
36
                firewalls[i] = sc.nextInt();
37
            }
38
39
            System.out.println(minEffort(firewalls, k));
40
        }
41
42
        sc.close();
43
    }
44
}
45",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053320
1390053318,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053318
1390053313,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053313
1390053314,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_earliest_faults(test_cases):
4
5
    results = []
6
7
    8
9
    for n, k, arr in test_cases:
10
11
        dq = deque()  # Store indices of negative elements
12
13
        res = []
14
15
        # Process first window
16
17
        for i in range(k):
18
19
            if arr[i] < 0:
20
21
                dq.append(i)
22
23
        # Store result for first window
24
25
        res.append(arr[dq[0]] if dq else 0)
26
27
        # Process remaining windows
28
29
        for i in range(k, n):
30
31
            # Remove elements not in the current window
32
33
            while dq and dq[0] < i - k + 1:
34
35
                dq.popleft()
36
37
            # Add new element if it's negative
38
39
            if arr[i] < 0:
40
41
                dq.append(i)
42
43
            # Store result for this batch
44
45
            res.append(arr[dq[0]] if dq else 0)
46
47
        results.append("" "".join(map(str, res)))
48
49
    return results
50
51
# Read input
52
53
t = int(input())  # Number of test cases
54
55
test_cases = []
56
57
for _ in range(t):
58
59
    n, k = map(int, input().split())  # Size of array and batch size
60
61
    arr = list(map(int, input().split()))  # Array elements
62
63
    test_cases.append((n, k, arr))
64
65
# Processing and printing output
66
67
for result in find_earliest_faults(test_cases):
68
69
    print(result)",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053314
1390053312,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
    result = []
3
    for i in range(len(arr) - k + 1):
4
        for num in arr[i:i+k]:
5
            if num < 0:
6
                result.append(num)
7
                break
8
        else:
9
            result.append(0)
10
    return result
11
12
t = int(input())
13
for _ in range(t):
14
    n, k = map(int, input().split())
15
    arr = list(map(int, input().split()))
16
    print(*earliest_fault(arr, k))
17",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053312
1390053311,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        # Calculate the potential reduction for each firewall if skipped
6
        # Reduction for a[i] is a[i] - (number of firewalls after it) * 1
7
        # Because skipping it increases the strength of all subsequent firewalls by 1
8
        # So, the net reduction is a[i] - (n - i - 1)
9
        reductions = []
10
        for i in range(n):
11
            reductions.append(a[i] - (n - i - 1))
12
        13
        # Select the top k reductions (most positive)
14
        # If a reduction is negative, it's better not to skip that firewall
15
        # So, we only consider positive reductions
16
        positive_reductions = [r for r in reductions if r > 0]
17
        positive_reductions.sort(reverse=True)
18
        19
        # Take the top min(k, len(positive_reductions)) reductions
20
        skip_count = min(k, len(positive_reductions))
21
        total_reduction = sum(positive_reductions[:skip_count])
22
        23
        # Calculate the total effort
24
        # Initial total effort is sum(a)
25
        # After skipping, the total effort is sum(a) - total_reduction
26
        # Because the skipped firewalls are reduced by their a[i], but the subsequent firewalls are increased by skip_count
27
        # Wait, no. The total effort is sum(a) - sum of a[i] for skipped firewalls + skip_count * (number of firewalls after the last skipped firewall)
28
        # This is getting complicated. Let's think differently.
29
        30
        # Alternative approach:
31
        # Sort the firewalls in descending order of a[i] - (n - i - 1)
32
        # Skip the top k firewalls in this order
33
        # Calculate the total effort accordingly
34
        35
        # Let's implement this alternative approach
36
        # Create a list of tuples (a[i], i)
37
        firewall_indices = [(a[i], i) for i in range(n)]
38
        # Sort by a[i] - (n - i - 1) in descending order
39
        firewall_indices.sort(key=lambda x: x[0] - (n - x[1] - 1), reverse=True)
40
        41
        # Select the top k firewalls to skip
42
        skip_indices = set()
43
        for i in range(min(k, n)):
44
            skip_indices.add(firewall_indices[i][1])
45
        46
        # Calculate the total effort
47
        total_effort = 0
48
        increase = 0
49
        for i in range(n):
50
            if i in skip_indices:
51
                increase += 1
52
            else:
53
                total_effort += a[i] + increase
54
        55
        results.append(total_effort)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = []
61
for _ in range(T):
62
    n, k = map(int, input().split())
63
    a = list(map(int, input().split()))
64
    test_cases.append((n, k, a))
65
66
# Compute results
67
results = min_effort(test_cases)
68
69
# Output results
70
for res in results:
71
    print(res)",142,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053311
