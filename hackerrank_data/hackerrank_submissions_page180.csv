submission_id,username,problem_name,language,code,page,url
1390052397,unknown,unknown,unknown,"1
from collections import deque
2
3
def faulty_readings(num_testcases, testcases):
4
    results = []
5
6
    for i in range(num_testcases):
7
        n, k = testcases[i][0]  
8
        arr = testcases[i][1]  
9
        10
        dq = deque() 
11
        result = []
12
        for j in range(k):
13
            if arr[j] < 0:
14
                dq.append(j)
15
        result.append(arr[dq[0]] if dq else 0)
16
17
        for j in range(k, n):
18
            while dq and dq[0] < j - k + 1:
19
                dq.popleft()
20
21
            if arr[j] < 0:
22
                dq.append(j)
23
24
            result.append(arr[dq[0]] if dq else 0)
25
26
        results.append(result)
27
28
    return results
29
30
if __name__ == ""__main__"":
31
    num_testcases = int(input().strip())  
32
    testcases = []
33
    for _ in range(num_testcases):
34
        n, k = map(int, input().strip().split())  
35
        arr = list(map(int, input().strip().split()))  
36
        testcases.append(((n, k), arr))  
37
38
    results = faulty_readings(num_testcases, testcases)
39
40
    for result in results:
41
        print("" "".join(map(str, result)))  
42
43",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052397
1390052398,unknown,unknown,unknown,"1
def min_decommission_cost(binary_string):
2
    n = len(binary_string)
3
    4
    # Step 1: Find the first and last occurrence of '1'
5
    first_one = binary_string.find('1')
6
    last_one = binary_string.rfind('1')
7
8
    # If there are no active servers, cost is 0
9
    if first_one == -1:
10
        return 0  
11
12
    # Step 2: Extract the ""core"" part (between first and last '1')
13
    core_section = binary_string[first_one:last_one + 1]
14
15
    # Step 3: Compute values needed for the cost calculation
16
    remaining_idle = core_section.count('0')  # Count of '0's inside the core
17
    removed_active = binary_string[:first_one].count('1') + binary_string[last_one + 1:].count('1')
18
19
    return max(remaining_idle, removed_active)
20
21
# Read input
22
T = int(input())  # Number of test cases
23
for _ in range(T):
24
    binary_string = input().strip()
25
    print(min_decommission_cost(binary_string))
26",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052398
1390052399,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
8
    # Process first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
13
    # Process all sliding windows
14
    for i in range(n - k + 1):
15
        # Append first negative in current window
16
        if dq:
17
            result.append(arr[dq[0]])
18
        else:
19
            result.append(0)
20
21
        # Remove elements that are out of window
22
        while dq and dq[0] < i + 1:
23
            dq.popleft()
24
25
        # Add next element if negative
26
        if i + k < n and arr[i + k] < 0:
27
            dq.append(i + k)
28
29
    print(*result)
30
31
# Reading input
32
t = int(input())
33
for _ in range(t):
34
    n, k = map(int, input().split())
35
    arr = list(map(int, input().split()))
36
    earliest_faulty_readings(arr, k)
37",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052399
1390052388,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
#include <limits.h>
4
5
int minDecommissionCost(char *rack) {
6
    int n = strlen(rack);
7
    int first = -1, last = -1;
8
    9
    for (int i = 0; i < n; i++) {
10
        if (rack[i] == '1') {
11
            if (first == -1) first = i;
12
            last = i;
13
        }
14
    }
15
    16
    if (first == -1) return 0;
17
    18
    int zeroCount = 0, oneCount = 0;
19
    for (int i = first; i <= last; i++) {
20
        if (rack[i] == '0') zeroCount++;
21
        else oneCount++;
22
    }
23
    24
    return (zeroCount > oneCount) ? oneCount : zeroCount;
25
}
26
27
int main() {
28
    int t;
29
    scanf(""%d"", &t);
30
    while (t--) {
31
        char rack[100005];
32
        scanf(""%s"", rack);
33
        printf(""%d\n"", minDecommissionCost(rack));
34
    }
35
    return 0;
36
}",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052388
1390052394,unknown,unknown,unknown,"1
def faulty_sensor_readings(arr, k):
2
    """"""
3
    Determines the earliest faulty reading for each consecutive batch of size k.
4
5
    Args:
6
        arr: A list of sensor readings.
7
        k: The batch size.
8
9
    Returns:
10
        A list containing the earliest faulty reading for each batch.
11
    """"""
12
    result = []
13
    for i in range(len(arr) - k + 1):
14
        batch = arr[i:i + k]
15
        fault = 0
16
        for num in batch:
17
            if num < 0:
18
                fault = num
19
                break
20
        result.append(fault)
21
    return result
22
23
if __name__ == ""__main__"":
24
    t = int(input())
25
    for _ in range(t):
26
        n, k = map(int, input().split())
27
        arr = list(map(int, input().split()))
28
        result = faulty_sensor_readings(arr, k)
29
        print(*result)",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052394
1390052389,unknown,unknown,unknown,"1
t = int(input())
2
for i in range(t):  
3
    n, k = map(int, input().split())
4
    arr = list(map(int, input().split()))
5
    6
    res = []
7
    for i in range(n - k + 1):
8
        for j in range(i, i + k):
9
            if arr[j] < 0:
10
                res.append(arr[j])
11
                break
12
        else:
13
            res.append(0)
14
    15
    print("" "".join(map(str, res)))
16",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052389
1390052382,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()  # Stores indices of negative numbers
6
7
    # Process the first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
12
    # Process each window
13
    for i in range(len(arr) - k + 1):
14
        # If deque is not empty, first element is the first negative in window
15
        if dq:
16
            result.append(arr[dq[0]])
17
        else:
18
            result.append(0)
19
20
        # Slide window: Remove elements out of range
21
        if dq and dq[0] == i:
22
            dq.popleft()
23
24
        # Add next element in the window
25
        if i + k < len(arr) and arr[i + k] < 0:
26
            dq.append(i + k)
27
28
    return result
29
30
# Read input
31
t = int(input())  # Number of test cases
32
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Array size and batch size
35
    arr = list(map(int, input().split()))  # Sensor readings
36
37
    # Process and output result
38
    print(*earliest_faulty_readings(arr, k))
39",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052382
1390052378,unknown,unknown,unknown,"1
def min_effort_to_breach(test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        min_effort = float('inf')
6
7
        for i in range(n - k + 1):
8
            effort = 0
9
            skip_count = 0
10
11
            for j in range(n):
12
                if i <= j < i + k:
13
                    skip_count += 1  # Skipping this firewall
14
                else:
15
                    effort += firewalls[j] + skip_count  # Adding the firewall's strength + penalty
16
            17
            min_effort = min(min_effort, effort)
18
19
        results.append(str(min_effort))
20
    21
    return ""\n"".join(results)
22
23
t = int(input())
24
test_cases = [tuple(map(int, input().split())) + (list(map(int, input().split())),) for _ in range(t)]
25
26
print(min_effort_to_breach(test_cases))
27",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052378
1390052385,unknown,unknown,unknown,"1
def earliest_fault(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, arr = case
5
        batch_results = []
6
        7
        for i in range(n - k + 1):
8
            batch = arr[i:i + k]
9
            fault = next((x for x in batch if x < 0), 0)
10
            batch_results.append(fault)
11
        12
        results.append(batch_results)
13
    14
    return results
15
16
import sys
17
input_data = sys.stdin.read()
18
19
lines = input_data.splitlines()
20
21
t = int(lines[0])
22
test_cases = []
23
24
index = 1
25
for _ in range(t):
26
    27
    n, k = map(int, lines[index].split())
28
    index += 1
29
    30
    arr = list(map(int, lines[index].split()))
31
    index += 1
32
    33
    test_cases.append((n, k, arr))
34
results = earliest_fault(test_cases)
35
for result in results:
36
    print("" "".join(map(str, result)))
37",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052385
1390052374,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
5
    result = []
6
7
    dq = deque()
8
9
    10
11
    for i in range(len(arr)):
12
13
        # Remove indices that are out of the current window
14
15
        while dq and dq[0] < i - k + 1:
16
17
            dq.popleft()
18
19
        20
21
        # Add current element index if it is negative
22
23
        if arr[i] < 0:
24
25
            dq.append(i)
26
27
        28
29
        # Start adding results only when we have a full batch
30
31
        if i >= k - 1:
32
33
            if dq:
34
35
                result.append(arr[dq[0]])  # Earliest fault in the window
36
37
            else:
38
39
                result.append(0)  # No fault found in the window
40
41
    42
43
    return result
44
45
# Read input
46
47
t = int(input())  # Number of test cases
48
49
for _ in range(t):
50
51
    n, k = map(int, input().split())  # Array size and batch size
52
53
    arr = list(map(int, input().split()))  # Sensor readings
54
55
    56
57
    # Get and print results
58
59
    print("" "".join(map(str, earliest_faults(arr, k))))",180,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052374
