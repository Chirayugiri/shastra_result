submission_id,username,problem_name,language,code,page,url
1390069692,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommissioning {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int t = scanner.nextInt();
7
        scanner.nextLine(); // Consume the newline
8
9
        for (int i = 0; i < t; i++) {
10
            String serverRack = scanner.nextLine();
11
            int minCost = findMinimumCost(serverRack);
12
            System.out.println(minCost);
13
        }
14
        scanner.close();
15
    }
16
17
    public static int findMinimumCost(String serverRack) {
18
        int n = serverRack.length();
19
        int minCost = Integer.MAX_VALUE;
20
        21
        // Try all possible combinations of removing servers from the beginning and end
22
        for (int front = 0; front <= n; front++) {
23
            for (int back = 0; back <= n - front; back++) {
24
                // Calculate the servers that will remain after decommissioning
25
                String remainingServers = serverRack.substring(front, n - back);
26
                27
                // Calculate the cost factors
28
                int remainingIdleServers = countChar(remainingServers, '0');
29
                int decommissionedActiveServers = countChar(serverRack.substring(0, front), '1') + 
30
                                                countChar(serverRack.substring(n - back, n), '1');
31
                32
                // The cost is the maximum of the two factors
33
                int cost = Math.max(remainingIdleServers, decommissionedActiveServers);
34
                35
                minCost = Math.min(minCost, cost);
36
            }
37
        }
38
        39
        return minCost;
40
    }
41
    42
    private static int countChar(String str, char target) {
43
        int count = 0;
44
        for (int i = 0; i < str.length(); i++) {
45
            if (str.charAt(i) == target) {
46
                count++;
47
            }
48
        }
49
        return count;
50
    }
51
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390069692
1390069704,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommissioning {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int t = scanner.nextInt();
7
        scanner.nextLine(); // Consume the newline
8
9
        for (int i = 0; i < t; i++) {
10
            String serverRack = scanner.nextLine();
11
            int minCost = findMinimumCost(serverRack);
12
            System.out.println(minCost);
13
        }
14
        scanner.close();
15
    }
16
17
    public static int findMinimumCost(String serverRack) {
18
        int n = serverRack.length();
19
        20
        // Precompute prefix sums for faster counting
21
        int[] activePrefix = new int[n + 1]; // Count of 1's from beginning
22
        int[] idlePrefix = new int[n + 1];   // Count of 0's from beginning
23
        24
        for (int i = 0; i < n; i++) {
25
            activePrefix[i + 1] = activePrefix[i] + (serverRack.charAt(i) == '1' ? 1 : 0);
26
            idlePrefix[i + 1] = idlePrefix[i] + (serverRack.charAt(i) == '0' ? 1 : 0);
27
        }
28
        29
        int totalActive = activePrefix[n]; // Total active servers
30
        int totalIdle = idlePrefix[n];     // Total idle servers
31
        int minCost = Integer.MAX_VALUE;
32
        33
        // Try all possible combinations of removing servers from the beginning and end
34
        for (int front = 0; front <= n; front++) {
35
            for (int back = 0; back <= n - front; back++) {
36
                // Calculate active servers decommissioned from front and back
37
                int decommissionedActive = activePrefix[front] + (totalActive - activePrefix[n - back]);
38
                39
                // Calculate idle servers remaining
40
                int remainingIdle = idlePrefix[n - back] - idlePrefix[front];
41
                42
                // The cost is the maximum of the two factors
43
                int cost = Math.max(remainingIdle, decommissionedActive);
44
                45
                minCost = Math.min(minCost, cost);
46
            }
47
        }
48
        49
        return minCost;
50
    }
51
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390069704
1390069729,unknown,unknown,unknown,"1
#include <iostream>
2
#include <string>
3
#include <vector>
4
#include <algorithm>
5
#include <climits>
6
7
using namespace std;
8
9
int findMinimumCost(const string& serverRack) {
10
    int n = serverRack.length();
11
    12
    // Precompute prefix sums for faster counting
13
    vector<int> activePrefix(n + 1, 0); // Count of 1's from beginning
14
    vector<int> idlePrefix(n + 1, 0);   // Count of 0's from beginning
15
    16
    for (int i = 0; i < n; i++) {
17
        activePrefix[i + 1] = activePrefix[i] + (serverRack[i] == '1' ? 1 : 0);
18
        idlePrefix[i + 1] = idlePrefix[i] + (serverRack[i] == '0' ? 1 : 0);
19
    }
20
    21
    int totalActive = activePrefix[n]; // Total active servers
22
    int totalIdle = idlePrefix[n];     // Total idle servers
23
    int minCost = INT_MAX;
24
    25
    // Try all possible combinations of removing servers from the beginning and end
26
    for (int front = 0; front <= n; front++) {
27
        for (int back = 0; back <= n - front; back++) {
28
            // Calculate active servers decommissioned from front and back
29
            int decommissionedActive = activePrefix[front] + (totalActive - activePrefix[n - back]);
30
            31
            // Calculate idle servers remaining
32
            int remainingIdle = idlePrefix[n - back] - idlePrefix[front];
33
            34
            // The cost is the maximum of the two factors
35
            int cost = max(remainingIdle, decommissionedActive);
36
            37
            minCost = min(minCost, cost);
38
        }
39
    }
40
    41
    return minCost;
42
}
43
44
int main() {
45
    int t;
46
    cin >> t;
47
    cin.ignore(); // Consume the newline
48
    49
    for (int i = 0; i < t; i++) {
50
        string serverRack;
51
        getline(cin, serverRack);
52
        53
        int minCost = findMinimumCost(serverRack);
54
        cout << minCost << endl;
55
    }
56
    57
    return 0;
58
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390069729
1390062518,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int t;
6
    cin >> t;
7
8
    while (t--) {
9
        int n, k;
10
        cin >> n >> k;
11
12
        vector<int> input(n);
13
        for (int i = 0; i < n; i++) {
14
            cin >> input[i];
15
        }
16
17
        priority_queue<int,vector<int>> pq(input.begin(), input.end());
18
19
        unordered_map<int, int> mapy;
20
        int dummy = min(k, n);  // Ensure we don't pop more than available
21
22
        while (dummy--) {
23
            mapy[pq.top()]++;
24
            pq.pop();
25
        }
26
27
        int cnt = 0;
28
        long long sum = 0;
29
30
        for (int i = 0; i < n; i++) {
31
            if (mapy[input[i]] > 0) {
32
                mapy[input[i]]--;
33
                cnt++;
34
                continue;
35
            }
36
            sum += input[i]+cnt;  // Fixed logic (removed `+ cnt`)
37
        }
38
39
        cout << sum << endl;
40
    }
41
42
    return 0;
43
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390062518
1390063339,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
#include <ext/pb_ds/assoc_container.hpp>
3
#include <ext/pb_ds/tree_policy.hpp>
4
#include <ext/pb_ds/detail/standard_policies.hpp>
5
#include <cmath>
6
#define int long long int
7
#define pb push_back
8
/*---------------------------------------------------------------------------------------------------------------------------------*/
9
/*ASCII small case-> a-97 to z-122
10
upper case-> A-65 to Z-90*/
11
#define nl ""\n""
12
#define mp map<int, int>
13
#define all(v) v.begin(), v.end()
14
#define F first
15
#define S second
16
#define ump unordered_map<long long, int, custom_hash>
17
#define mstpi multiset<pair<int, int> >
18
#define mst multiset<int>
19
#define vec vector<int>
20
#define pi pair<int, int>
21
#define ld long double
22
#define vep vector<pair<int, int>>
23
#define ul unsigned long long
24
#define loop1 for (int i = 0; i < n; i++)
25
#define REP(i, a, b) for (int i = a; i <= b; i++)
26
#define NO cout << ""NO"" << endl
27
#define YES cout << ""YES"" << endl
28
using namespace std;
29
using namespace __gnu_pbds;
30
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
31
/*---------------------------------------------------------------------------------------------------------------------------------*/
32
const double PI = 3.1415926535;
33
const int inf = 1e18;
34
const int mod = 1000000007;
35
/*---------------------------------------------------------------------------------------------------------------------------------*/
36
int modmul(int a, int b, int m)
37
{
38
    a %= m;
39
    b %= m;
40
    return (a * b) % m;
41
}
42
int modexp(int n, int x)
43
{
44
    int ans = 1;
45
    while (n > 0)
46
    {
47
        if (n & 1)
48
        {
49
            ans = (ans * x) % mod;
50
        }
51
        n >>= 1;
52
        x = (x * x) % mod;
53
    }
54
    return ans;
55
}
56
/*---------------------------------------------------------------------------------------------------------------------------------*/
57
string add(string a, string b)
58
{
59
    string ans = """";
60
    int carry = 0;
61
    while (!a.empty() || !b.empty() || carry > 0)
62
    {
63
        int digitA = a.empty() ? 0 : a.back() - '0';
64
        int digitB = b.empty() ? 0 : b.back() - '0';
65
        int sum = digitA + digitB + carry;
66
        ans = to_string(sum % 10) + ans;
67
        carry = sum / 10;
68
        if (!a.empty())
69
            a.pop_back();
70
        if (!b.empty())
71
            b.pop_back();
72
    }
73
    return ans;
74
}
75
string ministrnum(string a, string b)
76
{
77
    if (a.length() > b.length())
78
        return b;
79
    else if (b.length() > a.length())
80
        return a;
81
    else
82
    {
83
        int n = a.length();
84
        for (int i = 0; i < n; i++)
85
        {
86
            if (a[i] > b[i])
87
                return b;
88
            else if (a[i] < b[i])
89
                return a;
90
        }
91
    }
92
    return a;
93
}
94
vector<int> sieve(int n) {
95
    vector<bool> isPrime(n + 1, true);
96
    vector<int> primes;
97
    if(n >= 0) isPrime[0] = false;
98
    if(n >= 1) isPrime[1] = false;
99
    for (int i = 2; i <= n; i++) {
100
        if (isPrime[i]) {
101
            primes.push_back(i);
102
            for (int j = 2 * i; j <= n; j += i)
103
                isPrime[j] = false;
104
        }
105
    }
106
    return primes;
107
}
108
109
class SegmentTree {
110
public:
111
    int n;
112
    std::vector<int> tree;
113
    std::vector<int> lazy;
114
    115
    SegmentTree(const std::vector<int>& arr) {
116
        n = arr.size();
117
        tree.resize(4 * n, 0);
118
        lazy.resize(4 * n, 0);
119
        build(arr, 0, n - 1, 0);
120
    }
121
    122
    void build(const std::vector<int>& arr, int start, int end, int index) {
123
        if (start == end) {
124
            tree[index] = arr[start];
125
            return;
126
        }
127
        int mid = (start + end) / 2;
128
        build(arr, start, mid, 2 * index + 1);
129
        build(arr, mid + 1, end, 2 * index + 2);
130
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
131
    }
132
    133
    int queryRange(int start, int end, int l, int r, int index = 0) {
134
        if (lazy[index] != 0) {
135
            tree[index] += (end - start + 1) * lazy[index];
136
            if(start != end) {
137
                lazy[2 * index + 1] += lazy[index];
138
                lazy[2 * index + 2] += lazy[index];
139
            }
140
            lazy[index] = 0;
141
        }
142
        if (start > r || end < l)
143
            return 0;
144
        if (start >= l && end <= r)
145
            return tree[index];
146
        int mid = (start + end) / 2;
147
        return queryRange(start, mid, l, r, 2 * index + 1) +
148
               queryRange(mid + 1, end, l, r, 2 * index + 2);
149
    }
150
    151
    void updateRange(int start, int end, int l, int r, int diff, int index = 0) {
152
        if(lazy[index] != 0) {
153
            tree[index] += (end - start + 1) * lazy[index];
154
            if(start != end) {
155
                lazy[2 * index + 1] += lazy[index];
156
                lazy[2 * index + 2] += lazy[index];
157
            }
158
            lazy[index] = 0;
159
        }
160
        if(start > r || end < l)
161
            return;
162
        if(start >= l && end <= r) {
163
            tree[index] += (end - start + 1) * diff;
164
            if(start != end) {
165
                lazy[2 * index + 1] += diff;
166
                lazy[2 * index + 2] += diff;
167
            }
168
            return;
169
        }
170
        int mid = (start + end) / 2;
171
        updateRange(start, mid, l, r, diff, 2 * index + 1);
172
        updateRange(mid + 1, end, l, r, diff, 2 * index + 2);
173
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
174
    }
175
};
176
class DSU {
177
public:
178
    std::vector<int> parent, rank;
179
    180
    DSU(int n) {
181
        parent.resize(n);
182
        rank.resize(n, 0);
183
        for (int i = 0; i < n; i++)
184
            parent[i] = i;
185
    }
186
    187
    int find(int x) {
188
        if (parent[x] != x)
189
            parent[x] = find(parent[x]);
190
        return parent[x];
191
    }
192
    193
    bool unionSets(int x, int y) {
194
        int rootX = find(x);
195
        int rootY = find(y);
196
        if (rootX == rootY)
197
            return false;
198
        if (rank[rootX] < rank[rootY])
199
            parent[rootX] = rootY;
200
        else if (rank[rootX] > rank[rootY])
201
            parent[rootY] = rootX;
202
        else {
203
            parent[rootY] = rootX;
204
            rank[rootX]++;
205
        }
206
        return true;
207
    }
208
};
209
210
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
211
struct Node {
212
    int val;
213
    int weight, size;
214
    Node *left, *right;
215
    bool rev = false;
216
    Node(int c): val(c), weight(rng()), size(1), left(NULL), right(NULL) {}
217
};
218
ostream &operator<<(ostream &os, Node *n) {
219
    if(!n) return os;
220
    os << n -> left;
221
    os << n -> val;
222
    os << n -> right;
223
    return os;
224
}
225
int size(Node *Treap) {return Treap ? Treap -> size: 0;}
226
void push(Node* Treap) {
227
    if(!Treap) return;
228
    if(Treap -> rev) {
229
        Treap -> rev = false;
230
        swap(Treap->left, Treap->right);
231
        if(Treap -> left) Treap->left->rev ^= true;
232
        if(Treap -> right) Treap->right->rev ^= true;
233
    }
234
}
235
void pull(Node *Treap) {
236
    if(!Treap) return;
237
    push(Treap -> left), push(Treap -> right);
238
    Treap -> size = size(Treap -> left) + size(Treap -> right) + 1;
239
    return;
240
}
241
void split(Node *Treap, Node *&left, Node *&right, int val) {
242
    if(!Treap) {
243
        left = right = NULL;
244
        return;
245
    }
246
    push(Treap);
247
    if(size(Treap -> left) < val) {
248
        split(Treap -> right, Treap -> right, right, val - size(Treap->left) - 1);
249
        left = Treap;
250
    }
251
    else {
252
        split(Treap -> left, left, Treap -> left, val);
253
        right = Treap;
254
    }
255
    pull(Treap);
256
}
257
void merge(Node *&Treap, Node *left, Node *right) {
258
    push(left), push(right);
259
    if(left == NULL) {
260
        Treap = right;
261
        return;
262
    }
263
    if(right == NULL) {
264
        Treap = left;
265
        return;
266
    }
267
    if(left -> weight < right -> weight) {
268
        merge(right -> left, left, right -> left);
269
        Treap = right;
270
    }
271
    else {
272
        merge(left->right, left->right, right);
273
        Treap = left;
274
    }
275
    pull(Treap);
276
}
277
void inOrder(Node *curr, vector<int> &res) {
278
    if(curr == NULL) return;
279
    push(curr);
280
    inOrder(curr->left, res);
281
    res.pb(curr->val);
282
    inOrder(curr->right, res);
283
    pull(curr);
284
}
285
struct Treap {
286
    Node *root = nullptr;
287
    void insert(int i, int val) {
288
        Node *l, *r;
289
        split(root, l, r, i);
290
        Node *v = new Node(val);
291
        merge(l, l, v);
292
        merge(root, l, r);
293
    }
294
    295
    void del(int i) {
296
        Node *l, *r;
297
        split(root, l, r, i);
298
        split(r, root, r, 1);
299
        merge(root, l, r);
300
    }
301
    302
    void update(int l, int r, function<void(Node *)> f) {
303
        Node *a, *b, *c;
304
        split(root, a, b, l-1);
305
        split(b, b, c, r-l+1);
306
        if(b) {f(b);}
307
        merge(root, a, b);
308
        merge(root, root, c);
309
    }
310
    311
    vector<int> allPr() {
312
        vector<int> res;
313
        inOrder(root, res);
314
        return res;
315
    }
316
    317
    void cycShft(int l, int r) {
318
        Node *a, *b, *c, *d;
319
        split(root, a, b, l-1);
320
        split(b, b, c, r-l+1);
321
        split(b, b, d, r-l);
322
        merge(root, a, d);
323
        merge(root, root, b);
324
        merge(root, root, c);
325
    }
326
};
327
vector<int> computePrefix(const string &pattern) {
328
    int n = pattern.size();
329
    vector<int> prefix(n, 0);
330
    for (int i = 1, j = 0; i < n; i++) {
331
        while (j > 0 && pattern[i] != pattern[j])
332
            j = prefix[j - 1];
333
        if (pattern[i] == pattern[j])
334
            j++;
335
        prefix[i] = j;
336
    }
337
    return prefix;
338
}
339
340
vector<int> KMPSearch(const string &text, const string &pattern) {
341
    vector<int> prefix = computePrefix(pattern);
342
    vector<int> occurrences;
343
    for (int i = 0, j = 0; i < (int)text.size(); i++) {
344
        while (j > 0 && text[i] != pattern[j])
345
            j = prefix[j - 1];
346
        if (text[i] == pattern[j])
347
            j++;
348
        if (j == (int)pattern.size()) {
349
            occurrences.push_back(i - j + 1);
350
            j = prefix[j - 1];
351
        }
352
    }
353
    return occurrences;
354
}
355
void solve()
356
{
357
    int n, k;
358
    cin>>n>>k;
359
    360
    vector<int> v(n);
361
    loop1 cin>>v[i];
362
    363
    vector<int> suff = v;
364
    suff.pb(0);
365
    for(int i = n - 2; i>-1; i--) suff[i] += suff[i+1];
366
    int ans = INT_MAX;
367
    368
    for(int i = 0; i<=n - k; i++) {
369
        int cur = suff[0] - suff[i] + (suff[i+k] + (n - i - k));
370
        ans = min(ans, cur);
371
    }
372
    cout<<ans<<'\n';
373
}
374
int32_t main()
375
{
376
    ios_base ::sync_with_stdio(0);
377
    cin.tie(0);
378
    cout.tie(0);
379
    int t = 1;
380
    cin >> t;
381
    while (t--)
382
        solve();
383
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390063339
1390063420,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
#include <ext/pb_ds/assoc_container.hpp>
3
#include <ext/pb_ds/tree_policy.hpp>
4
#include <ext/pb_ds/detail/standard_policies.hpp>
5
#include <cmath>
6
#define int long long int
7
#define pb push_back
8
/*---------------------------------------------------------------------------------------------------------------------------------*/
9
/*ASCII small case-> a-97 to z-122
10
upper case-> A-65 to Z-90*/
11
#define nl ""\n""
12
#define mp map<int, int>
13
#define all(v) v.begin(), v.end()
14
#define F first
15
#define S second
16
#define ump unordered_map<long long, int, custom_hash>
17
#define mstpi multiset<pair<int, int> >
18
#define mst multiset<int>
19
#define vec vector<int>
20
#define pi pair<int, int>
21
#define ld long double
22
#define vep vector<pair<int, int>>
23
#define ul unsigned long long
24
#define loop1 for (int i = 0; i < n; i++)
25
#define REP(i, a, b) for (int i = a; i <= b; i++)
26
#define NO cout << ""NO"" << endl
27
#define YES cout << ""YES"" << endl
28
using namespace std;
29
using namespace __gnu_pbds;
30
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
31
/*---------------------------------------------------------------------------------------------------------------------------------*/
32
const double PI = 3.1415926535;
33
const int inf = 1e18;
34
const int mod = 1000000007;
35
/*---------------------------------------------------------------------------------------------------------------------------------*/
36
int modmul(int a, int b, int m)
37
{
38
    a %= m;
39
    b %= m;
40
    return (a * b) % m;
41
}
42
int modexp(int n, int x)
43
{
44
    int ans = 1;
45
    while (n > 0)
46
    {
47
        if (n & 1)
48
        {
49
            ans = (ans * x) % mod;
50
        }
51
        n >>= 1;
52
        x = (x * x) % mod;
53
    }
54
    return ans;
55
}
56
/*---------------------------------------------------------------------------------------------------------------------------------*/
57
string add(string a, string b)
58
{
59
    string ans = """";
60
    int carry = 0;
61
    while (!a.empty() || !b.empty() || carry > 0)
62
    {
63
        int digitA = a.empty() ? 0 : a.back() - '0';
64
        int digitB = b.empty() ? 0 : b.back() - '0';
65
        int sum = digitA + digitB + carry;
66
        ans = to_string(sum % 10) + ans;
67
        carry = sum / 10;
68
        if (!a.empty())
69
            a.pop_back();
70
        if (!b.empty())
71
            b.pop_back();
72
    }
73
    return ans;
74
}
75
string ministrnum(string a, string b)
76
{
77
    if (a.length() > b.length())
78
        return b;
79
    else if (b.length() > a.length())
80
        return a;
81
    else
82
    {
83
        int n = a.length();
84
        for (int i = 0; i < n; i++)
85
        {
86
            if (a[i] > b[i])
87
                return b;
88
            else if (a[i] < b[i])
89
                return a;
90
        }
91
    }
92
    return a;
93
}
94
vector<int> sieve(int n) {
95
    vector<bool> isPrime(n + 1, true);
96
    vector<int> primes;
97
    if(n >= 0) isPrime[0] = false;
98
    if(n >= 1) isPrime[1] = false;
99
    for (int i = 2; i <= n; i++) {
100
        if (isPrime[i]) {
101
            primes.push_back(i);
102
            for (int j = 2 * i; j <= n; j += i)
103
                isPrime[j] = false;
104
        }
105
    }
106
    return primes;
107
}
108
109
class SegmentTree {
110
public:
111
    int n;
112
    std::vector<int> tree;
113
    std::vector<int> lazy;
114
    115
    SegmentTree(const std::vector<int>& arr) {
116
        n = arr.size();
117
        tree.resize(4 * n, 0);
118
        lazy.resize(4 * n, 0);
119
        build(arr, 0, n - 1, 0);
120
    }
121
    122
    void build(const std::vector<int>& arr, int start, int end, int index) {
123
        if (start == end) {
124
            tree[index] = arr[start];
125
            return;
126
        }
127
        int mid = (start + end) / 2;
128
        build(arr, start, mid, 2 * index + 1);
129
        build(arr, mid + 1, end, 2 * index + 2);
130
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
131
    }
132
    133
    int queryRange(int start, int end, int l, int r, int index = 0) {
134
        if (lazy[index] != 0) {
135
            tree[index] += (end - start + 1) * lazy[index];
136
            if(start != end) {
137
                lazy[2 * index + 1] += lazy[index];
138
                lazy[2 * index + 2] += lazy[index];
139
            }
140
            lazy[index] = 0;
141
        }
142
        if (start > r || end < l)
143
            return 0;
144
        if (start >= l && end <= r)
145
            return tree[index];
146
        int mid = (start + end) / 2;
147
        return queryRange(start, mid, l, r, 2 * index + 1) +
148
               queryRange(mid + 1, end, l, r, 2 * index + 2);
149
    }
150
    151
    void updateRange(int start, int end, int l, int r, int diff, int index = 0) {
152
        if(lazy[index] != 0) {
153
            tree[index] += (end - start + 1) * lazy[index];
154
            if(start != end) {
155
                lazy[2 * index + 1] += lazy[index];
156
                lazy[2 * index + 2] += lazy[index];
157
            }
158
            lazy[index] = 0;
159
        }
160
        if(start > r || end < l)
161
            return;
162
        if(start >= l && end <= r) {
163
            tree[index] += (end - start + 1) * diff;
164
            if(start != end) {
165
                lazy[2 * index + 1] += diff;
166
                lazy[2 * index + 2] += diff;
167
            }
168
            return;
169
        }
170
        int mid = (start + end) / 2;
171
        updateRange(start, mid, l, r, diff, 2 * index + 1);
172
        updateRange(mid + 1, end, l, r, diff, 2 * index + 2);
173
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
174
    }
175
};
176
class DSU {
177
public:
178
    std::vector<int> parent, rank;
179
    180
    DSU(int n) {
181
        parent.resize(n);
182
        rank.resize(n, 0);
183
        for (int i = 0; i < n; i++)
184
            parent[i] = i;
185
    }
186
    187
    int find(int x) {
188
        if (parent[x] != x)
189
            parent[x] = find(parent[x]);
190
        return parent[x];
191
    }
192
    193
    bool unionSets(int x, int y) {
194
        int rootX = find(x);
195
        int rootY = find(y);
196
        if (rootX == rootY)
197
            return false;
198
        if (rank[rootX] < rank[rootY])
199
            parent[rootX] = rootY;
200
        else if (rank[rootX] > rank[rootY])
201
            parent[rootY] = rootX;
202
        else {
203
            parent[rootY] = rootX;
204
            rank[rootX]++;
205
        }
206
        return true;
207
    }
208
};
209
210
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
211
struct Node {
212
    int val;
213
    int weight, size;
214
    Node *left, *right;
215
    bool rev = false;
216
    Node(int c): val(c), weight(rng()), size(1), left(NULL), right(NULL) {}
217
};
218
ostream &operator<<(ostream &os, Node *n) {
219
    if(!n) return os;
220
    os << n -> left;
221
    os << n -> val;
222
    os << n -> right;
223
    return os;
224
}
225
int size(Node *Treap) {return Treap ? Treap -> size: 0;}
226
void push(Node* Treap) {
227
    if(!Treap) return;
228
    if(Treap -> rev) {
229
        Treap -> rev = false;
230
        swap(Treap->left, Treap->right);
231
        if(Treap -> left) Treap->left->rev ^= true;
232
        if(Treap -> right) Treap->right->rev ^= true;
233
    }
234
}
235
void pull(Node *Treap) {
236
    if(!Treap) return;
237
    push(Treap -> left), push(Treap -> right);
238
    Treap -> size = size(Treap -> left) + size(Treap -> right) + 1;
239
    return;
240
}
241
void split(Node *Treap, Node *&left, Node *&right, int val) {
242
    if(!Treap) {
243
        left = right = NULL;
244
        return;
245
    }
246
    push(Treap);
247
    if(size(Treap -> left) < val) {
248
        split(Treap -> right, Treap -> right, right, val - size(Treap->left) - 1);
249
        left = Treap;
250
    }
251
    else {
252
        split(Treap -> left, left, Treap -> left, val);
253
        right = Treap;
254
    }
255
    pull(Treap);
256
}
257
void merge(Node *&Treap, Node *left, Node *right) {
258
    push(left), push(right);
259
    if(left == NULL) {
260
        Treap = right;
261
        return;
262
    }
263
    if(right == NULL) {
264
        Treap = left;
265
        return;
266
    }
267
    if(left -> weight < right -> weight) {
268
        merge(right -> left, left, right -> left);
269
        Treap = right;
270
    }
271
    else {
272
        merge(left->right, left->right, right);
273
        Treap = left;
274
    }
275
    pull(Treap);
276
}
277
void inOrder(Node *curr, vector<int> &res) {
278
    if(curr == NULL) return;
279
    push(curr);
280
    inOrder(curr->left, res);
281
    res.pb(curr->val);
282
    inOrder(curr->right, res);
283
    pull(curr);
284
}
285
struct Treap {
286
    Node *root = nullptr;
287
    void insert(int i, int val) {
288
        Node *l, *r;
289
        split(root, l, r, i);
290
        Node *v = new Node(val);
291
        merge(l, l, v);
292
        merge(root, l, r);
293
    }
294
    295
    void del(int i) {
296
        Node *l, *r;
297
        split(root, l, r, i);
298
        split(r, root, r, 1);
299
        merge(root, l, r);
300
    }
301
    302
    void update(int l, int r, function<void(Node *)> f) {
303
        Node *a, *b, *c;
304
        split(root, a, b, l-1);
305
        split(b, b, c, r-l+1);
306
        if(b) {f(b);}
307
        merge(root, a, b);
308
        merge(root, root, c);
309
    }
310
    311
    vector<int> allPr() {
312
        vector<int> res;
313
        inOrder(root, res);
314
        return res;
315
    }
316
    317
    void cycShft(int l, int r) {
318
        Node *a, *b, *c, *d;
319
        split(root, a, b, l-1);
320
        split(b, b, c, r-l+1);
321
        split(b, b, d, r-l);
322
        merge(root, a, d);
323
        merge(root, root, b);
324
        merge(root, root, c);
325
    }
326
};
327
vector<int> computePrefix(const string &pattern) {
328
    int n = pattern.size();
329
    vector<int> prefix(n, 0);
330
    for (int i = 1, j = 0; i < n; i++) {
331
        while (j > 0 && pattern[i] != pattern[j])
332
            j = prefix[j - 1];
333
        if (pattern[i] == pattern[j])
334
            j++;
335
        prefix[i] = j;
336
    }
337
    return prefix;
338
}
339
340
vector<int> KMPSearch(const string &text, const string &pattern) {
341
    vector<int> prefix = computePrefix(pattern);
342
    vector<int> occurrences;
343
    for (int i = 0, j = 0; i < (int)text.size(); i++) {
344
        while (j > 0 && text[i] != pattern[j])
345
            j = prefix[j - 1];
346
        if (text[i] == pattern[j])
347
            j++;
348
        if (j == (int)pattern.size()) {
349
            occurrences.push_back(i - j + 1);
350
            j = prefix[j - 1];
351
        }
352
    }
353
    return occurrences;
354
}
355
void solve()
356
{
357
    int n, k;
358
    cin>>n>>k;
359
    360
    vector<int> v(n);
361
    loop1 cin>>v[i];
362
    363
    vector<int> suff = v;
364
    suff.pb(0);
365
    for(int i = n - 2; i>-1; i--) suff[i] += suff[i+1];
366
    int ans = accumulate(all(v), 0LL);
367
    368
    for(int i = 0; i<=n - k; i++) {
369
        int cur = suff[0] - suff[i] + (suff[i+k] + (n - i - k));
370
        ans = min(ans, cur);
371
    }
372
    cout<<ans<<'\n';
373
}
374
int32_t main()
375
{
376
    ios_base ::sync_with_stdio(0);
377
    cin.tie(0);
378
    cout.tie(0);
379
    int t = 1;
380
    cin >> t;
381
    while (t--)
382
        solve();
383
}",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390063420
1390059531,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
5
    result = []
6
7
    dq = deque()
8
9
    for i in range(len(arr)):
10
11
        # Remove out-of-window elements
12
13
        if dq and dq[0] < i - k + 1:
14
15
            dq.popleft()
16
17
        # Add new faulty readings
18
19
        if arr[i] < 0:
20
21
            dq.append(i)
22
23
        # Collect results for valid windows
24
25
        if i >= k - 1:
26
27
            result.append(0 if not dq else arr[dq[0]])
28
29
    return result
30
31
# Driver code
32
33
t = int(input())  # Number of test cases
34
35
for _ in range(t):
36
37
    n, k = map(int, input().split())
38
39
    arr = list(map(int, input().split()))
40
41
    faults = earliest_faults(arr, k)
42
43
    print(*faults)",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390059531
1390062213,unknown,unknown,unknown,"1
#include<bits/stdc++.h>
2
using namespace std;
3
4
5
int main() {
6
    int t;
7
    cin>>t;
8
    9
    while(t--)
10
    {
11
        int n,k;
12
        cin>>n>>k;
13
        14
        vector<int>input(n);
15
        for(int i=0;i<n;i++)
16
        {
17
            cin>>input[i];
18
        }
19
        20
        priority_queue<int,vector<int>> pq(input.begin(),input.end());
21
        22
        unordered_map<int,int> mapy;
23
        int dummy=k;
24
        25
        while(dummy--)
26
        {
27
            mapy[pq.top()]++;
28
            pq.pop();
29
        }
30
        31
        32
        int cnt=0;
33
        long long sum=0;
34
        35
        for(int i=0;i<n;i++)
36
        {
37
            if(mapy[input[i]] > 0)
38
            {
39
                mapy[input[i]]--;
40
                cnt++;
41
                continue;
42
            }
43
            44
            sum+=input[i]+cnt;
45
        }
46
        47
        cout<<sum<<endl;
48
    }
49
    return 0;
50
}
51",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390062213
1390059556,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
3
    left = 0
4
5
    zeros = 0
6
7
    max_ones = 0
8
9
    n = len(s)
10
11
    for right in range(n):
12
13
        if s[right] == '0':
14
15
            zeros += 1
16
17
        while zeros > k:
18
19
            if s[left] == '0':
20
21
                zeros -= 1
22
23
            left += 1
24
25
        current_ones = (right - left + 1) - zeros
26
27
        max_ones = max(max_ones, current_ones)
28
29
    30
31
    return max_ones
32
33
def main():
34
35
    T = int(input())
36
37
    for _ in range(T):
38
39
        s = input().strip()
40
41
        n = len(s)
42
43
        total_ones = s.count('1')
44
45
        # Calculate max consecutive ones
46
47
        max_consecutive_ones = 0
48
49
        current = 0
50
51
        for c in s:
52
53
            if c == '1':
54
55
                current += 1
56
57
                max_consecutive_ones = max(max_consecutive_ones, current)
58
59
            else:
60
61
                current = 0
62
63
        if total_ones == 0 or total_ones == max_consecutive_ones:
64
65
            print(0)
66
67
            continue
68
69
        total_zeros = n - total_ones
70
71
        low, high = 0, max(total_ones, total_zeros)
72
73
        answer = high
74
75
        while low <= high:
76
77
            mid = (low + high) // 2
78
79
            required_ones = max(0, total_ones - mid)
80
81
            if required_ones == 0:
82
83
                answer = mid
84
85
                high = mid - 1
86
87
                continue
88
89
            max_ones = max_ones_with_at_most_k_zeros(s, mid)
90
91
            if max_ones >= required_ones:
92
93
                answer = mid
94
95
                high = mid - 1
96
97
            else:
98
99
                low = mid + 1
100
101
        print(answer)
102
103
if __name__ == ""__main__"":
104
105
    main()",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390059556
1390059512,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
   6
    int min = Integer.MAX_VALUE;
7
    Map<String, Integer> memo = new HashMap<>();
8
9
    public int rec(int cz, int cone, int i, int j, String s, int totalOne) {
10
        if (i > j) {
11
            return Integer.MAX_VALUE;
12
        }
13
14
        String key = i + "","" + j + "","" + cz + "","" + cone;
15
        if (memo.containsKey(key)) return memo.get(key);
16
17
        int currMin = Math.max(cz, cone);
18
        min = Math.min(min, currMin);
19
20
        if (cone == totalOne) {
21
            min = Math.min(min, totalOne);
22
            return min;
23
        }
24
        if (cz == 0) {
25
            return min;
26
        }
27
28
        // Try removing from the left
29
        if (s.charAt(i) == '1') {
30
            currMin = Math.min(currMin, rec(cz, cone + 1, i + 1, j, s, totalOne));
31
        } else {
32
            currMin = Math.min(currMin, rec(cz - 1, cone, i + 1, j, s, totalOne));
33
        }
34
35
        // Try removing from the right
36
        if (s.charAt(j) == '1') {
37
            currMin = Math.min(currMin, rec(cz, cone + 1, i, j - 1, s, totalOne));
38
        } else {
39
            currMin = Math.min(currMin, rec(cz - 1, cone, i, j - 1, s, totalOne));
40
        }
41
42
        memo.put(key, currMin);
43
        return currMin;
44
    }
45
46
    public static void main(String[] args) {
47
        Scanner sc = new Scanner(System.in);
48
        int t = sc.nextInt();
49
50
        while (t-- > 0) {
51
            String s = sc.next();
52
            int cz = 0, cone = 0;
53
            54
            for (char ch : s.toCharArray()) {
55
                if (ch == '0') cz++;
56
                else cone++;
57
            }
58
59
            Solution sol = new Solution();
60
            sol.rec(cz, 0, 0, s.length() - 1, s, cone);
61
            System.out.println(sol.min);
62
        }
63
        64
        sc.close();
65
    }
66
}
67",1,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390059512
