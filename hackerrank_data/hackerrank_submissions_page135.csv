submission_id,username,problem_name,language,code,page,url
1390053478,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
#include <math.h>
4
#include <stdlib.h>
5
void find_earliest_faulty(int arr[], int n, int k) {
6
    for (int i = 0; i <= n - k; i++) {
7
        int earliest_faulty = 0;
8
        for (int j = i; j < i + k; j++) {
9
            if (arr[j] < 0) {
10
                earliest_faulty = arr[j];
11
                break; // First faulty component found, exit loop
12
            }
13
        }
14
        printf(""%d "", earliest_faulty);
15
    }
16
    printf(""\n"");
17
}
18
19
int main() {
20
    int t;
21
    scanf(""%d"", &t);
22
    23
    while (t--) {
24
        int n, k;
25
        scanf(""%d %d"", &n, &k);
26
        int *arr = (int *)malloc(n * sizeof(int));
27
        28
        for (int i = 0; i < n; i++) {
29
            scanf(""%d"", &arr[i]);
30
        }
31
        32
        find_earliest_faulty(arr, n, k);
33
        free(arr);
34
    }
35
    36
    return 0;
37
}",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053478
1390053483,unknown,unknown,unknown,"1
def find_earliest_faults(arr, k):
2
    """"""
3
    Finds the earliest faulty reading for each consecutive batch of size k.
4
5
    Args:
6
        arr: A list of sensor readings (integers).
7
        k: The batch size.
8
9
    Returns:
10
        A list of earliest faulty readings for each batch.
11
    """"""
12
    result = []
13
    for i in range(len(arr) - k + 1):
14
        batch = arr[i:i + k]
15
        earliest_fault = 0
16
        for j, reading in enumerate(batch):
17
            if reading < 0:
18
                earliest_fault = reading
19
                break
20
        result.append(earliest_fault)
21
    return result
22
23
def solve():
24
    t = int(input())
25
    for _ in range(t):
26
        n, k = map(int, input().split())
27
        arr = list(map(int, input().split()))
28
        result = find_earliest_faults(arr, k)
29
        print(*result)
30
31
solve()",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053483
1390053476,unknown,unknown,unknown,"1
def main():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split(""\n"")
5
    6
    t = int(data[0])
7
    index = 1
8
9
    results = []
10
    for _ in range(t):
11
        n, k = map(int, data[index].split())
12
        strengths = list(map(int, data[index + 1].split()))
13
        index += 2
14
        15
        if k >= n:
16
            results.append(""0"")
17
            continue
18
        19
        # Calculate the impact of each firewall: strength + index
20
        impact = [(strengths[i] + i, i) for i in range(n)]
21
        22
        # Sort firewalls by impact (higher impact should be skipped)
23
        impact.sort(reverse=True)
24
        25
        # Select the top k firewalls to skip
26
        to_skip = set(idx for _, idx in impact[:k])
27
        28
        # Compute the minimal effort
29
        effort = 0
30
        skipped = 0
31
        32
        for i in range(n):
33
            if i in to_skip:
34
                skipped += 1
35
            else:
36
                effort += strengths[i] + skipped
37
        38
        results.append(str(effort))
39
    40
    # Print all results at once (faster output handling)
41
    sys.stdout.write(""\n"".join(results) + ""\n"")
42
43
if __name__ == ""__main__"":
44
    main()
45",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053476
1390053472,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_effort = float('inf')
6
7
    for i in range(1 << n):
8
        skipped_count = 0
9
        current_effort = 0
10
        current_a = a[:]
11
12
        skipped_indices = []
13
        for j in range(n):
14
            if (i >> j) & 1:
15
                skipped_count += 1
16
                skipped_indices.append(j)
17
18
        if skipped_count <= k:
19
            for j in range(n):
20
                if j in skipped_indices:
21
                    continue
22
                else:
23
                    offset = 0
24
                    for skipped_index in skipped_indices:
25
                        if skipped_index < j:
26
                            offset += 1
27
                    current_effort += current_a[j] + offset
28
29
            min_effort = min(min_effort, current_effort)
30
31
    print(min_effort)
32
33
t = int(input())
34
for _ in range(t):
35
    solve()",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053472
1390053473,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    idx = 0
6
    T = int(input[idx])
7
    idx += 1
8
    for _ in range(T):
9
        n, k = int(input[idx]), int(input[idx+1])
10
        idx +=2
11
        a = list(map(int, input[idx:idx+n]))
12
        idx +=n
13
        sum_a = sum(a)
14
        v = []
15
        for i in range(n):
16
            val = a[i] - (n - i -1)
17
            v.append(val)
18
        v.sort(reverse=True)
19
        prefix = [0] * (n+1)
20
        for i in range(n):
21
            prefix[i+1] = prefix[i] + v[i]
22
        max_sum = 0
23
        max_t = min(k, n)
24
        for t in range(0, max_t+1):
25
            current = prefix[t] + t*(t-1)//2
26
            if current > max_sum:
27
                max_sum = current
28
        print(sum_a - max_sum)
29
30
if __name__ == ""__main__"":
31
    main()",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053473
1390053475,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, arr = case
5
        batch_results = []
6
        for i in range(n - k + 1):
7
            batch = arr[i:i + k]
8
            earliest_fault = 0
9
            for num in batch:
10
                if num < 0:
11
                    earliest_fault = num
12
                    break
13
            batch_results.append(earliest_fault)
14
        results.append(batch_results)
15
    return results
16
17
# Input reading
18
def main():
19
    import sys
20
    input = sys.stdin.read
21
    data = input().split()
22
    idx = 0
23
    t = int(data[idx])
24
    idx += 1
25
    test_cases = []
26
    for _ in range(t):
27
        n = int(data[idx])
28
        k = int(data[idx + 1])
29
        idx += 2
30
        arr = list(map(int, data[idx:idx + n]))
31
        idx += n
32
        test_cases.append((n, k, arr))
33
    34
    # Compute results
35
    results = earliest_faulty_readings(test_cases)
36
    37
    # Output results
38
    for result in results:
39
        print("" "".join(map(str, result)) + "" "", end="""")
40
    print()
41
42
if __name__ == ""__main__"":
43
    main()",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053475
1390053466,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
3
    results = []
4
5
    for case in test_cases:
6
7
        n = len(case)
8
9
        min_cost = float('inf')
10
11
        12
13
        # Precompute prefix sums for 0's and 1's
14
15
        prefix_0 = [0] * (n + 1)
16
17
        prefix_1 = [0] * (n + 1)
18
19
        for i in range(n):
20
21
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
22
23
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
24
25
        26
27
        # Iterate through all possible splits
28
29
        for i in range(n + 1):
30
31
            for j in range(i, n + 1):
32
33
                # Remaining segment is from i to j-1
34
35
                remaining_0s = prefix_0[j] - prefix_0[i]
36
37
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
38
39
                cost = max(remaining_0s, removed_1s)
40
41
                if cost < min_cost:
42
43
                    min_cost = cost
44
45
        results.append(min_cost)
46
47
    return results
48
49
# Read input
50
51
T = int(input())
52
53
test_cases = [input().strip() for _ in range(T)]
54
55
# Compute results
56
57
results = min_decommission_cost(test_cases)
58
59
# Print output
60
61
for result in results:
62
63
    print(result)
64
65
66
67
68
69",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053466
1390053469,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    min_cost = float('inf')
6
    7
    for i in range(n + 1):
8
        for j in range(n - i + 1):
9
            remaining = s[i:n-j]
10
            11
            idle_remaining = 0
12
            for char in remaining:
13
                if char == '0':
14
                    idle_remaining += 1
15
            16
            active_removed = 0
17
            for char in s[:i]:
18
                if char == '1':
19
                    active_removed += 1
20
            for char in s[n-j:]:
21
                if char == '1':
22
                    active_removed += 1
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
            27
    print(min_cost)
28
29
t = int(input())
30
for _ in range(t):
31
    solve()",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053469
1390053467,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    4
    # Count total active ('1') and idle ('0') servers
5
    total_active = server_string.count('1')
6
    total_idle = n - total_active
7
8
    # Precompute cumulative count of active servers from the left
9
    active_prefix_sum = [0] * (n + 1)
10
    for i in range(n):
11
        active_prefix_sum[i + 1] = active_prefix_sum[i] + (1 if server_string[i] == '1' else 0)
12
    13
    min_cost = float('inf')
14
15
    # Try all possible segments
16
    for left in range(n + 1):
17
        for right in range(left, n + 1):
18
            # Active servers in the selected range
19
            active_remaining = active_prefix_sum[right] - active_prefix_sum[left]
20
            idle_remaining = (right - left) - active_remaining
21
22
            # Active servers removed (total active - active in range)
23
            active_removed = total_active - active_remaining
24
25
            # Cost is max of idle servers in range or removed active servers
26
            cost = max(idle_remaining, active_removed)
27
            min_cost = min(min_cost, cost)
28
29
    return min_cost
30
31
def faster_min_decommission_cost(server_string):
32
    n = len(server_string)
33
34
    # Precompute prefix sums for active ('1') and idle ('0') servers
35
    active_prefix = [0] * (n + 1)
36
    idle_prefix = [0] * (n + 1)
37
38
    for i in range(n):
39
        active_prefix[i + 1] = active_prefix[i] + (server_string[i] == '1')
40
        idle_prefix[i + 1] = idle_prefix[i] + (server_string[i] == '0')
41
42
    min_cost = n  # Worst case scenario
43
44
    # Iterate through all possible substrings efficiently
45
    for i in range(n + 1):
46
        for j in range(i, n + 1):
47
            # Idle servers in the selected range
48
            idle_remaining = idle_prefix[j] - idle_prefix[i]
49
50
            # Active servers removed (total active - active in selected range)
51
            active_removed = active_prefix[n] - (active_prefix[j] - active_prefix[i])
52
53
            # Compute cost and update minimum
54
            cost = max(idle_remaining, active_removed)
55
            min_cost = min(min_cost, cost)
56
57
    return min_cost
58
59
def main():
60
    t = int(input().strip())
61
62
    for _ in range(t):
63
        server_string = input().strip()
64
        result = faster_min_decommission_cost(server_string)
65
        print(result)
66
67
if __name__ == ""__main__"":
68
    main()
69",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053467
1390053463,unknown,unknown,unknown,"1
def min_cost_to_balance(s):
2
    n = len(s)
3
4
    # Step 1: Build prefix sums
5
    prefix0 = [0] * (n + 1)
6
    prefix1 = [0] * (n + 1)
7
8
    for i in range(n):
9
        prefix0[i + 1] = prefix0[i] + (1 if s[i] == '0' else 0)
10
        prefix1[i + 1] = prefix1[i] + (1 if s[i] == '1' else 0)
11
12
    # Step 2: Initialize min_cost with the case of removing everything
13
    min_cost = prefix1[n]
14
15
    # Step 3: Iterate over all possible a and b
16
    for a in range(n + 1):
17
        for b in range(a - 1, n):
18
            # Number of '0's in s[a..b]
19
            zeros_remaining = prefix0[b + 1] - prefix0[a] if b >= a else 0
20
            # Number of '1's in prefix s[0..a-1] and suffix s[b+1..n-1]
21
            ones_removed = prefix1[a] + (prefix1[n] - prefix1[b + 1])
22
            # Cost for this substring
23
            cost = max(zeros_remaining, ones_removed)
24
            # Update minimum cost
25
            min_cost = min(min_cost, cost)
26
27
    return min_cost
28
29
# Input handling
30
T = int(input())
31
for _ in range(T):
32
    s = input().strip()
33
    print(min_cost_to_balance(s))
34",135,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053463
