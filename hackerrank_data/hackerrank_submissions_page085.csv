submission_id,username,problem_name,language,code,page,url
1390054386,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
5
    result = []
6
7
    dq = deque()
8
9
    for i in range(len(arr)):
10
11
        # Remove out-of-window elements
12
13
        if dq and dq[0] < i - k + 1:
14
15
            dq.popleft()
16
17
        # Add new faulty readings
18
19
        if arr[i] < 0:
20
21
            dq.append(i)
22
23
        # Collect results for valid windows
24
25
        if i >= k - 1:
26
27
            result.append(0 if not dq else arr[dq[0]])
28
29
    return result
30
31
# Driver code
32
33
t = int(input())  # Number of test cases
34
35
for _ in range(t):
36
37
    n, k = map(int, input().split())
38
39
    arr = list(map(int, input().split()))
40
41
    faults = earliest_faults(arr, k)
42
43
    print(*faults)",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054386
1390054387,unknown,unknown,unknown,"1
def min_effort(n, k, strengths):
2
    if k >= n:
3
        return 0
4
    5
    benefits = []
6
    for i in range(n):
7
        benefit = strengths[i] - (n - i - 1)
8
        benefits.append((benefit, i))
9
    10
    benefits.sort(reverse=True)
11
    12
    to_skip = set()
13
    for i in range(min(k, n)):
14
        to_skip.add(benefits[i][1])
15
    16
    total_effort = 0
17
    skipped_count = 0
18
    19
    for i in range(n):
20
        if i in to_skip:
21
            skipped_count += 1
22
            continue
23
        24
        total_effort += strengths[i] + skipped_count
25
    26
    return total_effort
27
28
def main():
29
    t = int(input())
30
    results = []
31
    32
    for _ in range(t):
33
        n, k = map(int, input().split())
34
        strengths = list(map(int, input().split()))
35
        results.append(min_effort(n, k, strengths))
36
    37
    for result in results:
38
        print(result)
39
40
if __name__ == ""__main__"":
41
    main()",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054387
1390054383,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommissioningOptimized {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
        scanner.nextLine(); // Consume newline
9
10
        while (t-- > 0) {
11
            String servers = scanner.nextLine();
12
            int minCost = solveOptimized(servers);
13
            System.out.println(minCost);
14
        }
15
        scanner.close();
16
    }
17
18
    private static int solveOptimized(String servers) {
19
        int n = servers.length();
20
        int minCost = Integer.MAX_VALUE;
21
22
        for (int i = 0; i <= n; i++) {
23
            int activeDecommissioned = 0;
24
            for (int k = 0; k < i; k++) {
25
                if (servers.charAt(k) == '1') {
26
                    activeDecommissioned++;
27
                }
28
            }
29
30
            for (int j = 0; j <= n - i; j++) {
31
                int remainingIdleCount = 0;
32
                for (int k = i; k < n - j; k++) {
33
                    if (servers.charAt(k) == '0') {
34
                        remainingIdleCount++;
35
                    }
36
                }
37
38
                int endActiveDecommissioned = 0;
39
                for (int k = 0; k < j; k++) {
40
                    if (servers.charAt(n - 1 - k) == '1') {
41
                        endActiveDecommissioned++;
42
                    }
43
                }
44
45
                minCost = Math.min(minCost, Math.max(remainingIdleCount, activeDecommissioned + endActiveDecommissioned));
46
            }
47
        }
48
49
        return minCost;
50
    }
51
}",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054383
1390054380,unknown,unknown,unknown,"1
import sys
2
from itertools import accumulate
3
4
def min_effort(arr, k):
5
    n = len(arr)
6
    T = sum(arr)
7
    A = [arr[i] + (i+1) for i in range(n)]
8
    A.sort(reverse=True)
9
    P = [0] + list(accumulate(A))
10
    m_max = min(k, n)
11
    best = float('inf')
12
    for m in range(m_max + 1):
13
        cost = T + m * n - (m * m - m) // 2 - P[m]
14
        if cost < best:
15
            best = cost
16
    return best
17
18
def solve():
19
    data = sys.stdin.read().strip().split()
20
    if not data:
21
        return
22
    t = int(data[0])
23
    index = 1
24
    res = []
25
    for _ in range(t):
26
        n = int(data[index]); index += 1
27
        k = int(data[index]); index += 1
28
        arr = list(map(int, data[index:index+n])); index += n
29
        res.append(str(min_effort(arr, k)))
30
    sys.stdout.write(""\n"".join(res))
31
32
if __name__ == ""__main__"":
33
    solve()",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054380
1390054378,unknown,unknown,unknown,"1
def solve():
2
    t = int(input())
3
    for _ in range(t):
4
        s = input()
5
        n = len(s)
6
        ans = float('inf')
7
8
        for i in range(n + 1):
9
            for j in range(n - i + 1):
10
                idle_count = 0
11
                active_removed = 0
12
13
                for k in range(i, n - j):
14
                    if s[k] == '0':
15
                        idle_count += 1
16
17
                active_removed += s[:i].count('1')
18
                active_removed += s[n - j:].count('1')
19
20
                ans = min(ans, max(idle_count, active_removed))
21
        print(ans)
22
23
solve()",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054378
1390054382,unknown,unknown,unknown,"1
def solve():
2
3
    s = input().strip()
4
5
    6
7
    # Find the first and last active server ('1')
8
9
    first_active = s.find('1')
10
11
    last_active = s.rfind('1')
12
13
    if first_active == -1:  # No active servers at all
14
15
        print(0)
16
17
        return
18
19
    # Remaining substring after trimming excess zeros
20
21
    remaining = s[first_active:last_active + 1]
22
23
    24
25
    # Count remaining idle servers (0s) inside the trimmed substring
26
27
    idle_count = remaining.count('0')
28
29
    # Count active servers removed from both ends
30
31
    active_removed = s[:first_active].count('1') + s[last_active + 1:].count('1')
32
33
    # Minimum possible cost
34
35
    print(max(idle_count, active_removed))
36
37
# Read input
38
39
t = int(input().strip())
40
41
for _ in range(t):
42
43
    solve()
44
45",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054382
1390054370,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Process the rest of the array
13
    for i in range(len(arr) - k + 1):
14
        # Append the first negative in the current window
15
        if dq:
16
            result.append(arr[dq[0]])
17
        else:
18
            result.append(0)
19
        20
        # Remove elements that are out of the current window
21
        while dq and dq[0] < i + 1:
22
            dq.popleft()
23
        24
        # Add new element (end of current window)
25
        if i + k < len(arr) and arr[i + k] < 0:
26
            dq.append(i + k)
27
    28
    return result
29
30
def process_test_cases():
31
    t = int(input())
32
    for _ in range(t):
33
        n, k = map(int, input().split())
34
        arr = list(map(int, input().split()))
35
        print("" "".join(map(str, earliest_faulty_readings(arr, k))))
36
37
# Run the function
38
process_test_cases()
39",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054370
1390054371,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int t = sc.nextInt();
7
        while (t-- > 0) {
8
            String s = sc.next();
9
            int n = s.length();
10
            11
            int totalOnes = 0;
12
            int totalZeros = 0;
13
            int[] prefixOnes = new int[n + 1];
14
            int[] prefixZeros = new int[n + 1];
15
            16
            // Calculate prefix counts of 1's and 0's
17
            for (int i = 0; i < n; i++) {
18
                prefixOnes[i + 1] = prefixOnes[i];
19
                prefixZeros[i + 1] = prefixZeros[i];
20
                if (s.charAt(i) == '1') {
21
                    prefixOnes[i + 1]++;
22
                } else {
23
                    prefixZeros[i + 1]++;
24
                }
25
            }
26
            totalOnes = prefixOnes[n];
27
            totalZeros = prefixZeros[n];
28
            29
            int minCost = Integer.MAX_VALUE;
30
            31
            // Try removing i elements from start and j elements from end
32
            for (int i = 0; i <= n; i++) {
33
                for (int j = 0; j <= n - i; j++) {
34
                    int removedOnes = prefixOnes[i] + (totalOnes - prefixOnes[n - j]);
35
                    int remainingZeros = totalZeros - prefixZeros[i] - (prefixZeros[n] - prefixZeros[n - j]);
36
                    37
                    int cost = Math.max(remainingZeros, removedOnes);
38
                    minCost = Math.min(minCost, cost);
39
                }
40
            }
41
            42
            System.out.println(minCost);
43
        }
44
        sc.close();
45
    }
46
}
47",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054371
1390054377,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    servers = [int(c) for c in server_string]
4
5
    # Total count of ones and zeros
6
    total_ones = sum(servers)
7
    8
    # Edge case: If all servers are 0s or 1s
9
    if total_ones == 0 or total_ones == n:
10
        return 0
11
12
    # Precompute prefix sums
13
    prefix_ones = [0] * (n + 1)
14
    for i in range(n):
15
        prefix_ones[i + 1] = prefix_ones[i] + servers[i]
16
17
    min_cost = float('inf')
18
19
    # Iterate over possible segments to keep
20
    for keep_len in range(1, n):
21
        for start in range(n - keep_len + 1):
22
            end = start + keep_len
23
            24
            # Ones removed when keeping this segment
25
            ones_removed = total_ones - (prefix_ones[end] - prefix_ones[start])
26
            27
            # Zeros kept in this segment
28
            zeros_kept = keep_len - (prefix_ones[end] - prefix_ones[start])
29
            30
            # Compute cost
31
            cost = max(zeros_kept, ones_removed)
32
            min_cost = min(min_cost, cost)
33
34
    return min_cost
35
36
def optimize_by_sliding_window(server_string):
37
    n = len(server_string)
38
    total_ones = server_string.count('1')
39
40
    # Edge case: If all servers are 0s or 1s
41
    if total_ones == 0 or total_ones == n:
42
        return 0
43
44
    min_cost = float('inf')
45
46
    # Sliding window approach
47
    for length in range(1, n):
48
        # Initial window setup
49
        ones_in_window = server_string[:length].count('1')
50
        zeros_in_window = length - ones_in_window
51
        ones_removed = total_ones - ones_in_window
52
        min_cost = min(min_cost, max(zeros_in_window, ones_removed))
53
54
        # Slide the window
55
        for i in range(1, n - length + 1):
56
            # Remove leftmost character
57
            if server_string[i - 1] == '1':
58
                ones_in_window -= 1
59
            else:
60
                zeros_in_window -= 1
61
62
            # Add rightmost character
63
            if server_string[i + length - 1] == '1':
64
                ones_in_window += 1
65
            else:
66
                zeros_in_window += 1
67
68
            ones_removed = total_ones - ones_in_window
69
            cost = max(zeros_in_window, ones_removed)
70
            min_cost = min(min_cost, cost)
71
72
    return min_cost
73
74
def optimize_further(server_string):
75
    n = len(server_string)
76
77
    # Convert to binary list for faster calculations
78
    ones = [1 if c == '1' else 0 for c in server_string]
79
    total_ones = sum(ones)
80
81
    # Edge case: If all servers are 0s or 1s
82
    if total_ones == 0 or total_ones == n:
83
        return 0
84
85
    min_cost = float('inf')
86
87
    # Sliding window technique
88
    for length in range(1, n):
89
        ones_in_window = sum(ones[:length])
90
        zeros_in_window = length - ones_in_window
91
92
        # Compute cost for the first window
93
        ones_removed = total_ones - ones_in_window
94
        min_cost = min(min_cost, max(zeros_in_window, ones_removed))
95
96
        # Slide window across the string
97
        for i in range(length, n):
98
            ones_in_window += ones[i] - ones[i - length]
99
            zeros_in_window = length - ones_in_window
100
101
            ones_removed = total_ones - ones_in_window
102
            min_cost = min(min_cost, max(zeros_in_window, ones_removed))
103
104
    return min_cost
105
106
def solve():
107
    t = int(input().strip())
108
109
    for _ in range(t):
110
        server_string = input().strip()
111
        result = optimize_further(server_string)
112
        print(result)
113
114
# Run the function
115
solve()
116",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054377
1390054369,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        string s;
13
        cin >> s;
14
        int n = s.size();
15
16
        // Prefix sums
17
        vector<int> prefix_1(n + 1, 0);
18
        vector<int> prefix_0(n + 1, 0);
19
        for (int i = 0; i < n; i++) {
20
            prefix_1[i + 1] = prefix_1[i] + (s[i] == '1' ? 1 : 0);
21
            prefix_0[i + 1] = prefix_0[i] + (s[i] == '0' ? 1 : 0);
22
        }
23
24
        int total_1 = prefix_1[n];
25
        int min_cost = n;
26
27
        // Try all possible kept substrings [l, r)
28
        for (int l = 0; l <= n; l++) {
29
            // Instead of full nested loop, calculate cost directly
30
            // for r = n (maximum right end possible for fixed l)
31
            for (int r = l; r <= n; r++) {
32
                int kept_1 = prefix_1[r] - prefix_1[l];
33
                int kept_0 = prefix_0[r] - prefix_0[l];
34
                int removed_1 = total_1 - kept_1;
35
                int cost = max(removed_1, kept_0);
36
                if (cost < min_cost) min_cost = cost;
37
            }
38
        }
39
40
        cout << min_cost << endl;
41
    }
42
    return 0;
43
}
44",85,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054369
