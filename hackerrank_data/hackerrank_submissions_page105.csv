submission_id,username,problem_name,language,code,page,url
1390054010,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    if k == n:
3
        return 0
4
    if k == 0:
5
        return sum(firewalls)
6
7
    min_effort = float('inf')
8
    for i in range(n):
9
        skipped = 0
10
        effort = 0
11
12
        for j in range(n):
13
            if skipped < k and j >= i:
14
                skipped += 1
15
            else:
16
                effort += firewalls[j] + skipped
17
        min_effort = min(min_effort, effort)
18
19
    return min_effort
20
21
T = int(input().strip())
22
results = []
23
24
for _ in range(T):
25
    n, k = map(int, input().split())
26
    firewalls = list(map(int, input().split()))
27
    results.append(min_effort(n, k, firewalls))
28
29
for res in results:
30
    print(res)",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054010
1390054011,unknown,unknown,unknown,"1
def earliest_faulty_readings(t, testcases):
2
    results = []
3
    for case in testcases:
4
        n, k, arr = case
5
        faults = []
6
        7
        for i in range(n - k + 1):  # Iterate over all possible batches
8
            batch = arr[i:i + k]  # Extract the current batch
9
            earliest_fault = 0  # Default to 0 if no faulty component is found
10
            11
            for num in batch:  # Check each number in the batch
12
                if num < 0:  # If it's faulty, take it as the earliest
13
                    earliest_fault = num
14
                    break  # Exit the loop as we found the earliest fault
15
            16
            faults.append(earliest_fault)  # Add result for this batch
17
        18
        results.append(faults)  # Collect results for this test case
19
    return results
20
21
# Read input
22
t = int(input())
23
testcases = []
24
for _ in range(t):
25
    n, k = map(int, input().split())
26
    arr = list(map(int, input().split()))
27
    testcases.append((n, k, arr))
28
29
# Solve and print the results
30
outputs = earliest_faulty_readings(t, testcases)
31
for output in outputs:
32
    print(' '.join(map(str, output)))
33",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054011
1390054008,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    4
    # Count total active servers and total idle servers
5
    total_active = server_string.count('1')
6
    total_idle = n - total_active
7
    8
    # Precompute cumulative counts of active servers from left
9
    active_prefix_sum = [0] * (n + 1)
10
    for i in range(n):
11
        active_prefix_sum[i + 1] = active_prefix_sum[i] + (1 if server_string[i] == '1' else 0)
12
    13
    min_cost = float('inf')
14
    15
    # Try all possible starting positions for the remaining servers
16
    for left in range(n + 1):
17
        # For each possible ending position
18
        for right in range(left, n + 1):
19
            # Active servers in the remaining segment
20
            active_remaining = active_prefix_sum[right] - active_prefix_sum[left]
21
            idle_remaining = (right - left) - active_remaining
22
            23
            # Active servers removed
24
            active_removed = total_active - active_remaining
25
            26
            cost = max(idle_remaining, active_removed)
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
def faster_min_decommission_cost(server_string):
32
    n = len(server_string)
33
    34
    # Precompute prefix sums for active and idle servers
35
    active_prefix = [0] * (n + 1)
36
    idle_prefix = [0] * (n + 1)
37
    38
    for i in range(n):
39
        active_prefix[i + 1] = active_prefix[i] + (server_string[i] == '1')
40
        idle_prefix[i + 1] = idle_prefix[i] + (server_string[i] == '0')
41
    42
    min_cost = n  # Worst case cost
43
    44
    # For each possible remaining substring (from i to j-1)
45
    for i in range(n + 1):
46
        for j in range(i, n + 1):
47
            # Idle servers in remaining substring
48
            idle_remaining = idle_prefix[j] - idle_prefix[i]
49
            50
            # Active servers removed (from left and right)
51
            active_removed = active_prefix[n] - (active_prefix[j] - active_prefix[i])
52
            53
            cost = max(idle_remaining, active_removed)
54
            min_cost = min(min_cost, cost)
55
    56
    return min_cost
57
58
def main():
59
    t = int(input().strip())
60
    61
    for _ in range(t):
62
        server_string = input().strip()
63
        result = faster_min_decommission_cost(server_string)
64
        print(result)
65
66
if __name__ == ""__main__"":
67
    main()",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054008
1390054004,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process the first batch
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the earliest faulty reading of the first batch
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process the remaining batches
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of the current batch
18
        while dq and dq[0] < i - k + 1:
19
            dq.popleft()
20
        21
        # Add the current element if it's faulty
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store the earliest faulty reading of the current batch
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
# Read input
31
t = int(input())
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    print("" "".join(map(str, earliest_faults(arr, k))))
36",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054004
1390054003,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
    for _ in range(t):
8
        s = input_data[line].strip()
9
        line += 1
10
        n = len(s)
11
        # get indices for active servers ('1')
12
        positions = [i for i, ch in enumerate(s) if ch == '1']
13
        m = len(positions)
14
        if m == 0:
15
            out_lines.append(""0"")
16
            continue
17
        # Precompute A: A[i] = positions[i] - i
18
        A = [positions[i] - i for i in range(m)]
19
        20
        # check(X) returns True if there exists a window in A
21
        # such that:
22
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
23
        # and A[j] - A[i] <= X.
24
        def check(X):
25
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                # slide j as far as possible while A[j]-A[i] <= X
33
                while j < m and A[j] - A[i] <= X:
34
                    j += 1
35
                # j now is one past the last index satisfying condition, so the window has length (j - i)
36
                if j - i >= m - X:
37
                    return True
38
            return False
39
40
        # Binary search for the minimum X
41
        lo, hi, ans = 0, n, n
42
        while lo <= hi:
43
            mid = (lo + hi) // 2
44
            if check(mid):
45
                ans = mid
46
                hi = mid - 1
47
            else:
48
                lo = mid + 1
49
        out_lines.append(str(ans))
50
    51
    sys.stdout.write(""\n"".join(out_lines))
52
    53
if __name__ == '__main__':
54
    solve()",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054003
1390054005,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054005
1390053998,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
8
    for _ in range(t):
9
        s = input_data[line].strip()
10
        line += 1
11
        n = len(s)
12
13
        # Get indices of active servers ('1')
14
        positions = [i for i, ch in enumerate(s) if ch == '1']
15
        m = len(positions)
16
17
        if m == 0:
18
            out_lines.append(""0"")
19
            continue
20
21
        # Precompute A: A[i] = positions[i] - i
22
        A = [positions[i] - i for i in range(m)]
23
24
        # Define the check function
25
        def check(X):
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                while j < m and A[j] - A[i] <= X:
33
                    j += 1
34
                if j - i >= m - X:
35
                    return True
36
            return False
37
38
        # Binary search for the minimum X
39
        lo, hi, ans = 0, n, n
40
        while lo <= hi:
41
            mid = (lo + hi) // 2
42
            if check(mid):
43
                ans = mid
44
                hi = mid - 1
45
            else:
46
                lo = mid + 1
47
48
        out_lines.append(str(ans))
49
50
    sys.stdout.write(""\n"".join(out_lines))
51
52
if __name__ == ""__main__"":
53
    solve()",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053998
1390053999,unknown,unknown,unknown,"1
def earliest_fault(arr,k):
2
    result=[]
3
    neg=[]
4
    5
    for i in range(len(arr)):
6
        while neg and neg[0]<i-k+1:
7
            neg.pop(0)
8
        9
        if arr[i]<0:
10
            neg.append(i)
11
            12
        if i>=k-1:
13
            result.append(arr[neg[0]] if neg else 0)
14
    15
    return result
16
17
t= int(input())
18
19
for _ in range(t):
20
    n,k=map(int, input().split())
21
    22
    arr= list(map(int,input().split()))
23
    24
    print("" "".join(map(str,earliest_fault(arr,k))))",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053999
1390054001,unknown,unknown,unknown,"1
def min_decommission_cost(s):
2
    total_ones = s.count('1')
3
    4
    if total_ones == 0:
5
        return 0  # No active servers, cost is 0
6
    7
    # Find first and last '1' in the string
8
    first_one = s.find('1')
9
    last_one = s.rfind('1')
10
    11
    # Consider the segment between first_one and last_one
12
    min_cost = total_ones  # Worst case: remove all ones
13
    14
    for start in range(first_one, last_one + 1):
15
        for end in range(start, last_one + 1):
16
            segment = s[start:end+1]
17
            ones_in_segment = segment.count('1')
18
            zeros_in_segment = segment.count('0')
19
            removed_ones = total_ones - ones_in_segment
20
            21
            cost = max(zeros_in_segment, removed_ones)
22
            min_cost = min(min_cost, cost)
23
    24
    return min_cost
25
26
# Read input
27
t = int(input().strip())
28
for _ in range(t):
29
    s = input().strip()
30
    print(min_decommission_cost(s))
31",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054001
1390053997,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()",105,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053997
