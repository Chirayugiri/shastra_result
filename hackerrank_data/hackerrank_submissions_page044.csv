submission_id,username,problem_name,language,code,page,url
1390055226,unknown,unknown,unknown,"1
def min_effort(n, k, a):
2
    dp = [float('inf')] * (k + 1)
3
    dp[0] = 0
4
    for i in range(n):
5
        prev = dp[:]
6
        for j in range(k + 1):
7
            if j <= i + 1:
8
                dp[j] = prev[j] + a[i] + j
9
            if j > 0:
10
                dp[j] = min(dp[j], prev[j - 1])
11
    return min(dp)
12
13
T = int(input())
14
for _ in range(T):
15
    n, k = map(int, input().split())
16
    a = list(map(int, input().split()))
17
    print(min_effort(n, k, a))",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055226
1390055228,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
 3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0 
5
6
    for i in range(1, n + 1):
7
        for j in range(k + 1):
8
           9
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
10
11
            if j > 0:
12
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
13
14
    return min(dp[n])
15
16
17
T = int(input()) 
18
for _ in range(T):
19
    n, k = map(int, input().split()) 
20
    firewalls = list(map(int, input().split()))  
21
22
    # Compute and print the minimum effort
23
    print(min_effort(n, k, firewalls))",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055228
1390055227,unknown,unknown,unknown,"1
def min_effort_to_breach(arr, k):
2
    n = len(arr)
3
    4
   5
    if k >= n:
6
        return 0
7
    8
  9
    min_effort = float('inf')
10
    11
  12
    effective_costs = []
13
    for i in range(n):
14
       15
        skip_penalty = n - i - 1
16
        17
        18
     19
        effective_cost = arr[i] - skip_penalty
20
        21
        effective_costs.append((effective_cost, i))
22
    23
    24
    effective_costs.sort(reverse=True)
25
    26
   27
    skipped = [False] * n
28
    skips_used = 0
29
    30
    for cost, idx in effective_costs:
31
        if skips_used < k and cost > 0:
32
            skipped[idx] = True
33
            skips_used += 1
34
    35
 36
    total_effort = 0
37
    penalty = 0
38
    39
    for i in range(n):
40
        if skipped[i]:
41
            penalty += 1
42
        else:
43
            total_effort += arr[i] + penalty
44
    45
    return total_effort
46
47
def solve_test_cases():
48
    t = int(input())  -
49
    results = []
50
    51
    for _ in range(t):
52
        n, k = map(int, input().split())
53
        arr = list(map(int, input().split()))
54
        55
        result = min_effort_to_breach(arr, k)
56
        results.append(result)
57
    58
    59
    for result in results:
60
        print(result)
61
62
63
if __name__ == ""__main__"":
64
    solve_test_cases()",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055227
1390055219,unknown,unknown,unknown,"1
2
def min_cost_server_pruning(server_rack):
3
4
    n = len(server_rack)
5
    active_prefix_sum = [0] * (n + 1)
6
    idle_suffix_sum = [0] * (n + 1)
7
8
    for i in range(n):
9
10
        active_prefix_sum[i+1] = active_prefix_sum[i] + (1 if server_rack[i] == '1' else 0)
11
12
    for i in range(n-1, -1, -1):
13
14
        idle_suffix_sum[i] = idle_suffix_sum[i+1] + (1 if server_rack[i] == '0' else 0)
15
16
    min_cost = float('inf')
17
18
19
    for left in range(n + 1):
20
21
        for right in range(left, n + 1):
22
            active_removed = active_prefix_sum[left] + (active_prefix_sum[n] - active_prefix_sum[right])
23
24
            idle_remaining = idle_suffix_sum[left] - idle_suffix_sum[right]
25
            cost = max(idle_remaining, active_removed)
26
27
            min_cost = min(min_cost, cost)
28
29
    return min_cost
30
31
t = int(input())
32
33
for _ in range(t):
34
35
    server_rack = input().strip()
36
37
    print(min_cost_server_pruning(server_rack))",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055219
1390055216,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
7
        Scanner sc = new Scanner(System.in);
8
9
        int T = sc.nextInt();
10
11
        sc.nextLine();
12
13
        while (T-- > 0) {
14
15
            String s = sc.nextLine().trim();
16
17
            int n = s.length();
18
19
            int totalOnes = 0;
20
21
            int maxConsecutiveOnes = 0;
22
23
            int currentConsecutiveOnes = 0;
24
25
            26
27
            for (char c : s.toCharArray()) {
28
29
                if (c == '1') {
30
31
                    currentConsecutiveOnes++;
32
33
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
34
35
                    totalOnes++;
36
37
                } else {
38
39
                    currentConsecutiveOnes = 0;
40
41
                }
42
43
            }
44
45
            46
47
            if (totalOnes == 0) {
48
49
                System.out.println(0);
50
51
                continue;
52
53
            }
54
55
            if (maxConsecutiveOnes == totalOnes) {
56
57
                System.out.println(0);
58
59
                continue;
60
61
            }
62
63
            64
65
            int totalZeros = n - totalOnes;
66
67
            int low = 0;
68
69
            int high = Math.max(totalOnes, totalZeros);
70
71
            int answer = high;
72
73
            74
75
            while (low <= high) {
76
77
                int mid = (low + high) / 2;
78
79
                int requiredOnes = Math.max(0, totalOnes - mid);
80
81
                82
83
                if (requiredOnes == 0) {
84
85
                    answer = mid;
86
87
                    high = mid - 1;
88
89
                    continue;
90
91
                }
92
93
                94
95
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
96
97
                if (maxOnes >= requiredOnes) {
98
99
                    answer = mid;
100
101
                    high = mid - 1;
102
103
                } else {
104
105
                    low = mid + 1;
106
107
                }
108
109
            }
110
111
            112
113
            System.out.println(answer);
114
115
        }
116
117
        sc.close();
118
119
    }
120
121
    122
123
    private static int maxOnesWithAtMostKZeros(String s, int k) {
124
125
        int left = 0;
126
127
        int zeros = 0;
128
129
        int maxOnes = 0;
130
131
        int n = s.length();
132
133
        134
135
        for (int right = 0; right < n; right++) {
136
137
            if (s.charAt(right) == '0') {
138
139
                zeros++;
140
141
            }
142
143
            while (zeros > k) {
144
145
                if (s.charAt(left) == '0') {
146
147
                    zeros--;
148
149
                }
150
151
                left++;
152
153
            }
154
155
            int currentOnes = (right - left + 1) - zeros;
156
157
            maxOnes = Math.max(maxOnes, currentOnes);
158
159
        }
160
161
        162
163
        return maxOnes;
164
165
    }
166
167
}",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055216
1390055223,unknown,unknown,unknown,"1
def min_decommission_cost(s: str) -> int:
2
    n = len(s)
3
    ones_pos = [i for i, ch in enumerate(s) if ch == '1']
4
    T = len(ones_pos)
5
    6
    if T == 0:
7
        return 0
8
    9
    zeros_total = s.count('0')
10
    ans = min(zeros_total, T) 
11
    12
    for X in range(1, T + 1):
13
        for i in range(0, T - X + 1):
14
            left = ones_pos[i]
15
            right = ones_pos[i + X - 1]
16
            length = right - left + 1
17
            zeros_in_block = length - X
18
            candidate = max(zeros_in_block, T - X)
19
            ans = min(ans, candidate)
20
    21
    return ans
22
23
if __name__ == '__main__':
24
    T = int(input().strip())
25
    for _ in range(T):
26
        s = input().strip()
27
        print(min_decommission_cost(s))",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055223
1390055212,unknown,unknown,unknown,"1
def min_cost_server_pruning(server_rack):
2
    n = len(server_rack)  
3
4
5
    active_prefix_sum = [0] * (n + 1)
6
    idle_suffix_sum = [0] * (n + 1)
7
8
    for i in range(n):
9
        active_prefix_sum[i+1] = active_prefix_sum[i] + (1 if server_rack[i] == '1' else 0)
10
    for i in range(n-1, -1, -1):
11
        idle_suffix_sum[i] = idle_suffix_sum[i+1] + (1 if server_rack[i] == '0' else 0)
12
13
    min_cost = float('inf')
14
15
    for left in range(n + 1):
16
        for right in range(left, n + 1):
17
            active_removed = active_prefix_sum[left] + (active_prefix_sum[n] - active_prefix_sum[right])
18
            idle_remaining = idle_suffix_sum[left] - idle_suffix_sum[right]
19
            cost = max(idle_remaining, active_removed)
20
            min_cost = min(min_cost, cost)
21
22
    return min_cost
23
24
t = int(input())
25
for _ in range(t):
26
    server_rack = input().strip()
27
    print(min_cost_server_pruning(server_rack))",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055212
1390055213,unknown,unknown,unknown,"1
function processData(input) {
2
    let data = input.trim().split(/\s+/);
3
    let index = 0;
4
    let T = parseInt(data[index++]);
5
    let output = [];
6
7
    for (let test = 0; test < T; test++) {
8
        let n = parseInt(data[index++]);
9
        let k = parseInt(data[index++]);
10
        let a = data.slice(index, index + n).map(Number);
11
        index += n;
12
13
        let sumA = a.reduce((acc, num) => acc + num, 0);
14
        let v = [];
15
16
        for (let i = 0; i < n; i++) {
17
            v.push(a[i] - (n - i - 1));
18
        }
19
20
        v.sort((a, b) => b - a);
21
22
        let prefix = Array(n + 1).fill(0);
23
        for (let i = 0; i < n; i++) {
24
            prefix[i + 1] = prefix[i] + v[i];
25
        }
26
27
        let maxSum = 0;
28
        let maxT = Math.min(k, n);
29
30
        for (let t = 0; t <= maxT; t++) {
31
            let current = prefix[t] + (t * (t - 1)) / 2;
32
            maxSum = Math.max(maxSum, current);
33
        }
34
35
        output.push(sumA - maxSum);
36
    }
37
38
    console.log(output.join(""\n""));
39
}
40
41
process.stdin.resume();
42
process.stdin.setEncoding(""utf-8"");
43
let input = """";
44
45
process.stdin.on(""data"", function (chunk) {
46
    input += chunk;
47
});
48
49
process.stdin.on(""end"", function () {
50
    processData(input);
51
});
52
53",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055213
1390055215,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int t = scanner.nextInt();
7
        scanner.nextLine(); // Consume newline
8
        9
        for (int i = 0; i < t; i++) {
10
            String servers = scanner.nextLine();
11
            int minCost = minimizeServerCost(servers);
12
            System.out.println(minCost);
13
        }
14
        scanner.close();
15
    }
16
    17
    public static int minimizeServerCost(String servers) {
18
        int n = servers.length();
19
        20
        // Precompute prefix sums for O(1) range queries
21
        int[] prefixZeros = new int[n + 1];
22
        int[] prefixOnes = new int[n + 1];
23
        24
        for (int i = 0; i < n; i++) {
25
            prefixZeros[i + 1] = prefixZeros[i] + (servers.charAt(i) == '0' ? 1 : 0);
26
            prefixOnes[i + 1] = prefixOnes[i] + (servers.charAt(i) == '1' ? 1 : 0);
27
        }
28
        29
        int minCost = Integer.MAX_VALUE;
30
        int totalOnes = prefixOnes[n];
31
        32
        // Special case optimization - removing no servers
33
        minCost = Math.min(minCost, prefixZeros[n]);
34
        35
        // Optimization: instead of nested loops, use a different approach
36
        // For each possible prefix end position
37
        for (int prefixEnd = 0; prefixEnd <= n; prefixEnd++) {
38
            int onesRemovedFromPrefix = prefixOnes[prefixEnd];
39
            40
            // For minimal cost, we want to minimize max(zerosRemaining, onesRemoved)
41
            // Since onesRemovedFromPrefix is fixed, we can binary search for the optimal suffix
42
            int left = prefixEnd;
43
            int right = n;
44
            45
            while (left <= right) {
46
                int mid = left + (right - left) / 2;
47
                48
                int zerosRemaining = prefixZeros[mid] - prefixZeros[prefixEnd];
49
                int onesRemovedFromSuffix = totalOnes - prefixOnes[mid];
50
                int onesRemoved = onesRemovedFromPrefix + onesRemovedFromSuffix;
51
                52
                if (zerosRemaining <= onesRemoved) {
53
                    // Try to decrease onesRemoved by moving right
54
                    left = mid + 1;
55
                } else {
56
                    // Try to increase zerosRemaining by moving left
57
                    right = mid - 1;
58
                }
59
                60
                int cost = Math.max(zerosRemaining, onesRemoved);
61
                if (prefixEnd > 0 || mid < n) { // Skip if removing nothing
62
                    minCost = Math.min(minCost, cost);
63
                }
64
            }
65
        }
66
        67
        // Handle cases where we couldn't find an optimal solution
68
        // One more pass with the regular approach
69
        for (int prefixEnd = 0; prefixEnd <= n; prefixEnd++) {
70
            for (int suffixStart = n; suffixStart >= prefixEnd; suffixStart--) {
71
                // Skip if removing nothing
72
                if (prefixEnd == 0 && suffixStart == n) continue;
73
                74
                int onesRemoved = prefixOnes[prefixEnd] + (prefixOnes[n] - prefixOnes[suffixStart]);
75
                int zerosRemaining = prefixZeros[suffixStart] - prefixZeros[prefixEnd];
76
                77
                int cost = Math.max(zerosRemaining, onesRemoved);
78
                minCost = Math.min(minCost, cost);
79
                80
                // Early termination if we have a boundary case
81
                if (prefixEnd == 0 || suffixStart == n) {
82
                    break; // We only need to check one boundary case
83
                }
84
            }
85
        }
86
        87
        return minCost;
88
    }
89
}",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055215
1390055210,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])  # Number of test cases
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())  # Number of firewalls and skips allowed
13
        strengths = list(map(int, data[index + 1].split()))  # Firewall strengths
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if _name_ == ""_main_"":
45
    main()
46",44,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055210
