submission_id,username,problem_name,language,code,page,url
1390052275,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    result.append(arr[dq[0]] if dq else 0)
12
    13
    for i in range(k, len(arr)):
14
        while dq and dq[0] <= i - k:
15
            dq.popleft()
16
        17
        if arr[i] < 0:
18
            dq.append(i)
19
        20
        result.append(arr[dq[0]] if dq else 0)
21
    22
    return result
23
24
t = int(input())
25
for _ in range(t):
26
    n, k = map(int, input().split())
27
    arr = list(map(int, input().split()))
28
    print("" "".join(map(str, earliest_faulty_readings(arr, k))))",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052275
1390052274,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    ans = []
5
    6
    for tc in test_cases:
7
        n, k, arr = tc
8
        dq = deque()
9
        sol = []
10
11
        for i in range(k):
12
            if arr[i] < 0:
13
                dq.append(i)
14
15
        sol.append(arr[dq[0]] if dq else 0)
16
17
        for i in range(k, n):
18
            if dq and dq[0] < i - k + 1:
19
                dq.popleft()
20
            21
            if arr[i] < 0:
22
                dq.append(i)
23
24
            sol.append(arr[dq[0]] if dq else 0)
25
        26
        ans.append(sol)
27
    28
    return ans
29
30
t = int(input())  
31
test_cases = []
32
33
for _ in range(t):
34
    n, k = map(int, input().split())
35
    arr = list(map(int, input().split()))
36
    test_cases.append((n, k, arr))
37
    38
for res in earliest_faulty_readings(test_cases):
39
    print(*res)
40",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052274
1390052277,unknown,unknown,unknown,"1
def solve():
2
    t = int(input())
3
    for _ in range(t):
4
        s = input()
5
        n = len(s)
6
        7
        min_cost = float('inf')
8
        9
        for i in range(n + 1):
10
            for j in range(n - i + 1):
11
                removed_start = s[:i]
12
                remaining = s[i:n-j]
13
                removed_end = s[n-j:]
14
                15
                idle_remaining = remaining.count('0')
16
                active_removed = removed_start.count('1') + removed_end.count('1')
17
                18
                cost = max(idle_remaining, active_removed)
19
                min_cost = min(min_cost, cost)
20
        21
        print(min_cost)
22
23
solve()",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052277
1390052262,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_earliest_faults(num_cases, inputs):
4
    all_outputs = []
5
    6
    for data in inputs:
7
        length, window, readings = data
8
        queue = deque()
9
        result = []
10
        11
        for idx in range(length):
12
            while queue and queue[0] < idx - window + 1:
13
                queue.popleft()
14
            15
            if readings[idx] < 0:
16
                queue.append(idx)
17
            18
            if idx >= window - 1:
19
                result.append(readings[queue[0]] if queue else 0)
20
        21
        all_outputs.append(result)
22
    23
    return all_outputs
24
25
num_cases = int(input())
26
inputs = []
27
28
for _ in range(num_cases):
29
    length, window = map(int, input().split())
30
    readings = list(map(int, input().split()))
31
    inputs.append((length, window, readings))
32
33
all_outputs = find_earliest_faults(num_cases, inputs)
34
35
for output in all_outputs:
36
    print("" "".join(map(str, output)))",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052262
1390052264,unknown,unknown,unknown,"1
def find_faulty_readings(arr, k):
2
    n = len(arr)
3
    results = []
4
    for i in range(n - k + 1):
5
        batch = arr[i:i+k]
6
        faulty_index = next((j for j, value in enumerate(batch) if value < 0), None)
7
        if faulty_index is not None:
8
            results.append(batch[faulty_index])
9
        else:
10
            results.append(0)
11
    return results
12
13
# Read input
14
import sys
15
input = sys.stdin.read
16
data = input().split()
17
18
t = int(data[0])  # Number of test cases
19
20
index = 1
21
results = []
22
for _ in range(t):
23
    n = int(data[index])
24
    k = int(data[index + 1])
25
    index += 2
26
    arr = list(map(int, data[index:index + n]))
27
    index += n
28
    29
    results.append(find_faulty_readings(arr, k))
30
31
# Print results
32
for result in results:
33
    print("" "".join(map(str, result)))",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052264
1390052270,unknown,unknown,unknown,"1
def earliest_faulty_reading(test_cases):
2
    results = []
3
    4
    for n, k, arr in test_cases:
5
        batch_results = []
6
        7
        for i in range(n - k + 1):
8
            batch = arr[i:i + k]
9
            faulty = next((x for x in batch if x < 0), 0)
10
            batch_results.append(faulty)
11
        12
        results.append(batch_results)
13
    14
    return results
15
16
17
if __name__==""__main__"":
18
    t = int(input())
19
    test_cases = []
20
    21
    for _ in range(t):
22
        n, k = map(int, input().strip().split())
23
        arr = list(map(int, input().strip().split()))
24
        test_cases.append((n, k, arr))
25
26
    results = earliest_faulty_reading(test_cases)
27
    28
    for res in results:
29
        print(*res)",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052270
1390052252,unknown,unknown,unknown,"1
def earliest_faulty_reading(test_cases):
2
    results = []
3
    4
    for n, k, arr in test_cases:
5
        batch_results = []
6
        7
        for i in range(n - k + 1):
8
            batch = arr[i:i + k]
9
            faulty = next((x for x in batch if x < 0), 0)
10
            batch_results.append(faulty)
11
        12
        results.append(batch_results)
13
    14
    return results
15
16
17
if __name__ == ""__main__"":
18
    t = int(input())
19
    test_cases = []
20
    21
    for _ in range(t):
22
        n, k = map(int, input().strip().split())
23
        arr = list(map(int, input().strip().split()))
24
        test_cases.append((n, k, arr))
25
26
    results = earliest_faulty_reading(test_cases)
27
    28
    for res in results:
29
        print(*res)",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052252
1390052257,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
#include <limits.h>
4
5
int main() {
6
    int T;
7
    scanf(""%d"", &T);
8
9
    while (T--) {
10
        int n, k;
11
        scanf(""%d %d"", &n, &k);
12
13
        int a[n];
14
        for (int i = 0; i < n; i++) {
15
            scanf(""%d"", &a[i]);
16
        }
17
18
        long long min_effort = LLONG_MAX;
19
20
        for (int i = 0; i < (1 << n); i++) {
21
            if (__builtin_popcount(i) == k) {
22
                long long current_effort = 0;
23
                int prev_skipped = 0;
24
                for (int j = 0; j < n; j++) {
25
                    if ((i >> j) & 1) {
26
                        continue;
27
                    } else {
28
                        current_effort += a[j];
29
                        if (prev_skipped>0) {
30
                            current_effort += prev_skipped;
31
                        }
32
                        prev_skipped = 1;
33
34
                    }
35
36
                }
37
                min_effort = (current_effort < min_effort) ? current_effort : min_effort;
38
            }
39
        }
40
        if(k == n){
41
            printf(""0\n"");
42
        }
43
        else{
44
            printf(""%lld\n"", min_effort);
45
        }
46
47
    }
48
49
    return 0;
50
}",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052257
1390052256,unknown,unknown,unknown,"1
def find_earliest_faulty(arr, k):
2
    result = []
3
    for i in range(len(arr) - k + 1):
4
        batch = arr[i:i+k]
5
        for num in batch:
6
            if num < 0:
7
                result.append(num)
8
                break
9
        else:
10
            result.append(0)
11
    return result
12
13
def main():
14
    t = int(input())
15
    for _ in range(t):
16
        n, k = map(int, input().split())
17
        arr = list(map(int, input().split()))
18
        output = find_earliest_faulty(arr, k)
19
        print(' '.join(map(str, output)))
20
21
if __name__ == ""__main__"":
22
    main()",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052256
1390052249,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
4
    if k == 0:
5
        return total_effort
6
    if k >= n:
7
        return 0  # If we can skip all firewalls, effort is 0
8
9
    min_effort = total_effort
10
    for i in range(n - k + 1):  # Sliding window for skipping `k` firewalls
11
        skipped = sum(firewalls[i:i + k])  # Sum of k skipped firewalls
12
        penalty = sum(range(1, k + 1))  # Security increase for remaining firewalls
13
        remaining_effort = total_effort - skipped + penalty
14
        min_effort = min(min_effort, remaining_effort)
15
16
    return min_effort
17
18
def process_test_cases():
19
    T = int(input())
20
    for _ in range(T):
21
        n, k = map(int, input().split())
22
        firewalls = list(map(int, input().split()))
23
        print(min_effort_to_breach(n, k, firewalls))
24
25
if __name__ == ""__main__"":
26
    process_test_cases()
27",184,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052249
