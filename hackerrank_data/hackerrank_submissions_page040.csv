submission_id,username,problem_name,language,code,page,url
1390055318,unknown,unknown,unknown,"1
def minimum_decommission_cost(servers):
2
    n = len(servers)
3
    4
    # Convert the string to a list of integers (0 or 1)
5
    server_list = [int(c) for c in servers]
6
7
    # Compute prefix sum of active servers (1s)
8
    prefix_sum = [0] * (n + 1)
9
    for i in range(n):
10
        prefix_sum[i + 1] = prefix_sum[i] + server_list[i]
11
12
    total_ones = prefix_sum[n]  # Total active servers
13
    min_cost = total_ones  # Worst case: decommission all active servers
14
15
    j = 0  # Right boundary of the window
16
    for i in range(n + 1):
17
        # Move j to maintain segment_zeros >= total_ones_removed
18
        while j <= n and (j - i) - (prefix_sum[j] - prefix_sum[i]) <= (prefix_sum[i] + (total_ones - prefix_sum[j])):
19
            j += 1
20
        21
        # Calculate cost at current window
22
        segment_zeros = (j - i - 1) - (prefix_sum[j - 1] - prefix_sum[i])
23
        left_ones = prefix_sum[i]
24
        right_ones = total_ones - prefix_sum[j - 1]
25
        cost = max(segment_zeros, left_ones + right_ones)
26
        27
        min_cost = min(min_cost, cost)
28
29
    return min_cost
30
31
def process_input():
32
    import sys
33
    input = sys.stdin.read
34
    data = input().split()
35
    36
    t = int(data[0])
37
    results = []
38
    39
    for i in range(1, t + 1):
40
        results.append(str(minimum_decommission_cost(data[i])))
41
    42
    print(""\n"".join(results))
43
44
if __name__ == ""__main__"":
45
    process_input()
46",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055318
1390055319,unknown,unknown,unknown,"1
def min_effort_to_breach_firewalls(t, test_cases):
2
    results = []
3
4
    for test in test_cases:
5
        n, k = test[0]
6
        arr = test[1]
7
8
        # Sort firewall strengths in descending order
9
        arr_sorted = sorted(arr, reverse=True)
10
11
        # Choose top k strong firewalls to skip
12
        skips = set()
13
        for i in range(k):
14
            skips.add(arr_sorted[i])
15
16
        total_effort = 0
17
        skipped = 0
18
19
        for strength in arr:
20
            if strength in skips and skipped < k:
21
                skipped += 1
22
                skips.remove(strength)  # Remove to handle duplicates properly
23
            else:
24
                total_effort += strength + skipped  # Each skip adds +1 to every subsequent effort
25
26
        results.append(total_effort)
27
28
    return results
29
30
31
# -------- DRIVER CODE --------
32
T = int(input())
33
test_cases = []
34
35
for _ in range(T):
36
    n, k = map(int, input().split())
37
    arr = list(map(int, input().split()))
38
    test_cases.append(((n, k), arr))
39
40
answers = min_effort_to_breach_firewalls(T, test_cases)
41
42
for ans in answers:
43
    print(ans)
44",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055319
1390055316,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055316
1390055309,unknown,unknown,unknown,"1
def min_effort(tst_case):
2
    rst = []
3
    for n, k, st in tst_case:
4
        st.sort()
5
        if k >= n:
6
            rst.append(0)
7
        else:
8
            te = sum(st[k:])
9
            rst.append(te)
10
    return rst
11
12
if __name__==""__main__"":
13
    T = int(input())
14
    tst_case = []
15
    for _ in range(T):
16
        n, k = map(int, input().split())
17
        st =  list(map(int,input().split()))
18
        tst_case.append((n,k,st))
19
    20
    rst = min_effort(tst_case)
21
    22
    for res in rst:
23
        print(res)",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055309
1390055313,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(t, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        n, k, arr = case
8
        dq = deque()
9
        output = []
10
        11
        for i in range(n):
12
            # Remove elements that are out of this window
13
            if dq and dq[0] < i - k + 1:
14
                dq.popleft()
15
            16
            # Add current element if it is faulty (negative)
17
            if arr[i] < 0:
18
                dq.append(i)
19
            20
            # Process first valid window
21
            if i >= k - 1:
22
                output.append(arr[dq[0]] if dq else 0)
23
        24
        results.append(output)
25
    26
    return results
27
28
# Reading input
29
t = int(input())
30
test_cases = []
31
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    test_cases.append((n, k, arr))
36
37
# Processing and printing output
38
results = earliest_faulty_readings(t, test_cases)
39
for res in results:
40
    print("" "".join(map(str, res)))",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055313
1390055314,unknown,unknown,unknown,"1
// #include <cmath>
2
// #include <cstdio>
3
// #include <vector>
4
// #include <iostream>
5
// #include <algorithm>
6
// using namespace std;
7
8
9
// int main() {
10
//     /* Enter your code here. Read input from STDIN. Print output to STDOUT */
11
//     int t=0;
12
//     cin>>t;
13
//     while(t){
14
//     int n=0,k=0,sum=0;
15
//     cin>>n;
16
//     cin>>k;
17
//     vector<int>arr;
18
//     for(int i=0;i<n;i++){
19
//         int temp=0;
20
//         cin>>temp;
21
//         arr.emplace_back(temp);
22
//     }
23
    24
//     while(k){
25
//         int maximum=max_element(arr.begin(),arr.end());
26
//         // cout<<maximum<<"" "";
27
//         for (auto it = maximum; it != arr.end(); ++it) {
28
//         (*it)++;  //+1
29
//     }
30
//         arr.erase(remove(arr.begin(), arr.end(), maximum), arr.end());
31
//         k--;
32
//     }
33
//     for(auto it:arr){
34
//         sum+=it;
35
//     }
36
//         cout<<sum<<endl;
37
//         t--;
38
//     }
39
    40
    41
    42
    43
    44
    45
//     return 0;
46
// }
47
48
49
#include <iostream>
50
#include <vector>
51
#include <algorithm>
52
using namespace std;
53
54
int main() {
55
    int t;
56
    cin >> t;
57
58
    while (t--) {
59
        int n, k;
60
        cin >> n >> k;
61
        vector<int> arr(n);
62
        63
        for (int i = 0; i < n; i++) {
64
            cin >> arr[i];
65
        }   
66
        67
        68
        for (int i = 0; i < k; i++) {
69
            auto max_it = max_element(arr.begin(), arr.end());
70
            71
            if (max_it == arr.end()) break;
72
            73
            int max_index = distance(arr.begin(), max_it);
74
            for (int j = max_index + 1; j < n; j++) {
75
                arr[j]++;
76
            }
77
            arr.erase(max_it);
78
            n--;
79
        }
80
        81
        82
        83
        int sum = 0;
84
        for (int x : arr) {
85
            sum += x;
86
        }
87
88
        cout << sum << endl;
89
    }
90
    91
    92
    93
    94
    95
    96
    97
98
    return 0;
99
}
100",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055314
1390055305,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); 
8
        9
        while(T-- > 0) {
10
            int n = sc.nextInt();
11
            int k = sc.nextInt();
12
            int[] a = new int[n];
13
            for (int i = 0; i < n; i++){
14
                a[i] = sc.nextInt();
15
            }
16
            17
           18
            if(k >= n) {
19
                System.out.println(0);
20
                continue;
21
            }
22
            23
         24
            long INF = Long.MAX_VALUE / 2;
25
            long[] dp = new long[k+1];
26
            Arrays.fill(dp, INF);
27
            dp[0] = 0;
28
            29
            30
            for (int i = 0; i < n; i++) {
31
                int lim = Math.min(i+1, k);
32
                long[] newdp = new long[k+1];
33
                Arrays.fill(newdp, INF);
34
                35
               36
                for (int j = lim; j >= 0; j--) {
37
                   38
                    newdp[j] = Math.min(newdp[j], dp[j] + a[i] + j);
39
                    40
                   41
                    if(j < k) {
42
                        newdp[j+1] = Math.min(newdp[j+1], dp[j]);
43
                    }
44
                }
45
                dp = newdp;
46
            }
47
            48
           49
            long ans = INF;
50
            for (int j = 0; j <= k; j++) {
51
                ans = Math.min(ans, dp[j]);
52
            }
53
            System.out.println(ans);
54
        }
55
        sc.close();
56
    }
57
}",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055305
1390055306,unknown,unknown,unknown,"1
t = int(input())  
2
3
while t > 0:
4
    l, s = map(int, input().split()) 
5
    user_input = list(map(int, input().split()))  
6
    7
    total_effort = sum(user_input)  
8
    min_effort = total_effort  
9
10
    for i in range(l):  
11
        new_effort = (total_effort - user_input[i]) + s * (l - 1)
12
        min_effort = min(min_effort, new_effort)  
13
    14
    print(min_effort)  
15
    t -= 1  
16
 17
        ",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055306
1390055307,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for s in test_cases:
5
        n = len(s)
6
        7
        prefix_ones = [0] * (n + 1)
8
        prefix_zeros = [0] * (n + 1)
9
        10
        for i in range(1, n + 1):
11
            prefix_ones[i] = prefix_ones[i - 1] + (1 if s[i - 1] == '1' else 0)
12
            prefix_zeros[i] = prefix_zeros[i - 1] + (1 if s[i - 1] == '0' else 0)
13
        14
        total_ones = prefix_ones[n]
15
        total_zeros = prefix_zeros[n]
16
        17
        min_cost = float('inf')
18
        19
        for i in range(n + 1):
20
            for j in range(i, n + 1):
21
                ones_in_subarray = prefix_ones[j] - prefix_ones[i]
22
                zeros_in_subarray = prefix_zeros[j] - prefix_zeros[i]
23
                24
                removed_ones = total_ones - ones_in_subarray
25
                cost = max(zeros_in_subarray, removed_ones)
26
                27
                min_cost = min(min_cost, cost)
28
        29
        results.append(min_cost)
30
    31
    return results
32
33
T = int(input())
34
test_cases = [input().strip() for _ in range(T)]
35
36
results = min_decommissioning_cost(test_cases)
37
38
for result in results:
39
    print(result)
40",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055307
1390055304,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    4
    for n, k, arr in test_cases:
5
        output = []
6
        for i in range(n - k + 1):
7
            batch = arr[i:i + k]
8
            found = next((x for x in batch if x < 0), 0)
9
            output.append(str(found))
10
        11
        results.append("" "".join(output))
12
    13
    return results
14
15
16
t = int(input().strip())
17
test_cases = []
18
for _ in range(t):
19
    n, k = map(int, input().split())
20
    arr = list(map(int, input().split()))
21
    test_cases.append((n, k, arr))
22
23
24
for result in earliest_faulty_readings(test_cases):
25
    print(result)
26",40,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055304
