submission_id,username,problem_name,language,code,page,url
1390053837,unknown,unknown,unknown,"1
import java.io.BufferedReader;
2
import java.io.IOException;
3
import java.io.InputStreamReader;
4
import java.io.PrintWriter;
5
6
class Solution {
7
    public static void main(String[] args) throws IOException {
8
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
9
        PrintWriter pw = new PrintWriter(System.out);
10
11
        int t = Integer.parseInt(br.readLine());
12
        while (t-- > 0) {
13
            String serverRack = br.readLine().trim();
14
            pw.println(minPruningCost(serverRack));
15
        }
16
17
        pw.close();
18
        br.close();
19
    }
20
21
    public static int minPruningCost(String serverRack) {
22
        int n = serverRack.length();
23
        int minCost = n + 1; // Initialize with a value larger than any possible cost
24
25
        for (int leftRemoveCount = 0; leftRemoveCount <= n; ++leftRemoveCount) {
26
            for (int rightRemoveCount = 0; rightRemoveCount <= n - leftRemoveCount; ++rightRemoveCount) {
27
                int idleRemaining = 0;
28
                int activeRemoved = 0;
29
30
                // Calculate activeRemoved servers
31
                for (int i = 0; i < leftRemoveCount; ++i) {
32
                    if (serverRack.charAt(i) == '1') {
33
                        activeRemoved++;
34
                    }
35
                }
36
                for (int i = n - rightRemoveCount; i < n; ++i) {
37
                    if (serverRack.charAt(i) == '1') {
38
                        activeRemoved++;
39
                    }
40
                }
41
42
                // Calculate idleRemaining servers
43
                for (int i = leftRemoveCount; i < n - rightRemoveCount; ++i) {
44
                    if (serverRack.charAt(i) == '0') {
45
                        idleRemaining++;
46
                    }
47
                }
48
49
                int cost = Math.max(idleRemaining, activeRemoved);
50
                minCost = Math.min(minCost, cost);
51
            }
52
        }
53
        return minCost;
54
    }
55
}",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053837
1390053839,unknown,unknown,unknown,"1
def bf(arr, k):
2
    if k==0:
3
        return sum(arr)
4
    elif k >= len(arr):
5
        return 0
6
    else:
7
        arr.sort(reverse=True)
8
        return sum(arr[k:])+1
9
10
t = int(input())
11
for _ in range(t):
12
    n, k = map(int, input().split())
13
    arr = list(map(int, input().split()))
14
    print(bf(arr, k))
15",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053839
1390053842,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
     public static void main(String[] args) {
7
        Scanner input = new Scanner(System.in);
8
        int testCases = input.nextInt();
9
10
        while (testCases-- > 0) {
11
            int size = input.nextInt();
12
            int limit = input.nextInt();
13
            int[] elements = new int[size];
14
            long totalSum = 0;
15
16
            for (int i = 0; i < size; i++) {
17
                elements[i] = input.nextInt();
18
                totalSum += elements[i];
19
            }
20
21
            List<Long> adjustedValues = new ArrayList<>();
22
            for (int i = 0; i < size; i++) {
23
                long value = elements[i] - (size - i - 1L);
24
                adjustedValues.add(value);
25
            }
26
27
            adjustedValues.sort((a, b) -> Long.compare(b, a));
28
29
            long[] prefixSum = new long[size + 1];
30
            for (int i = 1; i <= size; i++) {
31
                prefixSum[i] = prefixSum[i - 1] + adjustedValues.get(i - 1);
32
            }
33
34
            int maxOperations = Math.min(limit, size);
35
            long highestSum = Long.MIN_VALUE;
36
37
            for (int ops = 0; ops <= maxOperations; ops++) {
38
                long currentSum = prefixSum[ops] + ((long) ops * (ops - 1)) / 2;
39
                if (currentSum > highestSum) {
40
                    highestSum = currentSum;
41
                }
42
            }
43
44
            long minEffort = totalSum - highestSum;
45
            System.out.println(minEffort);
46
        }
47
48
        input.close();
49
    }
50
}",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053842
1390053833,unknown,unknown,unknown,"1
def min_decommissioning_cost(t, test_cases):
2
    results = []
3
    for s in test_cases:
4
        # Find the first and last occurrence of '1'
5
        first_one = s.find('1')
6
        last_one = s.rfind('1')
7
        8
        # If there are no '1's, we can remove everything
9
        if first_one == -1:
10
            results.append(0)
11
            continue
12
        13
        # Extract the relevant portion of the string
14
        trimmed = s[first_one:last_one+1]
15
        16
        # Count remaining idle (0's) and removed active (1's)
17
        idle_remaining = trimmed.count('0')
18
        active_removed = first_one + (len(s) - 1 - last_one)
19
        20
        # Compute minimum cost
21
        results.append(max(idle_remaining, active_removed))
22
    23
    return results
24
25
# Read input
26
t = int(input().strip())
27
test_cases = [input().strip() for _ in range(t)]
28
29
# Compute and print results
30
for res in min_decommissioning_cost(t, test_cases):
31
    print(res)",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053833
1390053835,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        7
        # Precompute prefix sums for 0's and 1's
8
        prefix_0 = [0] * (n + 1)
9
        prefix_1 = [0] * (n + 1)
10
        for i in range(n):
11
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
12
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
13
        14
        # Iterate through all possible splits
15
        for i in range(n + 1):
16
            for j in range(i, n + 1):
17
                # Remaining segment is from i to j-1
18
                remaining_0s = prefix_0[j] - prefix_0[i]
19
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
20
                cost = max(remaining_0s, removed_1s)
21
                if cost < min_cost:
22
                    min_cost = cost
23
        results.append(min_cost)
24
    return results
25
26
# Read input
27
T = int(input())
28
test_cases = [input().strip() for _ in range(T)]
29
30
# Compute results
31
results = min_decommission_cost(test_cases)
32
33
# Print output
34
for result in results:
35
    print(result)
36
37",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053835
1390053834,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    min_cost = float('inf')
6
    7
    for i in range(n + 1):
8
        for j in range(n - i + 1):
9
            remaining = s[i:n-j]
10
            11
            idle_count = remaining.count('0')
12
            removed_count = s[:i].count('1') + s[n-j:].count('1')
13
            14
            cost = max(idle_count, removed_count)
15
            min_cost = min(min_cost, cost)
16
            17
    print(min_cost)
18
19
t = int(input())
20
for _ in range(t):
21
    solve()",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053834
1390053827,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process the first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store the result for the first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process the remaining windows
17
    for i in range(k, n):
18
        # Remove elements that are out of the current window
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add the current element if it is negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Store the result for the current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Size of array and batch size
35
    arr = list(map(int, input().split()))  # Array elements
36
    37
    # Get the results and print as space-separated values
38
    print(*earliest_faulty_readings(arr, k))",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053827
1390053829,unknown,unknown,unknown,"1
def minimize_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
4
    skip_value = []
5
    for i in range(n):
6
        skip_value.append((firewalls[i] + i, i))
7
8
    skip_value.sort(reverse=True)
9
    skipped = [0] * n
10
    for i in range(k):
11
        _, idx = skip_value[i]
12
        skipped[idx] = 1
13
14
    effort = 0
15
    penalty = 0
16
    for i in range(n):
17
        if skipped[i]:
18
            penalty += 1
19
        else:
20
            effort += firewalls[i] + penalty
21
22
    return effort
23
24
T = int(input())
25
for _ in range(T):
26
    n, k = map(int, input().split())
27
    firewalls = list(map(int, input().split()))
28
    print(minimize_effort(n, k, firewalls))",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053829
1390053832,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
    for _ in range(t):
8
        s = input_data[line].strip()
9
        line += 1
10
        n = len(s)
11
        # get indices for active servers ('1')
12
        positions = [i for i, ch in enumerate(s) if ch == '1']
13
        m = len(positions)
14
        if m == 0:
15
            out_lines.append(""0"")
16
            continue
17
        # Precompute A: A[i] = positions[i] - i
18
        A = [positions[i] - i for i in range(m)]
19
        20
        # check(X) returns True if there exists a window in A
21
        # such that:
22
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
23
        # and A[j] - A[i] <= X.
24
        def check(X):
25
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                # slide j as far as possible while A[j]-A[i] <= X
33
                while j < m and A[j] - A[i] <= X:
34
                    j += 1
35
                # j now is one past the last index satisfying condition, so the window has length (j - i)
36
                if j - i >= m - X:
37
                    return True
38
            return False
39
40
        # Binary search for the minimum X
41
        lo, hi, ans = 0, n, n
42
        while lo <= hi:
43
            mid = (lo + hi) // 2
44
            if check(mid):
45
                ans = mid
46
                hi = mid - 1
47
            else:
48
                lo = mid + 1
49
        out_lines.append(str(ans))
50
    51
    sys.stdout.write(""\n"".join(out_lines))
52
    53
if __name__ == '__main__':
54
    solve()",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053832
1390053826,unknown,unknown,unknown,"1
def min_decommission_cost(T, test_cases):
2
    results = []
3
4
    for binary_string in test_cases:
5
        # Find the first and last occurrence of '1'
6
        first_one = binary_string.find('1')
7
        last_one = binary_string.rfind('1')
8
9
        if first_one == -1:  # No '1's in the string (only idle servers)
10
            results.append(""0"")
11
            continue
12
13
        # Extract the core section between the first and last '1'
14
        trimmed_section = binary_string[first_one:last_one + 1]
15
16
        # Count idle servers (0s) left inside the active range
17
        idle_servers_left = trimmed_section.count('0')
18
19
        # Count active servers (1s) removed before first and after last '1'
20
        active_servers_removed = binary_string[:first_one].count('1') + binary_string[last_one + 1:].count('1')
21
22
        # The final cost is max(idle servers left, active servers removed)
23
        results.append(str(max(idle_servers_left, active_servers_removed)))
24
25
    print(""\n"".join(results))
26
27
28
# Read input
29
T = int(input().strip())  # Number of test cases
30
test_cases = [input().strip() for _ in range(T)]  # Read all test cases
31
32
# Run the function
33
min_decommission_cost(T, test_cases)
34
35
36
37
38",115,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053826
