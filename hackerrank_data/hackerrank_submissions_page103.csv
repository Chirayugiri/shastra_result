submission_id,username,problem_name,language,code,page,url
1390054045,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        # Identify the first and last active server (1)
6
        first_active = servers.find('1')
7
        last_active = servers.rfind('1')
8
        9
        # If there are no active servers, the cost is 0
10
        if first_active == -1:
11
            results.append(0)
12
            continue
13
        14
        # Extract the relevant segment of servers
15
        trimmed_servers = servers[first_active:last_active + 1]
16
        17
        # Count idle servers (0's) that remain
18
        idle_remaining = trimmed_servers.count('0')
19
        20
        # Count active servers (1's) that need to be removed
21
        active_removed = servers[:first_active].count('1') + servers[last_active + 1:].count('1')
22
        23
        # Compute the cost
24
        cost = max(idle_remaining, active_removed)
25
        results.append(cost)
26
    27
    return results
28
29
# Read input
30
T = int(input())
31
test_cases = [input().strip() for _ in range(T)]
32
33
# Compute and print results
34
for result in min_decommissioning_cost(test_cases):
35
    print(result)",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054045
1390054047,unknown,unknown,unknown,"1
def solve():
2
3
    s = input()
4
5
    n = len(s)
6
7
    min_cost = float('inf')
8
9
    for i in range(n + 1):
10
11
        remaining = s[i:]
12
13
        idle_count = remaining.count('0')
14
15
        active_removed = s[:i].count('1')
16
17
        min_cost = min(min_cost, max(idle_count, active_removed))
18
19
    for j in range(n + 1):
20
21
        remaining = s[:n-j]
22
23
        idle_count = remaining.count('0')
24
25
        active_removed = s[n-j:].count('1')
26
27
        min_cost = min(min_cost, max(idle_count, active_removed))
28
29
    for i in range(n+1):
30
31
        for j in range(n-i+1):
32
33
            remaining = s[i:n-j]
34
35
            idle_count = remaining.count('0')
36
37
            active_removed = s[:i].count('1') + s[n-j:].count('1')
38
39
            min_cost = min(min_cost, max(idle_count, active_removed))
40
41
    print(min_cost)
42
43
t = int(input())
44
45
for _ in range(t):
46
47
    solve()
48
49",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054047
1390054048,unknown,unknown,unknown,"1
cases = int(input())
2
for t in range(cases):
3
    n,k = [int(i) for i in input().split()]
4
    array = [int(i) for i in input().split()]
5
    if n == k:
6
        print(0)
7
        continue
8
    batch_sum = [0]*n
9
    for i in range(n):
10
        batch_sum[i] = sum(array[i:i+k])
11
    total = sum(array)
12
    best = total
13
    for i in range(n):
14
        best = min(best, total -batch_sum[i] + n-i-k)
15
    print(best)
16
        17
        18
    19
    20
    21
    22
    ",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054048
1390054039,unknown,unknown,unknown,"1
def min_cost_to_decommission(rack):
2
    length = len(rack)
3
    min_cost = float('inf')
4
    5
    for prefix in range(length + 1):
6
        for suffix in range(length + 1 - prefix):
7
            remaining = rack[prefix:length - suffix]
8
            9
            if not remaining:
10
                continue
11
            12
            idle_count = remaining.count('0')
13
            active_removed = rack[:prefix].count('1') + rack[length - suffix:].count('1')
14
            15
            cost = max(idle_count, active_removed)
16
            min_cost = min(min_cost, cost)
17
    18
    return min_cost
19
20
cases = int(input().strip())
21
results = []
22
23
for _ in range(cases):
24
    rack = input().strip()
25
    results.append(min_cost_to_decommission(rack))
26
27
print(""\n"".join(map(str, results)))
28",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054039
1390054042,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
7
        Scanner sc = new Scanner(System.in);
8
9
        int T = sc.nextInt();
10
11
        while (T-- > 0) {
12
13
            int n = sc.nextInt();
14
15
            int k = sc.nextInt();
16
17
            int[] a = new int[n];
18
19
            long sum_a = 0;
20
21
            for (int i = 0; i < n; i++) {
22
23
                a[i] = sc.nextInt();
24
25
                sum_a += a[i];
26
27
            }
28
29
            List<Long> values = new ArrayList<>();
30
31
            for (int i = 0; i < n; i++) {
32
33
                long val = a[i] - (n - i - 1L);
34
35
                values.add(val);
36
37
            }
38
39
            values.sort((x, y) -> Long.compare(y, x));
40
41
            long[] prefixSum = new long[n + 1];
42
43
            prefixSum[0] = 0;
44
45
            for (int i = 1; i <= n; i++) {
46
47
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
48
49
            }
50
51
            int max_m = Math.min(k, n);
52
53
            long maxTotal = Long.MIN_VALUE;
54
55
            for (int m = 0; m <= max_m; m++) {
56
57
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
58
59
                if (current > maxTotal) {
60
61
                    maxTotal = current;
62
63
                }
64
65
            }
66
67
            long minEffort = sum_a - maxTotal;
68
69
            System.out.println(minEffort);
70
71
        }
72
73
        sc.close();
74
75
    }
76
77
}",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054042
1390054044,unknown,unknown,unknown,"1
def minimum_pruning_cost(rack):
2
    n = len(rack)
3
    4
    prefix_active = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_active[i+1] = prefix_active[i] + (1 if rack[i] == '1' else 0)
7
    8
    min_cost = float('inf')
9
    10
    for left in range(n): 
11
        for right in range(n):  
12
            if left + right >= n:
13
                continue
14
            15
            if left == 0 and right == 0:
16
                continue
17
            18
            active_left = prefix_active[left]
19
            active_right = prefix_active[n] - prefix_active[n-right]
20
            active_decommissioned = active_left + active_right
21
            22
            remaining_start = left
23
            remaining_end = n - right
24
            25
            remaining_total = remaining_end - remaining_start
26
            remaining_active = prefix_active[remaining_end] - prefix_active[remaining_start]
27
            remaining_idle = remaining_total - remaining_active
28
            29
            cost = max(remaining_idle, active_decommissioned)
30
            min_cost = min(min_cost, cost)
31
    32
    return min_cost
33
34
def solve():
35
    t = int(input().strip())
36
    37
    for _ in range(t):
38
        server_rack = input().strip()
39
        print(minimum_pruning_cost(server_rack))
40
41
if __name__ == ""__main__"":
42
    solve()",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054044
1390054035,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include <bits/stdc++.h>
7
using namespace std;
8
9
int solve(vector<int>&arr, int i, int skip, int inc) {
10
    int n = arr.size();
11
    if(i==n){
12
        return 0;
13
    }
14
    //skip
15
    int ans = INT_MAX;
16
    if(skip) {
17
        ans = min(ans,solve(arr,i+1,skip-1,inc+1));
18
    }
19
    //no skip
20
    ans = min(ans,arr[i]+inc + solve(arr,i+1,skip,inc));
21
    return ans;
22
}
23
24
25
int main() {
26
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
27
    int t;
28
    cin>>t;
29
    while(t--) {
30
        int n,skip;
31
        cin>>n>>skip;
32
        vector<int>arr;
33
        while(n--) {
34
            int a;
35
            cin>>a;
36
            arr.push_back(a);
37
        }
38
        cout<<solve(arr,0,skip,0)<<endl;
39
    }
40
    return 0;
41
}
42",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054035
1390054036,unknown,unknown,unknown,"1
def main():
2
3
    import sys
4
5
    input = sys.stdin.read
6
7
    data = input().split(""\n"")
8
9
    10
11
    t = int(data[0])
12
13
    index = 1
14
15
    results = []
16
17
    for _ in range(t):
18
19
        n, k = map(int, data[index].split())
20
21
        strengths = list(map(int, data[index + 1].split()))
22
23
        index += 2
24
25
        26
27
        if k >= n:
28
29
            results.append(""0"")
30
31
            continue
32
33
        34
35
        # Calculate the impact of each firewall: strength + index
36
37
        impact = [(strengths[i] + i, i) for i in range(n)]
38
39
        40
41
        # Sort firewalls by impact (higher impact should be skipped)
42
43
        impact.sort(reverse=True)
44
45
        46
47
        # Select the top k firewalls to skip
48
49
        to_skip = set(idx for _, idx in impact[:k])
50
51
        52
53
        # Compute the minimal effort
54
55
        effort = 0
56
57
        skipped = 0
58
59
        60
61
        for i in range(n):
62
63
            if i in to_skip:
64
65
                skipped += 1
66
67
            else:
68
69
                effort += strengths[i] + skipped
70
71
        72
73
        results.append(str(effort))
74
75
    76
77
    # Print all results at once (faster output handling)
78
79
    sys.stdout.write(""\n"".join(results) + ""\n"")
80
81
if __name__ == ""__main__"":
82
83
    main()",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054036
1390054038,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054038
1390054034,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner input = new Scanner(System.in);
6
        int t = input.nextInt();  // Number of test cases
7
        8
        while (t-- > 0) {
9
            int N = input.nextInt();  // Array size
10
            int K = input.nextInt();  // Batch size
11
            int[] arr = new int[N];
12
            13
            for (int i = 0; i < N; i++) {
14
                arr[i] = input.nextInt();
15
            }
16
            17
            List<Integer> result = findEarliestFaults(arr, K);
18
            19
            // Print the result for this test case
20
            for (int num : result) {
21
                System.out.print(num + "" "");
22
            }
23
            System.out.println();
24
        }
25
        26
        input.close();
27
    }
28
29
    public static List<Integer> findEarliestFaults(int[] arr, int K) {
30
        List<Integer> result = new ArrayList<>();
31
        Deque<Integer> deque = new LinkedList<>();  // Stores indices of negative numbers
32
        33
        int n = arr.length;
34
35
        // Process first window of size K
36
        for (int i = 0; i < K; i++) {
37
            if (arr[i] < 0) {
38
                deque.addLast(i);
39
            }
40
        }
41
        42
        // Process remaining elements
43
        for (int i = K; i <= n; i++) {
44
            // If deque is not empty, the first element is the earliest fault
45
            if (!deque.isEmpty()) {
46
                result.add(arr[deque.peekFirst()]);
47
            } else {
48
                result.add(0);
49
            }
50
51
            // Remove elements that are out of the current window
52
            if (!deque.isEmpty() && deque.peekFirst() <= i - K) {
53
                deque.pollFirst();
54
            }
55
56
            // Add next element (if negative)
57
            if (i < n && arr[i] < 0) {
58
                deque.addLast(i);
59
            }
60
        }
61
        62
        return result;
63
    }
64
}
65",103,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054034
