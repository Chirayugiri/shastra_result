submission_id,username,problem_name,language,code,page,url
1390055362,unknown,unknown,unknown,"1
def min_effort_to_breach(arr, k):
2
    n = len(arr)
3
    4
    # If we can skip all firewalls, effort is 0
5
    if k >= n:
6
        return 0
7
    8
    # Initialize DP table
9
    # dp[i][j] = min effort to breach first i firewalls using exactly j skips
10
    dp = {}
11
    12
    # Base case: no firewalls, no effort
13
    dp[(0, 0)] = 0  # (firewalls processed, skips used) -> min effort
14
    15
    for i in range(n):
16
        new_dp = {}
17
        18
        for (processed, skips), effort in dp.items():
19
            # Option 1: Skip current firewall
20
            if skips < k:
21
                new_state = (processed + 1, skips + 1)
22
                new_effort = effort
23
                if new_state not in new_dp or new_effort < new_dp[new_state]:
24
                    new_dp[new_state] = new_effort
25
            26
            # Option 2: Breach current firewall
27
            new_state = (processed + 1, skips)
28
            new_effort = effort + arr[i] + skips
29
            if new_state not in new_dp or new_effort < new_dp[new_state]:
30
                new_dp[new_state] = new_effort
31
        32
        dp = new_dp
33
    34
    # Find minimum effort among all states that processed all firewalls
35
    min_effort = float('inf')
36
    for (processed, skips), effort in dp.items():
37
        if processed == n:
38
            min_effort = min(min_effort, effort)
39
    40
    return min_effort
41
42
def solve_test_cases():
43
    t = int(input())  # Number of test cases
44
    results = []
45
    46
    for _ in range(t):
47
        n, k = map(int, input().split())
48
        arr = list(map(int, input().split()))
49
        50
        result = min_effort_to_breach(arr, k)
51
        results.append(result)
52
    53
    # Print results
54
    for result in results:
55
        print(result)
56
57
# Execute program
58
if __name__ == ""__main__"":
59
    solve_test_cases()",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055362
1390055363,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
# Input Handling
60
if __name__ == ""__main__"":
61
    T = int(input())
62
    test_cases = [input().strip() for _ in range(T)]
63
    results = min_decommissioning_cost(test_cases)
64
    for result in results:
65
        print(result)",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055363
1390055361,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055361
1390055356,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int t = sc.nextInt();
7
        8
        while (t-- > 0) {
9
            solve(sc);
10
        }
11
        12
        sc.close();
13
    }
14
15
    static void solve(Scanner sc) {
16
        int n = sc.nextInt();
17
        int k = sc.nextInt();
18
        int[] a = new int[n];
19
20
        for (int i = 0; i < n; i++) {
21
            a[i] = sc.nextInt();
22
        }
23
24
        int minEffort = Integer.MAX_VALUE;
25
26
        // Iterate over all subsets using bitmasking
27
        for (int i = 0; i < (1 << n); i++) {
28
            List<Integer> skipped = new ArrayList<>();
29
            List<Integer> efforts = new ArrayList<>();
30
31
            for (int j = 0; j < n; j++) {
32
                if ((i >> j & 1) == 1) {
33
                    skipped.add(j);
34
                } else {
35
                    efforts.add(j);
36
                }
37
            }
38
39
            if (skipped.size() <= k) {
40
                int effort = 0;
41
                int skippedCount = 0;
42
43
                for (int j = 0; j < n; j++) {
44
                    if (skipped.contains(j)) {
45
                        skippedCount++;
46
                    } else {
47
                        effort += a[j] + skippedCount;
48
                    }
49
                }
50
51
                minEffort = Math.min(minEffort, effort);
52
            }
53
        }
54
55
        System.out.println(minEffort);
56
    }
57
}
58",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055356
1390055355,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055355
1390055358,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    idx = 0
6
    T = int(input[idx])
7
    idx += 1
8
    for _ in range(T):
9
        n, k = int(input[idx]), int(input[idx+1])
10
        idx +=2
11
        a = list(map(int, input[idx:idx+n]))
12
        idx +=n
13
        sum_a = sum(a)
14
        v = []
15
        for i in range(n):
16
            val = a[i] - (n - i -1)
17
            v.append(val)
18
        v.sort(reverse=True)
19
        prefix = [0] * (n+1)
20
        for i in range(n):
21
            prefix[i+1] = prefix[i] + v[i]
22
        max_sum = 0
23
        max_t = min(k, n)
24
        for t in range(0, max_t+1):
25
            current = prefix[t] + t*(t-1)//2
26
            if current > max_sum:
27
                max_sum = current
28
        print(sum_a - max_sum)
29
30
if __name__ == ""__main__"":
31
    main()",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055358
1390055352,unknown,unknown,unknown,"1
def min_decommission_cost(s: str) -> int:
2
    n = len(s)
3
    ones_pos = [i for i, ch in enumerate(s) if ch == '1']
4
    T = len(ones_pos)
5
    6
    if T == 0:
7
        return 0
8
    9
    zeros_total = s.count('0')
10
    ans = min(zeros_total, T) 
11
    12
    for X in range(1, T + 1):
13
        for i in range(0, T - X + 1):
14
            left = ones_pos[i]
15
            right = ones_pos[i + X - 1]
16
            length = right - left + 1
17
            zeros_in_block = length - X
18
            candidate = max(zeros_in_block, T - X)
19
            ans = min(ans, candidate)
20
    21
    return ans
22
23
if __name__ == '__main__':
24
    T = int(input().strip())
25
    for _ in range(T):
26
        s = input().strip()
27
        print(min_decommission_cost(s))",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055352
1390055353,unknown,unknown,unknown,"1
import sys
2
3
def findMinimumCost():
4
    data = sys.stdin.read().splitlines()
5
    tests = int(data[0])
6
    line = 1
7
    ans = []
8
    9
    for _ in range(tests):
10
        servers = data[line].strip()
11
        line += 1
12
        ones = [i for i, c in enumerate(servers) if c == '1']
13
        one_count = len(ones)
14
        15
        if one_count == 0:
16
            ans.append(""0"")
17
            continue
18
            19
        diffs = [ones[i] - i for i in range(one_count)]
20
        21
        def check(limit):
22
            if one_count - limit <= 0:
23
                return True
24
            j = 0
25
            for i in range(one_count):
26
                j = max(j, i)
27
                while j < one_count and diffs[j] - diffs[i] <= limit:
28
                    j += 1
29
                if j - i >= one_count - limit:
30
                    return True
31
            return False
32
            33
        left, right, answer = 0, len(servers), len(servers)
34
        while left <= right:
35
            mid = (left + right) // 2
36
            if check(mid):
37
                answer = mid
38
                right = mid - 1
39
            else:
40
                left = mid + 1
41
                42
        ans.append(str(answer))
43
        44
    sys.stdout.write(""\n"".join(ans))
45
    46
if __name__ == ""__main__"":
47
    findMinimumCost()",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055353
1390055354,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055354
1390055350,unknown,unknown,unknown,"1
def min_effort(n, k, a):
2
    if k >= n:
3
        return 0
4
    total = sum(a)
5
    window_sum = sum(a[:k])
6
    min_effort = total - window_sum + (n - k) * 0
7
    for i in range(k, n):
8
        window_sum = window_sum + a[i] - a[i - k]
9
        effort = total - window_sum + (n - k) * (i - k + 1)
10
        min_effort = min(min_effort, effort)
11
    return min_effort
12
13
T = int(input())
14
for _ in range(T):
15
    n, k = map(int, input().split())
16
    a = list(map(int, input().split()))
17
    print(min_effort(n, k, a))",38,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055350
