submission_id,username,problem_name,language,code,page,url
1390052934,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_reading(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process the first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # If there is a negative element, record it; otherwise, record 0
13
    if dq:
14
        result.append(arr[dq[0]])
15
    else:
16
        result.append(0)
17
    18
    # Process the remaining windows
19
    for i in range(k, len(arr)):
20
        # Remove elements that are out of the current window
21
        if dq and dq[0] <= i - k:
22
            dq.popleft()
23
        24
        # Add current element if it's negative
25
        if arr[i] < 0:
26
            dq.append(i)
27
        28
        # Append the earliest negative or 0
29
        if dq:
30
            result.append(arr[dq[0]])
31
        else:
32
            result.append(0)
33
    34
    return result
35
36
# Input and Output Handling
37
t = int(input())
38
for _ in range(t):
39
    n, k = map(int, input().split())
40
    arr = list(map(int, input().split()))
41
    result = earliest_faulty_reading(arr, k)
42
    print(' '.join(map(str, result)))
43",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052934
1390052935,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
5
int main() {
6
    int t;
7
    cin>>t;
8
    9
    while(t--)
10
    {
11
        int n,k;
12
        cin>>n>>k;
13
        14
        vector<int> input(n);
15
        for(int i=0;i<n;i++)
16
        {
17
            int ele;
18
            cin>>ele;
19
            20
            input[i]=ele;
21
        }
22
        23
        vector<int> ans;
24
        25
        int i=0;
26
        int j=0;
27
        28
        queue<int> q;//would store indices of -ve
29
        30
        while(j<k)
31
        {
32
            if(input[j]<0)
33
                q.push(j);
34
            35
            j++;
36
        }
37
        j--;
38
    39
        while(j<n)
40
        {   
41
            if(q.empty())
42
                ans.push_back(0);
43
            44
            else
45
            ans.push_back(input[q.front()]);
46
            47
            48
            if(q.front()==i)
49
                q.pop();
50
            51
            i++;
52
            j++;
53
            54
            if(j<n && input[j]<0)
55
                q.push(j);
56
        }
57
        58
        for(auto &el:ans)
59
            cout<<el<<"" "";
60
        61
        cout<<endl;
62
        63
    }
64
    return 0;
65
}",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052935
1390052939,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
vector<int> faults(vector<int>& arr, int n, int k){
9
    vector<int> ans;
10
    for(int i=0; i<=n-k; i++){
11
        int eFault = 0;
12
        for(int j=i; j<i+k; j++){
13
            if(arr[j]<0){
14
                eFault = arr[j];
15
                break;
16
            }
17
        }
18
        ans.push_back(eFault);
19
    }
20
    return ans;
21
}
22
23
int main() {
24
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
25
    int t;
26
    cin>>t;
27
    while(t--){
28
        int n, k;
29
        cin>>n>>k;
30
        vector<int> arr(n);
31
        for(int i=0; i<n; i++){
32
            cin>>arr[i];
33
        }
34
        vector<int> ans;
35
        ans = faults(arr, n, k);
36
        for(int val: ans){
37
            cout<<val<<"" "";
38
        }
39
        cout<<endl;
40
    }
41
    return 0;
42
}",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052939
1390052930,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
3
t = int(input())
4
5
while t:
6
    a, b = map(int, input().split())
7
    c = list(map(int, input().split()))
8
    ans = []
9
    for i in range(0, len(c)-int(b)+1):
10
        for j in c[i:i+b]:
11
            if j < 0:
12
                ans.append(j)
13
                break
14
        else:
15
            ans.append(0)
16
    for i in ans:
17
        print(i, end="" "")
18
    print()
19
    t -= 1",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052930
1390052932,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        string s;
13
        cin >> s;
14
        int n = s.length();
15
16
        // Count total active servers (1s) and idle servers (0s)
17
        int totalOnes = 0, totalZeros = 0;
18
        for (char c : s) {
19
            if (c == '1') totalOnes++;
20
            else totalZeros++;
21
        }
22
23
        int minCost = n; // Worst case
24
25
        // Try all combinations of prefix (left) and suffix (right) removals
26
        // Prefix i = number of characters removed from start
27
        for (int prefix = 0; prefix <= n; prefix++) {
28
            int onesRemovedLeft = 0;
29
            int zerosRemovedLeft = 0;
30
            for (int i = 0; i < prefix; i++) {
31
                if (s[i] == '1') onesRemovedLeft++;
32
                else zerosRemovedLeft++;
33
            }
34
35
            // Now, try all possible suffix removals
36
            for (int suffix = 0; suffix <= n - prefix; suffix++) {
37
                int onesRemovedRight = 0;
38
                int zerosRemovedRight = 0;
39
                for (int i = n - suffix; i < n; i++) {
40
                    if (s[i] == '1') onesRemovedRight++;
41
                    else zerosRemovedRight++;
42
                }
43
44
                int totalOnesRemoved = onesRemovedLeft + onesRemovedRight;
45
                int totalZerosRemoved = zerosRemovedLeft + zerosRemovedRight;
46
                int remainingZeros = totalZeros - totalZerosRemoved;
47
48
                int cost = max(remainingZeros, totalOnesRemoved);
49
                minCost = min(minCost, cost);
50
            }
51
        }
52
53
        cout << minCost << endl;
54
    }
55
    return 0;
56
}
57",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052932
1390052931,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static long minEffort(int[] f, int n, int k) {
6
        long[] dp=new long[n+1];
7
        Arrays.fill(dp,Long.MAX_VALUE);
8
        dp[n]=0;
9
        10
        for(int i=n-1;i>=0;i--) {
11
            long str=f[i];
12
            for(int j=0;j<=k && i+j<=n;j++) {
13
                if(j==0) dp[i]=Math.min(dp[i],str+dp[i+1]);
14
                else {
15
                    long e=(i+j<n)?dp[i+j+1]+j:0;
16
                    for(int m=i+j;m<n;m++) e+=f[m];
17
                    dp[i]=Math.min(dp[i],e);
18
                }
19
            }
20
        }
21
        return dp[0];
22
    }
23
    public static void main(String[] args) {
24
        Scanner sc=new Scanner(System.in);
25
        int t=sc.nextInt();
26
        while(t-- > 0) {
27
            int n=sc.nextInt(),k=sc.nextInt();
28
            int[] f=new int[n];
29
            for(int i=0;i<n;i++) f[i]=sc.nextInt();
30
            System.out.println(minEffort(f,n,k));
31
        }
32
        sc.close();
33
    }
34
}",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052931
1390052927,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_fault_in_batches(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    for i in range(len(arr) - k + 1):
12
        if dq:
13
            result.append(arr[dq[0]])
14
        else:
15
            result.append(0)
16
        17
        while dq and dq[0] < i + 1:
18
            dq.popleft()
19
        20
        if i + k < len(arr) and arr[i + k] < 0:
21
            dq.append(i + k)
22
    23
    return result
24
25
# Read input
26
t = int(input())
27
for _ in range(t):
28
    n, k = map(int, input().split())
29
    arr = list(map(int, input().split()))
30
    print(*earliest_fault_in_batches(arr, k))",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052927
1390052928,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int t;
10
    cin >> t;
11
    12
    while (t--) {
13
        int n, k;
14
        cin >> n >> k;
15
        int arr[n];
16
        for (int i = 0; i < n; i++) {
17
            cin >> arr[i];
18
        }
19
20
        for (int i = 0; i <= n - k; i++) {
21
            int sign = 0;
22
            for (int j = i; j < i + k; j++) {
23
                if (arr[j] < 0) {
24
                    cout << arr[j] << "" "";
25
                    sign = 1;
26
                    break; 
27
                }
28
            }
29
            if (!sign) {
30
                cout << ""0 "";
31
            }
32
        }
33
        cout << endl;  
34
    }
35
36
    return 0;
37
}
38",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052928
1390052929,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(t, test_cases):
4
5
    results = []
6
7
    8
9
    for case in test_cases:
10
11
        n, k, readings = case
12
13
        result = []
14
15
        dq = deque()  # Stores indices of negative numbers
16
17
        # Process the first window
18
19
        for i in range(k):
20
21
            if readings[i] < 0:
22
23
                dq.append(i)
24
25
        # Process the sliding windows
26
27
        for i in range(n - k + 1):
28
29
            # Append the first negative in the deque, or 0 if empty
30
31
            result.append(readings[dq[0]] if dq else 0)
32
33
            # Remove elements that are out of this window
34
35
            if dq and dq[0] == i:
36
37
                dq.popleft()
38
39
            # Add next element (i + k) to the deque if it's negative
40
41
            if i + k < n and readings[i + k] < 0:
42
43
                dq.append(i + k)
44
45
        results.append("" "".join(map(str, result)))  # Convert list to space-separated string
46
47
    48
49
    return ""\n"".join(results)
50
51
# Example Usage
52
53
t = 2
54
55
test_cases = [
56
57
    (5, 2, [-8, 2, 3, -6, 10]),
58
59
    (8, 3, [12, -1, -7, 8, -15, 30, 16, 28])
60
61
]
62
63
print(earliest_faulty_readings(t, test_cases))",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052929
1390052926,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process the first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store the result for the first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process the remaining windows
17
    for i in range(k, n):
18
        # Remove elements that are out of the current window
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add the current element if it is negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Store the result for the current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Size of array and batch size
35
    arr = list(map(int, input().split()))  # Array elements
36
    37
    # Get the results and print as space-separated values
38
    print(*earliest_faulty_readings(arr, k))",160,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052926
