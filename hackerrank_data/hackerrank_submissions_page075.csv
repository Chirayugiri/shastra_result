submission_id,username,problem_name,language,code,page,url
1390054601,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054601
1390054599,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054599
1390054602,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
 Scanner sc = new Scanner(System.in);
8
        int T = sc.nextInt(); 
9
        10
        while (T-- > 0) {
11
            int n = sc.nextInt(); 
12
            int k = sc.nextInt(); 
13
            int[] strength = new int[n];
14
            15
            for (int i = 0; i < n; i++) {
16
                strength[i] = sc.nextInt();
17
            }
18
            19
            if (k == n) {
20
                System.out.println(0);
21
                continue;
22
            }
23
            24
            System.out.println(findMinEffort(n, k, strength));
25
        }
26
        sc.close();
27
    }
28
    29
    private static long findMinEffort(int n, int k, int[] strength) {
30
        long[][] dp = new long[n + 1][k + 1];
31
        32
        for (int i = 0; i <= n; i++) {
33
            Arrays.fill(dp[i], Long.MAX_VALUE / 2);
34
        }
35
        dp[0][0] = 0; 
36
        for (int i = 1; i <= n; i++) {
37
            for (int j = 0; j <= Math.min(i, k); j++) {
38
                if (j > 0) {
39
                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1]);
40
                }
41
                42
                long penalty = 0;
43
                if (i > 1 && j > 0) {
44
                    penalty = j; 
45
                }
46
                47
                dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + strength[i-1] + penalty);
48
            }
49
        }
50
        51
        long result = Long.MAX_VALUE;
52
        for (int j = 0; j <= k; j++) {
53
            result = Math.min(result, dp[n][j]);
54
        }
55
        56
        return result;
57
    }
58
}",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054602
1390054593,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Process the rest of the array
13
    for i in range(len(arr) - k + 1):
14
        # Append the first negative in the current window
15
        if dq:
16
            result.append(arr[dq[0]])
17
        else:
18
            result.append(0)
19
        20
        # Remove elements that are out of the current window
21
        while dq and dq[0] < i + 1:
22
            dq.popleft()
23
        24
        # Add new element (end of current window)
25
        if i + k < len(arr) and arr[i + k] < 0:
26
            dq.append(i + k)
27
    28
    return result
29
30
def process_test_cases():
31
    t = int(input())
32
    for _ in range(t):
33
        n, k = map(int, input().split())
34
        arr = list(map(int, input().split()))
35
        print("" "".join(map(str, earliest_faulty_readings(arr, k))))
36
37
# Run the function
38
process_test_cases()
39",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054593
1390054596,unknown,unknown,unknown,"1
def min_cost_server_optimization(server_rack):
2
    n = len(server_rack)
3
    min_cost = float('inf')
4
    5
    6
    prefix_active = [0] * (n + 1)
7
    for i in range(n):
8
        prefix_active[i + 1] = prefix_active[i] + (1 if server_rack[i] == '1' else 0)
9
    10
    11
    prefix_idle = [0] * (n + 1)
12
    for i in range(n):
13
        prefix_idle[i + 1] = prefix_idle[i] + (1 if server_rack[i] == '0' else 0)
14
    15
    total_active = prefix_active[n]
16
    total_idle = prefix_idle[n]
17
    18
    for i in range(n + 1): 
19
        for j in range(n + 1 - i):  
20
            if i + j == n:  
21
                continue
22
            23
        24
            active_removed = prefix_active[i] + (total_active - prefix_active[n - j])
25
            26
   27
            idle_remaining = total_idle - (prefix_idle[i] + (total_idle - prefix_idle[n - j]))
28
            29
            cost = max(idle_remaining, active_removed)
30
            min_cost = min(min_cost, cost)
31
    32
    return min_cost
33
34
def main():
35
    t = int(input().strip())
36
    37
    for _ in range(t):
38
        server_rack = input().strip()
39
        result = min_cost_server_optimization(server_rack)
40
        print(result)
41
42
if __name__ == ""__main__"":
43
    main()",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054596
1390054597,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    for n, k, arr in test_cases:
6
        output = []
7
        dq = deque()
8
    9
        for i in range(k):
10
            if arr[i] < 0:
11
                dq.append(i)
12
        13
        output.append(arr[dq[0]] if dq else 0)
14
        15
        for i in range(k, n):
16
            while dq and dq[0] <= i - k:
17
                dq.popleft()
18
19
            if arr[i] < 0:
20
                dq.append(i)
21
            22
            output.append(arr[dq[0]] if dq else 0)
23
        24
        results.append("" "".join(map(str, output)))
25
    26
    print(""\n"".join(results))
27
28
t = int(input().strip())
29
test_cases = []
30
for _ in range(t):
31
    n, k = map(int, input().strip().split())
32
    arr = list(map(int, input().strip().split()))
33
    test_cases.append((n, k, arr))
34
35
earliest_faulty_readings(test_cases)
36",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054597
1390054589,unknown,unknown,unknown,"1
def solve():
2
    """"""Solves the server decommissioning problem.""""""
3
4
    T = int(input())
5
    for _ in range(T):
6
        servers = input().strip()
7
        n = len(servers)
8
        9
        min_cost = float('inf')
10
11
        for i in range(n + 1):  # Remove i from start
12
            for j in range(n - i + 1):  # Remove j from end
13
                remaining = servers[i:n - j]
14
                15
                if not remaining:
16
                    min_cost = min(min_cost, 0)
17
                    continue
18
                19
                idle_count = remaining.count('0')
20
                21
                # Correctly calculate active servers removed
22
                active_removed = servers[:i].count('1') + servers[n - j:].count('1')
23
24
                min_cost = min(min_cost, max(idle_count, active_removed))
25
        26
        print(min_cost)
27
28
solve()
29",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054589
1390054591,unknown,unknown,unknown,"1
import sys
2
import threading
3
4
def main():
5
    T = int(sys.stdin.readline())
6
    7
    for _ in range(T):
8
        n, k = map(int, sys.stdin.readline().split())
9
        a = list(map(int, sys.stdin.readline().split()))
10
11
        benefits = []
12
        for i in range(n):
13
            benefit = a[i] - (n - i - 1)
14
            benefits.append((benefit, i))
15
        16
        benefits.sort(reverse=True)
17
18
        skipped = [False] * n
19
20
        for i in range(k):
21
            _, idx = benefits[i]
22
            skipped[idx] = True
23
24
        25
        total_effort = 0
26
        penalty = 0  
27
        for i in range(n):
28
            if skipped[i]:
29
                penalty += 1
30
            else:
31
                total_effort += a[i] + penalty
32
33
        print(total_effort)
34
35
threading.Thread(target=main).start()",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054591
1390054588,unknown,unknown,unknown,"1
import sys
2
3
def breach_firewall():
4
    input_data = sys.stdin.read().strip().split()
5
    t = int(input_data[0])
6
    index = 1
7
    results = []
8
    for _ in range(t):
9
        n = int(input_data[index])
10
        k = int(input_data[index+1])
11
        index += 2
12
        a = list(map(int, input_data[index:index+n]))
13
        index += n
14
        15
        sum_a = sum(a)
16
        n_val = n  # total number of firewalls
17
        # Compute v[i] = a[i] + i for each firewall (0-indexed)
18
        v = [a[i] + i for i in range(n)]
19
        # Sort v in descending order
20
        v.sort(reverse=True)
21
        22
        best = 0  # candidate(0) = 0: meaning ""skip none""
23
        current = 0
24
        # We can skip at most min(k, n) firewalls.
25
        m_max = min(k, n)
26
        for m in range(1, m_max+1):
27
            current += v[m-1]
28
            # candidate(m) = (sum of top m v[i]) - m*(n - 1) + m*(m - 1)/2
29
            candidate = current - m * (n_val - 1) + (m * (m - 1)) // 2
30
            if candidate > best:
31
                best = candidate
32
        # The minimum total effort equals total base cost minus the maximum saving.
33
        answer = sum_a - best
34
        results.append(str(answer))
35
    36
    sys.stdout.write(""\n"".join(results))
37
38
if __name__ == '__main__':
39
    breach_firewall()
40",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054588
1390054581,unknown,unknown,unknown,"1
def min_pruning_cost(s):
2
    n = len(s)
3
    # Build prefix sums for 0's and 1's.
4
    prefix0 = [0] * (n + 1)
5
    prefix1 = [0] * (n + 1)
6
    for i, ch in enumerate(s):
7
        prefix0[i+1] = prefix0[i] + (1 if ch == '0' else 0)
8
        prefix1[i+1] = prefix1[i] + (1 if ch == '1' else 0)
9
        10
    ones_total = prefix1[n]
11
    ans = float('inf')
12
    13
    # For each possible starting index L, binary search for R in [L, n] that minimizes
14
    # f(L, R) = max( (prefix0[R]-prefix0[L]), (ones_total - (prefix1[R]-prefix1[L]) ) ).
15
    for L in range(0, n + 1):
16
        lo, hi = L, n
17
        candidate_for_L = float('inf')
18
        # Binary search: We want the smallest R such that the count of zeros in s[L:R]
19
        # is at least the number of ones removed, i.e.,
20
        #     prefix0[R] - prefix0[L] >= ones_total - (prefix1[R]-prefix1[L])
21
        while lo < hi:
22
            mid = (lo + hi) // 2
23
            zeros_count = prefix0[mid] - prefix0[L]
24
            ones_removed = ones_total - (prefix1[mid] - prefix1[L])
25
            if zeros_count < ones_removed:
26
                lo = mid + 1
27
            else:
28
                hi = mid
29
        # Candidate using R = lo
30
        if L <= lo <= n:
31
            zeros_count = prefix0[lo] - prefix0[L]
32
            ones_removed = ones_total - (prefix1[lo] - prefix1[L])
33
            candidate_for_L = min(candidate_for_L, max(zeros_count, ones_removed))
34
        # It is also useful to check the neighbor R = lo - 1 (if possible)
35
        if lo - 1 >= L:
36
            R = lo - 1
37
            zeros_count = prefix0[R] - prefix0[L]
38
            ones_removed = ones_total - (prefix1[R] - prefix1[L])
39
            candidate_for_L = min(candidate_for_L, max(zeros_count, ones_removed))
40
        ans = min(ans, candidate_for_L)
41
    return ans
42
43
# Main code to read test cases and output answer.
44
if __name__ == '__main__':
45
    T = int(input().strip())
46
    for _ in range(T):
47
        s = input().strip()
48
        print(min_pruning_cost(s))",75,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054581
