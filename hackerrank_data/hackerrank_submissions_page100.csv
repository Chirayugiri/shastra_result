submission_id,username,problem_name,language,code,page,url
1390054094,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054094
1390054099,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, arr = case
5
        batch_results = []
6
        for i in range(n - k + 1):
7
            # Extract the current batch
8
            batch = arr[i:i + k]
9
            # Find the first negative number in the batch
10
            earliest_fault = 0
11
            for num in batch:
12
                if num < 0:
13
                    earliest_fault = num
14
                    break
15
            batch_results.append(earliest_fault)
16
        results.append(batch_results)
17
    return results
18
19
# Input reading
20
def main():
21
    import sys
22
    input = sys.stdin.read
23
    data = input().split()
24
    idx = 0
25
    t = int(data[idx])  # Number of test cases
26
    idx += 1
27
    test_cases = []
28
    for _ in range(t):
29
        n = int(data[idx])  # Size of the array
30
        k = int(data[idx + 1])  # Batch size
31
        idx += 2
32
        arr = list(map(int, data[idx:idx + n]))  # Array of sensor readings
33
        idx += n
34
        test_cases.append((n, k, arr))
35
    36
    # Compute results
37
    results = earliest_faulty_readings(test_cases)
38
    39
    # Output results
40
    for result in results:
41
        print("" "".join(map(str, result)))
42
43
if __name__ == ""__main__"":
44
    main()",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054099
1390054095,unknown,unknown,unknown,"1
def solve():
2
3
    s = input()
4
5
    n = len(s)
6
7
    min_cost = float('inf')
8
9
    # Iterate from left
10
11
    left_ones = 0
12
13
    for i in range(n + 1):
14
15
        remaining = s[i:]
16
17
        idle_count = remaining.count('0')
18
19
        min_cost = min(min_cost, max(idle_count, left_ones))
20
21
        if i < n and s[i] == '1':
22
23
            left_ones += 1
24
25
    # Iterate from right
26
27
    right_ones = 0
28
29
    for i in range(n, -1, -1):
30
31
        remaining = s[:i]
32
33
        idle_count = remaining.count('0')
34
35
        min_cost = min(min_cost, max(idle_count, right_ones))
36
37
        if i > 0 and s[i - 1] == '1':
38
39
            right_ones += 1
40
41
    #Combine Iterations
42
43
    for i in range(n+1):
44
45
      left_ones = s[:i].count('1')
46
47
      right_ones = s[n:].count('1')
48
49
      remaining = s[i:]
50
51
      for j in range(len(remaining)+1):
52
53
        remaining_sub = remaining[:len(remaining)-j]
54
55
        right_ones = s[n-j:].count('1')
56
57
        idle_count = remaining_sub.count('0')
58
59
        min_cost = min(min_cost, max(idle_count, left_ones+right_ones))
60
61
    print(min_cost)
62
63
t = int(input())
64
65
for _ in range(t):
66
67
    solve()
68
69",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054095
1390054091,unknown,unknown,unknown,"1
def min_decommission_cost(rack):
2
    n = len(rack)
3
    4
    # Initialize minimum cost to a high value
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing from start and end
8
    for start in range(n + 1):
9
        for end in range(n + 1):
10
            # Skip invalid configurations
11
            if start + end > n:
12
                continue
13
            14
            # Calculate the remaining rack after decommissioning
15
            remaining = rack[start:n-end]
16
            17
            if not remaining:
18
                # If we removed everything, cost is just removed active servers
19
                removed_active = rack[:start].count('1') + rack[n-end:].count('1')
20
                cost = removed_active
21
            else:
22
                # Calculate remaining idle servers
23
                remaining_idle = remaining.count('0')
24
                25
                # Calculate decommissioned active servers
26
                removed_active = rack[:start].count('1') + rack[n-end:].count('1')
27
                28
                # Cost is the maximum of the two
29
                cost = max(remaining_idle, removed_active)
30
            31
            # Update minimum cost
32
            min_cost = min(min_cost, cost)
33
    34
    return min_cost
35
36
def main():
37
    t = int(input().strip())
38
    39
    for _ in range(t):
40
        rack = input().strip()
41
        result = min_decommission_cost(rack)
42
        print(result)
43
44
if __name__ == ""__main__"":
45
    main()",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054091
1390054090,unknown,unknown,unknown,"1
def find_earliest_fault(arr, k):
2
    result = []
3
    4
    for i in range(len(arr) - k + 1):  # Iterate through all possible windows
5
        found = False
6
        7
        # Scan the window to find the first negative number
8
        for j in range(i, i + k):
9
            if arr[j] < 0:
10
                result.append(arr[j])
11
                found = True
12
                break  # Stop when the first negative number is found
13
        14
        if not found:
15
            result.append(0)  # If no negative number is found, add 0
16
    17
    return result
18
19
# Input handling
20
t = int(input())  # Number of test cases
21
for _ in range(t):
22
    n, k = map(int, input().split())  # Size of array and batch size
23
    arr = list(map(int, input().split()))  # Array elements
24
25
    result = find_earliest_fault(arr, k)
26
    print(*result)
27
28
    ",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054090
1390054088,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void findEarliestFaultyReadings(int *arr, int n, int k) {
5
    int *result = (int *)malloc((n - k + 1) * sizeof(int));
6
    int front = 0, rear = 0;
7
    int queue[n];
8
    9
    // Process the first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) {
12
            queue[rear++] = i;
13
        }
14
    }
15
    16
    // Store result for the first batch
17
    result[0] = (front < rear) ? arr[queue[front]] : 0;
18
    19
    // Process the remaining windows
20
    for (int i = k; i < n; i++) {
21
        // Remove elements not within the window
22
        while (front < rear && queue[front] <= i - k) {
23
            front++;
24
        }
25
        26
        // Add new element if it's faulty
27
        if (arr[i] < 0) {
28
            queue[rear++] = i;
29
        }
30
        31
        // Store result for current batch
32
        result[i - k + 1] = (front < rear) ? arr[queue[front]] : 0;
33
    }
34
    35
    // Print the result
36
    for (int i = 0; i < n - k + 1; i++) {
37
        printf(""%d "", result[i]);
38
    }
39
    printf(""\n"");
40
    41
    free(result);
42
}
43
44
int main() {
45
    int t;
46
    scanf(""%d"", &t);
47
    48
    while (t--) {
49
        int n, k;
50
        scanf(""%d %d"", &n, &k);
51
        int arr[n];
52
        53
        for (int i = 0; i < n; i++) {
54
            scanf(""%d"", &arr[i]);
55
        }
56
        57
        findEarliestFaultyReadings(arr, n, k);
58
    }
59
    60
    return 0;
61
}",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054088
1390054087,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054087
1390054089,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if _name_ == ""_main_"":
73
    main()",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054089
1390054085,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    idx = 0
6
    T = int(input[idx])
7
    idx += 1
8
    for _ in range(T):
9
        n, k = int(input[idx]), int(input[idx + 1])
10
        idx += 2
11
        a = list(map(int, input[idx:idx + n]))
12
        idx += n
13
        14
        sum_S = sum(a)
15
     16
        values = [a[i] + i for i in range(n)]
17
   18
        values.sort(reverse=True)
19
        sum_aj_plus_j = sum(values[:k])
20
       21
        res = sum_S - sum_aj_plus_j - (k * (k + 1)) // 2 + k * n
22
        print(res)
23
24
main()",100,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054085
