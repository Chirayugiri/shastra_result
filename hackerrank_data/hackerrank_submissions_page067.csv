submission_id,username,problem_name,language,code,page,url
1390054779,unknown,unknown,unknown,"1
def min_effort(firewalls, k):
2
3
    n = len(firewalls)
4
5
    6
7
    if k >= n:
8
9
        return 0
10
11
12
13
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
14
15
    16
17
    18
19
    for j in range(k + 1):
20
21
        dp[n][j] = 0
22
23
    24
25
26
27
    for i in range(n - 1, -1, -1):
28
29
        for j in range(k + 1):
30
31
            32
33
            if j < k:
34
35
                dp[i][j] = dp[i + 1][j + 1]
36
37
            38
39
            40
41
            effort = firewalls[i] + j 
42
43
            dp[i][j] = min(dp[i][j], effort + dp[i + 1][j])
44
45
    46
47
    return dp[0][0]
48
49
50
51
t = int(input())
52
53
for _ in range(t):
54
55
    n, k = map(int, input().split())
56
57
    firewalls = list(map(int, input().split()))
58
59
    result = min_effort(firewalls, k)
60
61
    print(result)",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054779
1390054780,unknown,unknown,unknown,"1
def min_cost_server_pruning(server_rack):
2
3
    n = len(server_rack)
4
5
    6
7
    # Precompute cumulative counts
8
9
    active_prefix_sum = [0] * (n + 1)
10
11
    idle_suffix_sum = [0] * (n + 1)
12
13
    14
15
    for i in range(n):
16
17
        active_prefix_sum[i+1] = active_prefix_sum[i] + (1 if server_rack[i] == '1' else 0)
18
19
    20
21
    for i in range(n-1, -1, -1):
22
23
        idle_suffix_sum[i] = idle_suffix_sum[i+1] + (1 if server_rack[i] == '0' else 0)
24
25
    26
27
    min_cost = float('inf')
28
29
    30
31
    # For each possible prefix and suffix to remove
32
33
    for left in range(n + 1):
34
35
        for right in range(left, n + 1):
36
37
            # Active servers decommissioned (from start and end)
38
39
            active_removed = active_prefix_sum[left] + (active_prefix_sum[n] - active_prefix_sum[right])
40
41
            42
43
            # Idle servers remaining in the middle
44
45
            idle_remaining = idle_suffix_sum[left] - idle_suffix_sum[right]
46
47
            48
49
            cost = max(idle_remaining, active_removed)
50
51
            min_cost = min(min_cost, cost)
52
53
    54
55
    return min_cost
56
57
t = int(input())
58
59
for _ in range(t):
60
61
    server_rack = input().strip()
62
63
    print(min_cost_server_pruning(server_rack))",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054780
1390054778,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    min_cost = float('inf')
6
7
    for i in range(n + 1):
8
        for j in range(n - i + 1):
9
            remaining = s[i:n - j]
10
            11
            idle_count = remaining.count('0')
12
            removed_count = i + j - (n - len(remaining))
13
            14
            removed_ones = 0
15
            for k in range(i):
16
                if s[k] == '1':
17
                    removed_ones += 1
18
            for k in range(n-j, n):
19
                if s[k] == '1':
20
                    removed_ones += 1
21
            22
            23
            cost = max(idle_count, removed_ones)
24
            min_cost = min(min_cost, cost)
25
    26
    print(min_cost)
27
28
t = int(input())
29
for _ in range(t):
30
    solve()
31
32",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054778
1390054772,unknown,unknown,unknown,"1
def solve():
2
    """"""Solves the server decommissioning problem.""""""
3
4
    T = int(input())
5
    for _ in range(T):
6
        servers = input().strip()
7
        n = len(servers)
8
9
        min_cost = float('inf')
10
11
        for i in range(n + 1):  # Remove i from start
12
            for j in range(n - i + 1):  # Remove j from end
13
                remaining = servers[i:n - j]
14
15
                idle_count = remaining.count('0')
16
                active_removed = servers[:i].count('1') + servers[n - j:].count('1')
17
18
                min_cost = min(min_cost, max(idle_count, active_removed))
19
20
        print(min_cost)
21
22
solve()
23",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054772
1390054774,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    memo = {}
3
    4
    def dp(pos, skips_left, penalty):
5
        if pos == n:
6
            return 0
7
            8
        if (pos, skips_left, penalty) in memo:
9
            return memo[(pos, skips_left, penalty)]
10
            11
        current_strength = strengths[pos] + penalty
12
        13
        min_effort = current_strength + dp(pos + 1, skips_left, penalty)
14
        15
        if skips_left > 0:
16
            skip_effort = dp(pos + 1, skips_left - 1, penalty + 1)
17
            min_effort = min(min_effort, skip_effort)
18
            19
        memo[(pos, skips_left, penalty)] = min_effort
20
        return min_effort
21
    22
    return dp(0, k, 0)
23
24
def solve():
25
    t = int(input())
26
    27
    results = []
28
    for _ in range(t):
29
        n, k = map(int, input().split())
30
        strengths = list(map(int, input().split()))
31
        32
        result = min_effort_to_breach(n, k, strengths)
33
        results.append(result)
34
    35
    for result in results:
36
        print(result)
37
38
if __name__ == ""__main__"":
39
    solve()",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054774
1390054775,unknown,unknown,unknown,"1
import sys  
2
from itertools import accumulate  
3
4
def min_effort(arr, k):  
5
    n = len(arr)  
6
    T = sum(arr)  
7
    A = [arr[i] + (i + 1) for i in range(n)]  
8
    A.sort(reverse=True)  
9
    P = [0] + list(accumulate(A))  
10
    m_max = min(k, n)  
11
    best = float('inf')  
12
    13
    for m in range(m_max + 1):  
14
        cost = T + m * n - (m * m - m) // 2 - P[m]  
15
        if cost < best:  
16
            best = cost  
17
            18
    return best  
19
20
def solve():  
21
    data = sys.stdin.read().strip().split()  
22
    if not data:  
23
        return  
24
    t = int(data[0])  
25
    index = 1  
26
    res = []  
27
    28
    for _ in range(t):  
29
        n = int(data[index])  
30
        index += 1  
31
        k = int(data[index])  
32
        index += 1  
33
        arr = list(map(int, data[index:index + n]))  
34
        index += n  
35
        res.append(str(min_effort(arr, k)))  
36
        37
    sys.stdout.write(""\n"".join(res) + ""\n"")  
38
39
if __name__ == ""__main__"":  
40
    solve()      ",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054775
1390054768,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
5
    results = []
6
7
    8
9
    for case in test_cases:
10
11
        n, k, arr = case
12
13
        dq = deque()
14
15
        res = []
16
17
        # Process the first batch separately
18
19
        for i in range(k):
20
21
            if arr[i] < 0:
22
23
                dq.append(i)
24
25
        26
27
        # Store the earliest faulty reading for the first batch
28
29
        res.append(arr[dq[0]] if dq else 0)
30
31
        # Process remaining batches
32
33
        for i in range(k, n):
34
35
            # Remove out-of-window elements
36
37
            if dq and dq[0] < i - k + 1:
38
39
                dq.popleft()
40
41
            42
43
            # Add new element if faulty
44
45
            if arr[i] < 0:
46
47
                dq.append(i)
48
49
            # Store the earliest faulty reading for the current batch
50
51
            res.append(arr[dq[0]] if dq else 0)
52
53
        54
55
        results.append(res)
56
57
    58
59
    return results
60
61
# Input handling
62
63
t = int(input())  # Number of test cases
64
65
test_cases = []
66
67
for _ in range(t):
68
69
    n, k = map(int, input().split())
70
71
    arr = list(map(int, input().split()))
72
73
    test_cases.append((n, k, arr))
74
75
# Processing and Output
76
77
for res in earliest_faulty_readings(test_cases):
78
79
    print(*res)",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054768
1390054770,unknown,unknown,unknown,"1
def min_effort_to_breath(n, k, firewalls):
2
    firewalls.sort()
3
    return sum(firewalls[:n-k]) if k > 0 else sum(firewalls)
4
5
T = int(input().strip())
6
for _ in range(T):
7
    n, k = map(int, input().split())
8
    firewalls = list(map(int, input().split()))
9
    print(min_effort_to_breath(n, k, firewalls))",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054770
1390054771,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class BinaryStringMinCost {
4
    5
    public static boolean check(int k, String s, int n, int[] prefix0, int[] prefix1) {
6
        int l = 0;
7
8
        for (int r = 0; r < n; r++) {
9
            while (l <= r && (prefix0[r + 1] - prefix0[l]) > k) {
10
                l++;
11
            }
12
            // Check number of '1's decommissioned
13
            if (l <= r && (prefix1[l] + (prefix1[n] - prefix1[r + 1])) <= k) {
14
                return true;
15
            }
16
        }
17
18
        return prefix1[n] <= k;
19
    }
20
21
    public static int findMinCost(String s) {
22
        int n = s.length();
23
24
        // Prefix sum arrays
25
        int[] prefix0 = new int[n + 1];
26
        int[] prefix1 = new int[n + 1];
27
28
        for (int i = 1; i <= n; i++) {
29
            prefix0[i] = prefix0[i - 1] + (s.charAt(i - 1) == '0' ? 1 : 0);
30
            prefix1[i] = prefix1[i - 1] + (s.charAt(i - 1) == '1' ? 1 : 0);
31
        }
32
33
        // Binary search for minimum cost
34
        int low = 0, high = n;
35
        while (low < high) {
36
            int mid = (low + high) / 2;
37
            if (check(mid, s, n, prefix0, prefix1)) {
38
                high = mid;
39
            } else {
40
                low = mid + 1;
41
            }
42
        }
43
44
        return low;
45
    }
46
47
    public static void main(String[] args) {
48
        Scanner sc = new Scanner(System.in);
49
50
        int T = sc.nextInt();
51
        while (T-- > 0) {
52
            String s = sc.next();
53
            System.out.println(findMinCost(s));
54
        }
55
56
        sc.close();
57
    }
58
}",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054771
1390054762,unknown,unknown,unknown,"1
#include <iostream>
2
#include <string>
3
#include <algorithm> // For count()
4
using namespace std;
5
6
int min_decommissioning_cost(string server_rack) {
7
    size_t first_one = server_rack.find('1');
8
    size_t last_one = server_rack.rfind('1');
9
10
    // If there are no active servers (all 0s), cost is 0
11
    if (first_one == string::npos) {
12
        return 0;
13
    }
14
15
    // Extract the core segment containing all necessary servers
16
    string core_segment = server_rack.substr(first_one, last_one - first_one + 1);
17
18
    // Count remaining idle servers (0s)
19
    int remaining_idle = count(core_segment.begin(), core_segment.end(), '0');
20
21
    // Count removed active servers (1s) from the prefix and suffix
22
    int removed_active = count(server_rack.begin(), server_rack.begin() + first_one, '1') +
23
                         count(server_rack.begin() + last_one + 1, server_rack.end(), '1');
24
25
    // Return the minimum cost
26
    return max(remaining_idle, removed_active);
27
}
28
29
int main() {
30
    int T;
31
    cin >> T; // Number of test cases
32
    while (T--) {
33
        string server_rack;
34
        cin >> server_rack;
35
        cout << min_decommissioning_cost(server_rack) << endl;
36
    }
37
    return 0;
38
}
39",67,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054762
