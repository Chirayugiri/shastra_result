submission_id,username,problem_name,language,code,page,url
1390054082,unknown,unknown,unknown,"1
import java.io.BufferedReader;
2
import java.io.IOException;
3
import java.io.InputStreamReader;
4
5
public class ServerPruning {
6
    public static int minPruningCost(String serverRack) {
7
        int n = serverRack.length();
8
        int left = 0, right = n - 1;
9
10
        // Remove leading idle servers (0s)
11
        while (left <= right && serverRack.charAt(left) == '0') {
12
            left++;
13
        }
14
15
        // Remove trailing idle servers (0s)
16
        while (right >= left && serverRack.charAt(right) == '0') {
17
            right--;
18
        }
19
20
        // If no active servers remain
21
        if (left > right) return 0;
22
23
        // Count remaining idle servers
24
        int idleCount = 0;
25
        for (int i = left; i <= right; i++) {
26
            if (serverRack.charAt(i) == '0') {
27
                idleCount++;
28
            }
29
        }
30
31
        // Active servers removed
32
        int activeRemoved = left + (n - 1 - right);
33
34
        return Math.max(idleCount, activeRemoved);
35
    }
36
37
    public static void main(String[] args) throws IOException {
38
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
39
        int T = Integer.parseInt(br.readLine().trim());
40
        StringBuilder output = new StringBuilder();
41
42
        while (T-- > 0) {
43
            String serverRack = br.readLine().trim();
44
            output.append(minPruningCost(serverRack)).append(""\n"");
45
        }
46
47
        System.out.print(output);
48
    }
49
}
50",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054082
1390054083,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faults(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process the first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Process the rest of the array
13
    for i in range(len(arr) - k + 1):
14
        # Append the earliest faulty reading
15
        if dq:
16
            result.append(arr[dq[0]])
17
        else:
18
            result.append(0)
19
        20
        # Remove elements that are out of this window
21
        if dq and dq[0] == i:
22
            dq.popleft()
23
        24
        # Add the next element if it is faulty
25
        if i + k < len(arr) and arr[i + k] < 0:
26
            dq.append(i + k)
27
    28
    return result
29
30
def process_test_cases(test_cases):
31
    results = []
32
    for n, k, arr in test_cases:
33
        results.append("" "".join(map(str, earliest_faults(arr, k))))
34
    return ""\n"".join(results)
35
36
# Example test cases for debugging
37
test_cases = [
38
    (5, 2, [-8, 2, 3, -6, 10]),
39
    (8, 3, [12, -1, -7, 8, -15, 30, 16, 28])
40
]
41
42
# Running test cases
43
print(process_test_cases(test_cases))
44",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054083
1390054084,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    4
    # Count total active servers and total idle servers
5
    total_active = server_string.count('1')
6
    total_idle = n - total_active
7
    8
    # Precompute cumulative counts of active servers from left
9
    active_prefix_sum = [0] * (n + 1)
10
    for i in range(n):
11
        active_prefix_sum[i + 1] = active_prefix_sum[i] + (1 if server_string[i] == '1' else 0)
12
    13
    min_cost = float('inf')
14
    15
    # Try all possible starting positions for the remaining servers
16
    for left in range(n + 1):
17
        # For each possible ending position
18
        for right in range(left, n + 1):
19
            # Active servers in the remaining segment
20
            active_remaining = active_prefix_sum[right] - active_prefix_sum[left]
21
            idle_remaining = (right - left) - active_remaining
22
            23
            # Active servers removed
24
            active_removed = total_active - active_remaining
25
            26
            cost = max(idle_remaining, active_removed)
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
def faster_min_decommission_cost(server_string):
32
    n = len(server_string)
33
    34
    # Precompute prefix sums for active and idle servers
35
    active_prefix = [0] * (n + 1)
36
    idle_prefix = [0] * (n + 1)
37
    38
    for i in range(n):
39
        active_prefix[i + 1] = active_prefix[i] + (server_string[i] == '1')
40
        idle_prefix[i + 1] = idle_prefix[i] + (server_string[i] == '0')
41
    42
    min_cost = n  # Worst case cost
43
    44
    # For each possible remaining substring (from i to j-1)
45
    for i in range(n + 1):
46
        for j in range(i, n + 1):
47
            # Idle servers in remaining substring
48
            idle_remaining = idle_prefix[j] - idle_prefix[i]
49
            50
            # Active servers removed (from left and right)
51
            active_removed = active_prefix[n] - (active_prefix[j] - active_prefix[i])
52
            53
            cost = max(idle_remaining, active_removed)
54
            min_cost = min(min_cost, cost)
55
    56
    return min_cost
57
58
def main():
59
    t = int(input().strip())
60
    61
    for _ in range(t):
62
        server_string = input().strip()
63
        result = faster_min_decommission_cost(server_string)
64
        print(result)
65
66
if __name__ == ""__main__"":
67
    main()",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054084
1390054078,unknown,unknown,unknown,"1
def min_cost(servers):
2
    n = len(servers)
3
    4
    # Remove leading and trailing 0s
5
    start, end = 0, n - 1
6
    while start < n and servers[start] == '0':
7
        start += 1
8
    while end >= 0 and servers[end] == '0':
9
        end -= 1
10
    11
    if start > end:  # If only 0s exist, no cost is needed
12
        return 0
13
14
    core = servers[start:end + 1]  # Core segment without leading/trailing 0s
15
    total_ones = core.count('1')
16
    total_zeros = core.count('0')
17
18
    min_cost = max(total_zeros, 0)  # Removing no 1s initially
19
20
    removed_ones = 0
21
    for ch in core:
22
        if ch == '1':
23
            removed_ones += 1
24
        else:
25
            total_zeros -= 1  # Decrease remaining 0s
26
27
        # Cost = max(remaining 0s, removed 1s)
28
        min_cost = min(min_cost, max(total_zeros, removed_ones))
29
30
    return min_cost
31
32
33
# Reading input
34
T = int(input())  # Number of test cases
35
for _ in range(T):
36
    servers = input().strip()
37
    print(min_cost(servers))
38",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054078
1390054080,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054080
1390054081,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054081
1390054075,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if _name_ == ""_main_"":
73
    main()",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054075
1390054076,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
    result = []
3
    4
    for i in range(len(arr) - k + 1):
5
        # Check each batch of size k
6
        batch = arr[i:i+k]
7
        fault_found = False
8
        9
        # Find the earliest fault in the current batch
10
        for num in batch:
11
            if num < 0:
12
                result.append(num)
13
                fault_found = True
14
                break
15
        16
        # If no fault is found in the batch, append 0
17
        if not fault_found:
18
            result.append(0)
19
    20
    return result
21
22
# Process the input
23
t = int(input())  # Number of test cases
24
25
for _ in range(t):
26
    n, k = map(int, input().split())  # Array size and batch size
27
    arr = list(map(int, input().split()))  # Array elements
28
    29
    result = earliest_fault(arr, k)
30
    print(*result)  # Print the result",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054076
1390054077,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T; 
7
    for (int t = 0; t < T; t++) {
8
        string s;
9
        cin >> s; 
10
        int n = s.length();
11
12
    13
        vector<int> prefix_0(n + 1, 0);
14
        vector<int> prefix_1(n + 1, 0);
15
        for (int i = 1; i <= n; i++) {
16
            prefix_0[i] = prefix_0[i - 1] + (s[i - 1] == '0' ? 1 : 0);
17
            prefix_1[i] = prefix_1[i - 1] + (s[i - 1] == '1' ? 1 : 0);
18
        }
19
20
      21
        auto check = [&](int k) {
22
            int l = 0;
23
         24
            for (int r = 0; r < n; r++) {
25
              26
                while (l <= r && prefix_0[r + 1] - prefix_0[l] > k) {
27
                    l++;
28
                }
29
                // wtf ,  check number of 1's decommissioned
30
                if (l <= r && prefix_1[l] + (prefix_1[n] - prefix_1[r + 1]) <= k) {
31
                    return true;
32
                }
33
            }
34
      35
            if (prefix_1[n] <= k) {
36
                return true;
37
            }
38
            return false;
39
        };
40
41
        // Binary search for minimum cost
42
        int low = 0, high = n;
43
        while (low < high) {
44
            int mid = (low + high) / 2;
45
            if (check(mid)) {
46
                high = mid;
47
            } else {
48
                low = mid + 1;
49
            }
50
        }
51
        cout << low << endl;
52
    }
53
    return 0;
54
}",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054077
1390054074,unknown,unknown,unknown,"1
import java.util.*;
2
public class Main {
3
    public static void main(String[] args) {
4
        Scanner sc = new Scanner(System.in);
5
        int t = sc.nextInt();
6
        7
        while (t-- > 0) {
8
            int n = sc.nextInt(), k = sc.nextInt();
9
            int[] arr = new int[n];
10
            11
            for (int i = 0; i < n; i++) {
12
                arr[i] = sc.nextInt();
13
            }
14
            15
            System.out.println(minEffort(n, k, arr));
16
        }
17
        sc.close();
18
    }
19
    20
    static int minEffort(int n, int k, int[] arr) {
21
        int[][] dp = new int[n + 1][k + 1];
22
        23
        for (int i = n - 1; i >= 0; i--) {
24
            for (int skip = 0; skip <= k; skip++) {
25
                int take = arr[i] + skip;
26
                if (i + 1 < n) take += dp[i + 1][skip];
27
                28
                int leave = Integer.MAX_VALUE;
29
                if (skip < k && i + 1 <= n) leave = dp[i + 1][skip + 1];
30
                31
                dp[i][skip] = Math.min(take, leave);
32
            }
33
        }
34
        35
        return dp[0][0];
36
    }
37
}",101,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054074
