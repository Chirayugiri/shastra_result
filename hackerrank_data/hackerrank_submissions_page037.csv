submission_id,username,problem_name,language,code,page,url
1390055378,unknown,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n, k = map(int, input().split())
4
    a = list(map(int, input().split()))
5
    values = [a[i] - (n - i - 1) for i in range(n)]
6
    values.sort(reverse=True)
7
    prefix_sum = [0] * (n + 1)
8
    for i in range(n):
9
        prefix_sum[i + 1] = prefix_sum[i] + values[i]
10
    max_m = min(k, n)
11
    max_total = max(prefix_sum[m] + m * (m - 1) // 2 for m in range(max_m + 1))
12
    print(sum(a) - max_total)",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055378
1390055383,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055383
1390055386,unknown,unknown,unknown,"1
def compute_min_cost(s):
2
    T = s.count('1')
3
    if T == 0:
4
        return 0
5
    n = len(s)
6
    7
    # Compute x_max_case1: max number of 1's in window of length T
8
    x_max_case1 = 0
9
    if T <= n:
10
        current = sum(1 for c in s[:T] if c == '1')
11
        x_max_case1 = current
12
        for i in range(1, n - T + 1):
13
            if s[i-1] == '1':
14
                current -= 1
15
            if s[i + T - 1] == '1':
16
                current += 1
17
            if current > x_max_case1:
18
                x_max_case1 = current
19
    20
    # Compute x_max_case2: max of min(run_length, T-1) for all runs of 1's
21
    x_max_case2 = 0
22
    current_run = 0
23
    for c in s:
24
        if c == '1':
25
            current_run += 1
26
        else:
27
            if current_run > 0:
28
                candidate = min(current_run, T-1)
29
                if candidate > x_max_case2:
30
                    x_max_case2 = candidate
31
                current_run = 0
32
    # Check the last run
33
    if current_run > 0:
34
        candidate = min(current_run, T-1)
35
        if candidate > x_max_case2:
36
            x_max_case2 = candidate
37
    38
    case1_cost = T - x_max_case1
39
    case2_cost = T - x_max_case2
40
    return min(case1_cost, case2_cost)
41
42
def main():
43
    import sys
44
    input = sys.stdin.read().split()
45
    T_cases = int(input[0])
46
    for i in range(1, T_cases + 1):
47
        s = input[i]
48
        print(compute_min_cost(s))
49
50
if __name__ == ""__main__"":
51
    main()",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055386
1390055373,unknown,unknown,unknown,"1
import sys
2
def solve():
3
    x = sys.stdin.buffer.read().split()
4
    if not x: return
5
    t = int(x[0])
6
    i = 1
7
    o = []
8
    for _ in range(t):
9
        s = x[i].decode()
10
        i += 1
11
        n = len(s)
12
        A = [0]*(n+1)
13
        B = [0]*(n+1)
14
        for j in range(n):
15
            B[j+1] = B[j] + (s[j]=='1')
16
            A[j+1] = A[j] + (s[j]=='0')
17
        T = A[n]
18
        C = [0]*(n+1)
19
        E = [0]*(n+1)
20
        for j in range(n):
21
            E[j+1] = E[j] + (s[n-1-j]=='1')
22
            C[j+1] = C[j] + (s[n-1-j]=='0')
23
        r = 10**9
24
        for x_ in range(n+1):
25
            m = n - x_
26
            y = T - A[x_] - B[x_]
27
            if y < 0: y = 0
28
            if y > m: y = m
29
            for z in (y, y-1, y+1):
30
                if z < 0 or z > m: continue
31
                v1 = B[x_] + E[z]
32
                v2 = T - (A[x_] + C[z])
33
                v = v1 if v1 >= v2 else v2
34
                if v < r: r = v
35
        o.append(str(r))
36
    sys.stdout.write(""\n"".join(o))
37
if __name__==""__main__"":
38
    solve()
39",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055373
1390055374,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
# Input Handling
60
if __name__ == ""__main__"":
61
    T = int(input())
62
    test_cases = [input().strip() for _ in range(T)]
63
    results = min_decommissioning_cost(test_cases)
64
    for result in results:
65
        print(result)",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055374
1390055377,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
#include <ext/pb_ds/assoc_container.hpp>
3
#include <ext/pb_ds/tree_policy.hpp>
4
#include <ext/pb_ds/detail/standard_policies.hpp>
5
#include <cmath>
6
#define int long long int
7
#define pb push_back
8
/*---------------------------------------------------------------------------------------------------------------------------------*/
9
/*ASCII small case-> a-97 to z-122
10
upper case-> A-65 to Z-90*/
11
#define nl ""\n""
12
#define mp map<int, int>
13
#define all(v) v.begin(), v.end()
14
#define F first
15
#define S second
16
#define ump unordered_map<long long, int, custom_hash>
17
#define mstpi multiset<pair<int, int> >
18
#define mst multiset<int>
19
#define vec vector<int>
20
#define pi pair<int, int>
21
#define ld long double
22
#define vep vector<pair<int, int>>
23
#define ul unsigned long long
24
#define loop1 for (int i = 0; i < n; i++)
25
#define REP(i, a, b) for (int i = a; i <= b; i++)
26
#define NO cout << ""NO"" << endl
27
#define YES cout << ""YES"" << endl
28
using namespace std;
29
using namespace __gnu_pbds;
30
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
31
/*---------------------------------------------------------------------------------------------------------------------------------*/
32
const double PI = 3.1415926535;
33
const int inf = 1e18;
34
const int mod = 1000000007;
35
/*---------------------------------------------------------------------------------------------------------------------------------*/
36
int modmul(int a, int b, int m)
37
{
38
    a %= m;
39
    b %= m;
40
    return (a * b) % m;
41
}
42
int modexp(int n, int x)
43
{
44
    int ans = 1;
45
    while (n > 0)
46
    {
47
        if (n & 1)
48
        {
49
            ans = (ans * x) % mod;
50
        }
51
        n >>= 1;
52
        x = (x * x) % mod;
53
    }
54
    return ans;
55
}
56
/*---------------------------------------------------------------------------------------------------------------------------------*/
57
string add(string a, string b)
58
{
59
    string ans = """";
60
    int carry = 0;
61
    while (!a.empty() || !b.empty() || carry > 0)
62
    {
63
        int digitA = a.empty() ? 0 : a.back() - '0';
64
        int digitB = b.empty() ? 0 : b.back() - '0';
65
        int sum = digitA + digitB + carry;
66
        ans = to_string(sum % 10) + ans;
67
        carry = sum / 10;
68
        if (!a.empty())
69
            a.pop_back();
70
        if (!b.empty())
71
            b.pop_back();
72
    }
73
    return ans;
74
}
75
string ministrnum(string a, string b)
76
{
77
    if (a.length() > b.length())
78
        return b;
79
    else if (b.length() > a.length())
80
        return a;
81
    else
82
    {
83
        int n = a.length();
84
        for (int i = 0; i < n; i++)
85
        {
86
            if (a[i] > b[i])
87
                return b;
88
            else if (a[i] < b[i])
89
                return a;
90
        }
91
    }
92
    return a;
93
}
94
vector<int> sieve(int n) {
95
    vector<bool> isPrime(n + 1, true);
96
    vector<int> primes;
97
    if(n >= 0) isPrime[0] = false;
98
    if(n >= 1) isPrime[1] = false;
99
    for (int i = 2; i <= n; i++) {
100
        if (isPrime[i]) {
101
            primes.push_back(i);
102
            for (int j = 2 * i; j <= n; j += i)
103
                isPrime[j] = false;
104
        }
105
    }
106
    return primes;
107
}
108
109
class SegmentTree {
110
public:
111
    int n;
112
    std::vector<int> tree;
113
    std::vector<int> lazy;
114
    115
    SegmentTree(const std::vector<int>& arr) {
116
        n = arr.size();
117
        tree.resize(4 * n, 0);
118
        lazy.resize(4 * n, 0);
119
        build(arr, 0, n - 1, 0);
120
    }
121
    122
    void build(const std::vector<int>& arr, int start, int end, int index) {
123
        if (start == end) {
124
            tree[index] = arr[start];
125
            return;
126
        }
127
        int mid = (start + end) / 2;
128
        build(arr, start, mid, 2 * index + 1);
129
        build(arr, mid + 1, end, 2 * index + 2);
130
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
131
    }
132
    133
    int queryRange(int start, int end, int l, int r, int index = 0) {
134
        if (lazy[index] != 0) {
135
            tree[index] += (end - start + 1) * lazy[index];
136
            if(start != end) {
137
                lazy[2 * index + 1] += lazy[index];
138
                lazy[2 * index + 2] += lazy[index];
139
            }
140
            lazy[index] = 0;
141
        }
142
        if (start > r || end < l)
143
            return 0;
144
        if (start >= l && end <= r)
145
            return tree[index];
146
        int mid = (start + end) / 2;
147
        return queryRange(start, mid, l, r, 2 * index + 1) +
148
               queryRange(mid + 1, end, l, r, 2 * index + 2);
149
    }
150
    151
    void updateRange(int start, int end, int l, int r, int diff, int index = 0) {
152
        if(lazy[index] != 0) {
153
            tree[index] += (end - start + 1) * lazy[index];
154
            if(start != end) {
155
                lazy[2 * index + 1] += lazy[index];
156
                lazy[2 * index + 2] += lazy[index];
157
            }
158
            lazy[index] = 0;
159
        }
160
        if(start > r || end < l)
161
            return;
162
        if(start >= l && end <= r) {
163
            tree[index] += (end - start + 1) * diff;
164
            if(start != end) {
165
                lazy[2 * index + 1] += diff;
166
                lazy[2 * index + 2] += diff;
167
            }
168
            return;
169
        }
170
        int mid = (start + end) / 2;
171
        updateRange(start, mid, l, r, diff, 2 * index + 1);
172
        updateRange(mid + 1, end, l, r, diff, 2 * index + 2);
173
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
174
    }
175
};
176
class DSU {
177
public:
178
    std::vector<int> parent, rank;
179
    180
    DSU(int n) {
181
        parent.resize(n);
182
        rank.resize(n, 0);
183
        for (int i = 0; i < n; i++)
184
            parent[i] = i;
185
    }
186
    187
    int find(int x) {
188
        if (parent[x] != x)
189
            parent[x] = find(parent[x]);
190
        return parent[x];
191
    }
192
    193
    bool unionSets(int x, int y) {
194
        int rootX = find(x);
195
        int rootY = find(y);
196
        if (rootX == rootY)
197
            return false;
198
        if (rank[rootX] < rank[rootY])
199
            parent[rootX] = rootY;
200
        else if (rank[rootX] > rank[rootY])
201
            parent[rootY] = rootX;
202
        else {
203
            parent[rootY] = rootX;
204
            rank[rootX]++;
205
        }
206
        return true;
207
    }
208
};
209
210
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
211
struct Node {
212
    int val;
213
    int weight, size;
214
    Node *left, *right;
215
    bool rev = false;
216
    Node(int c): val(c), weight(rng()), size(1), left(NULL), right(NULL) {}
217
};
218
ostream &operator<<(ostream &os, Node *n) {
219
    if(!n) return os;
220
    os << n -> left;
221
    os << n -> val;
222
    os << n -> right;
223
    return os;
224
}
225
int size(Node *Treap) {return Treap ? Treap -> size: 0;}
226
void push(Node* Treap) {
227
    if(!Treap) return;
228
    if(Treap -> rev) {
229
        Treap -> rev = false;
230
        swap(Treap->left, Treap->right);
231
        if(Treap -> left) Treap->left->rev ^= true;
232
        if(Treap -> right) Treap->right->rev ^= true;
233
    }
234
}
235
void pull(Node *Treap) {
236
    if(!Treap) return;
237
    push(Treap -> left), push(Treap -> right);
238
    Treap -> size = size(Treap -> left) + size(Treap -> right) + 1;
239
    return;
240
}
241
void split(Node *Treap, Node *&left, Node *&right, int val) {
242
    if(!Treap) {
243
        left = right = NULL;
244
        return;
245
    }
246
    push(Treap);
247
    if(size(Treap -> left) < val) {
248
        split(Treap -> right, Treap -> right, right, val - size(Treap->left) - 1);
249
        left = Treap;
250
    }
251
    else {
252
        split(Treap -> left, left, Treap -> left, val);
253
        right = Treap;
254
    }
255
    pull(Treap);
256
}
257
void merge(Node *&Treap, Node *left, Node *right) {
258
    push(left), push(right);
259
    if(left == NULL) {
260
        Treap = right;
261
        return;
262
    }
263
    if(right == NULL) {
264
        Treap = left;
265
        return;
266
    }
267
    if(left -> weight < right -> weight) {
268
        merge(right -> left, left, right -> left);
269
        Treap = right;
270
    }
271
    else {
272
        merge(left->right, left->right, right);
273
        Treap = left;
274
    }
275
    pull(Treap);
276
}
277
void inOrder(Node *curr, vector<int> &res) {
278
    if(curr == NULL) return;
279
    push(curr);
280
    inOrder(curr->left, res);
281
    res.pb(curr->val);
282
    inOrder(curr->right, res);
283
    pull(curr);
284
}
285
struct Treap {
286
    Node *root = nullptr;
287
    void insert(int i, int val) {
288
        Node *l, *r;
289
        split(root, l, r, i);
290
        Node *v = new Node(val);
291
        merge(l, l, v);
292
        merge(root, l, r);
293
    }
294
    295
    void del(int i) {
296
        Node *l, *r;
297
        split(root, l, r, i);
298
        split(r, root, r, 1);
299
        merge(root, l, r);
300
    }
301
    302
    void update(int l, int r, function<void(Node *)> f) {
303
        Node *a, *b, *c;
304
        split(root, a, b, l-1);
305
        split(b, b, c, r-l+1);
306
        if(b) {f(b);}
307
        merge(root, a, b);
308
        merge(root, root, c);
309
    }
310
    311
    vector<int> allPr() {
312
        vector<int> res;
313
        inOrder(root, res);
314
        return res;
315
    }
316
    317
    void cycShft(int l, int r) {
318
        Node *a, *b, *c, *d;
319
        split(root, a, b, l-1);
320
        split(b, b, c, r-l+1);
321
        split(b, b, d, r-l);
322
        merge(root, a, d);
323
        merge(root, root, b);
324
        merge(root, root, c);
325
    }
326
};
327
vector<int> computePrefix(const string &pattern) {
328
    int n = pattern.size();
329
    vector<int> prefix(n, 0);
330
    for (int i = 1, j = 0; i < n; i++) {
331
        while (j > 0 && pattern[i] != pattern[j])
332
            j = prefix[j - 1];
333
        if (pattern[i] == pattern[j])
334
            j++;
335
        prefix[i] = j;
336
    }
337
    return prefix;
338
}
339
340
vector<int> KMPSearch(const string &text, const string &pattern) {
341
    vector<int> prefix = computePrefix(pattern);
342
    vector<int> occurrences;
343
    for (int i = 0, j = 0; i < (int)text.size(); i++) {
344
        while (j > 0 && text[i] != pattern[j])
345
            j = prefix[j - 1];
346
        if (text[i] == pattern[j])
347
            j++;
348
        if (j == (int)pattern.size()) {
349
            occurrences.push_back(i - j + 1);
350
            j = prefix[j - 1];
351
        }
352
    }
353
    return occurrences;
354
}
355
void solve()
356
{
357
    int n, ans = 1e9;
358
    string s;
359
    cin>>s;
360
    n = s.size();
361
    362
    int tot1 = count(all(s), '1');
363
    ans = tot1;
364
    365
    366
    auto check = [&](int m) {
367
        int cnt0 = 0, cnt1 = 0;
368
        for(int i = 0, j = 0; i<n; i++) {
369
            cnt0 += s[i] == '0';
370
            cnt1 += s[i] == '1';
371
            372
            if(tot1 - cnt1 == m) {
373
                while(j < n && s[j] == '0') {
374
                    cnt0--;
375
                    j++;
376
                }
377
                if(cnt0 <= m) return true;
378
                cnt1--;
379
                j++;
380
            }
381
        }
382
        return false;
383
    };
384
    385
    int l = 0, r = ans;
386
    while(l <= r) {
387
        int m = r - (r - l)/2;
388
        if(check(m)) r = m - 1;
389
        else l = m + 1;
390
    }
391
    cout<<l<<endl;
392
}
393
int32_t main()
394
{
395
    ios_base ::sync_with_stdio(0);
396
    cin.tie(0);
397
    cout.tie(0);
398
    int t = 1;
399
    cin >> t;
400
    while (t--)
401
        solve();
402
}",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055377
1390055369,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        # Calculate the potential reduction for each firewall if skipped
6
        # Reduction for a[i] is a[i] - (number of firewalls after it) * 1
7
        # Because skipping it increases the strength of all subsequent firewalls by 1
8
        # So, the net reduction is a[i] - (n - i - 1)
9
        reductions = []
10
        for i in range(n):
11
            reductions.append(a[i] - (n - i - 1))
12
        13
        # Select the top k reductions (most positive)
14
        # If a reduction is negative, it's better not to skip that firewall
15
        # So, we only consider positive reductions
16
        positive_reductions = [r for r in reductions if r > 0]
17
        positive_reductions.sort(reverse=True)
18
        19
        # Take the top min(k, len(positive_reductions)) reductions
20
        skip_count = min(k, len(positive_reductions))
21
        total_reduction = sum(positive_reductions[:skip_count])
22
        23
        # Calculate the total effort
24
        # Initial total effort is sum(a)
25
        # After skipping, the total effort is sum(a) - total_reduction
26
        # Because the skipped firewalls are reduced by their a[i], but the subsequent firewalls are increased by skip_count
27
        # Wait, no. The total effort is sum(a) - sum of a[i] for skipped firewalls + skip_count * (number of firewalls after the last skipped firewall)
28
        # This is getting complicated. Let's think differently.
29
        30
        # Alternative approach:
31
        # Sort the firewalls in descending order of a[i] - (n - i - 1)
32
        # Skip the top k firewalls in this order
33
        # Calculate the total effort accordingly
34
        35
        # Let's implement this alternative approach
36
        # Create a list of tuples (a[i], i)
37
        firewall_indices = [(a[i], i) for i in range(n)]
38
        # Sort by a[i] - (n - i - 1) in descending order
39
        firewall_indices.sort(key=lambda x: x[0] - (n - x[1] - 1), reverse=True)
40
        41
        # Select the top k firewalls to skip
42
        skip_indices = set()
43
        for i in range(min(k, n)):
44
            skip_indices.add(firewall_indices[i][1])
45
        46
        # Calculate the total effort
47
        total_effort = 0
48
        increase = 0
49
        for i in range(n):
50
            if i in skip_indices:
51
                increase += 1
52
            else:
53
                total_effort += a[i] + increase
54
        55
        results.append(total_effort)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = []
61
for _ in range(T):
62
    n, k = map(int, input().split())
63
    a = list(map(int, input().split()))
64
    test_cases.append((n, k, a))
65
66
# Compute results
67
results = min_effort(test_cases)
68
69
# Output results
70
for res in results:
71
    print(res)",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055369
1390055370,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055370
1390055371,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    total_effort = sum(strengths)  # Base effort without skipping
3
    min_effort = total_effort  # Initialize minimum effort
4
    5
    for skips in range(k + 1):  # Try skipping 0 to k firewalls
6
        effort = sum(strengths[skips:]) + sum(range(skips))  # Apply security increase for remaining firewalls
7
        min_effort = min(min_effort, effort)  # Track minimum possible effort
8
    9
    return min_effort
10
11
# Read input
12
t = int(input())
13
for _ in range(t):
14
    n, k = map(int, input().split())
15
    strengths = list(map(int, input().split()))
16
    print(min_effort_to_breach(n, k, strengths))",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055371
1390055367,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    min_effort = total_effort  # Start with no skips
4
    5
    for i in range(n):
6
        if k > 0:  # If we can skip at least one firewall
7
            new_effort = total_effort - firewalls[i]  # Remove the skipped firewall's effort
8
            new_effort += sum(1 for j in range(i + 1, n))  # Increase remaining firewalls' strength
9
            min_effort = min(min_effort, new_effort)  # Keep track of the minimum effort
10
11
    return min_effort
12
13
t = int(input())
14
for _ in range(t):
15
    n, k = map(int, input().split())
16
    firewalls = list(map(int, input().split()))
17
    print(min_effort(n, k, firewalls))
18",37,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055367
