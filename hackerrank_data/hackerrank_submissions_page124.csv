submission_id,username,problem_name,language,code,page,url
1390053671,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static int minEffort(int[] firewalls, int k) {
7
        int n = firewalls.length;
8
        if (k >= n) return 0;
9
10
        int[][] dp = new int[n + 1][k + 1];
11
        12
        for (int[] row : dp) Arrays.fill(row, Integer.MAX_VALUE);
13
        for (int j = 0; j <= k; j++) dp[n][j] = 0;
14
15
        for (int i = n - 1; i >= 0; i--) {
16
            for (int j = 0; j <= k; j++) {
17
                if (j < k) dp[i][j] = dp[i + 1][j + 1];
18
                if (dp[i + 1][j] != Integer.MAX_VALUE) {
19
                    dp[i][j] = Math.min(dp[i][j], firewalls[i] + dp[i + 1][j]);
20
                }
21
            }
22
        }
23
24
        return dp[0][0];
25
    }
26
27
    public static void main(String[] args) {
28
        Scanner sc = new Scanner(System.in);
29
        int t = sc.nextInt();
30
31
        while (t-- > 0) {
32
            int n = sc.nextInt();
33
            int k = sc.nextInt();
34
            int[] firewalls = new int[n];
35
36
            for (int i = 0; i < n; i++) {
37
                firewalls[i] = sc.nextInt();
38
            }
39
40
            System.out.println(minEffort(firewalls, k));
41
        }
42
43
        sc.close();
44
    }
45
}
46",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053671
1390053677,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        prefix_0 = [0] * (n + 1)
7
        prefix_1 = [0] * (n + 1)
8
        for i in range(n):
9
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
10
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
11
        for i in range(n + 1):
12
            for j in range(i, n + 1):
13
                remaining_0s = prefix_0[j] - prefix_0[i]
14
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
15
                cost = max(remaining_0s, removed_1s)
16
                if cost < min_cost:
17
                    min_cost = cost
18
        results.append(min_cost)
19
    return results
20
T = int(input())
21
test_cases = [input().strip() for _ in range(T)]
22
results = min_decommission_cost(test_cases)
23
for result in results:
24
    print(result)",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053677
1390053678,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    skipped = [False] * n  # Track skipped firewalls
6
    7
    # Greedy selection of k highest firewalls to skip
8
    temp_a = a[:]
9
    for _ in range(k):
10
        max_val = -1
11
        max_idx = -1
12
        for i in range(n):
13
            if not skipped[i] and temp_a[i] > max_val:
14
                max_val = temp_a[i]
15
                max_idx = i
16
        if max_idx != -1:
17
            skipped[max_idx] = True
18
            temp_a[max_idx] = -1
19
20
    effort = 0
21
    skipped_count = 0
22
    23
    for i in range(n):
24
        if skipped[i]:
25
            skipped_count += 1
26
        else:
27
            effort += a[i] + skipped_count
28
29
    print(effort)
30
31
t = int(input())
32
for _ in range(t):
33
    solve()",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053678
1390053668,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    idx = 0
6
    T = int(input[idx])
7
    idx += 1
8
    for _ in range(T):
9
        n, k = int(input[idx]), int(input[idx+1])
10
        idx +=2
11
        a = list(map(int, input[idx:idx+n]))
12
        idx +=n
13
        sum_a = sum(a)
14
        v = []
15
        for i in range(n):
16
            val = a[i] - (n - i -1)
17
            v.append(val)
18
        v.sort(reverse=True)
19
        prefix = [0] * (n+1)
20
        for i in range(n):
21
            prefix[i+1] = prefix[i] + v[i]
22
        max_sum = 0
23
        max_t = min(k, n)
24
        for t in range(0, max_t+1):
25
            current = prefix[t] + t*(t-1)//2
26
            if current > max_sum:
27
                max_sum = current
28
        print(sum_a - max_sum)
29
30
if __name__ == ""__main__"":
31
    main()",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053668
1390053670,unknown,unknown,unknown,"1
def min_cost(server_str):
2
    n = len(server_str)
3
    prefix_1 = [0] * (n + 1)  # prefix count of 1s
4
    prefix_0 = [0] * (n + 1)  # prefix count of 0s
5
6
    for i in range(n):
7
        prefix_1[i + 1] = prefix_1[i] + (1 if server_str[i] == '1' else 0)
8
        prefix_0[i + 1] = prefix_0[i] + (1 if server_str[i] == '0' else 0)
9
10
    total_1 = prefix_1[n]
11
    total_0 = prefix_0[n]
12
13
    min_cost = float('inf')
14
15
    # Try removing l elements from the front
16
    for l in range(n + 1):
17
        # Try removing r elements from the back
18
        for r in range(n - l + 1):
19
            left = l
20
            right = n - r
21
            remaining_0 = prefix_0[right] - prefix_0[left]
22
            removed_1 = prefix_1[left] + (total_1 - prefix_1[right])
23
            cost = max(remaining_0, removed_1)
24
            min_cost = min(min_cost, cost)
25
26
    return min_cost
27
28
# Main driver
29
T = int(input())
30
for _ in range(T):
31
    server_str = input().strip()
32
    print(min_cost(server_str))",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053670
1390053658,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        7
        # Precompute prefix sums for 0's and 1's
8
        prefix_0 = [0] * (n + 1)
9
        prefix_1 = [0] * (n + 1)
10
        for i in range(n):
11
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
12
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
13
        14
        # Iterate through all possible splits
15
        for i in range(n + 1):
16
            for j in range(i, n + 1):
17
                # Remaining segment is from i to j-1
18
                remaining_0s = prefix_0[j] - prefix_0[i]
19
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
20
                cost = max(remaining_0s, removed_1s)
21
                if cost < min_cost:
22
                    min_cost = cost
23
        results.append(min_cost)
24
    return results
25
26
# Read input
27
T = int(input())
28
test_cases = [input().strip() for _ in range(T)]
29
30
# Compute results
31
results = min_decommission_cost(test_cases)
32
33
# Print output
34
for result in results:
35
    print(result)
36",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053658
1390053664,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053664
1390053656,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] arr = new int[n];
11
            for (int i = 0; i < n; i++) arr[i] = sc.nextInt();
12
            13
            long[][] dp = new long[n + 1][k + 1];
14
            for (int i = 0; i <= n; i++) Arrays.fill(dp[i], Long.MAX_VALUE / 2);
15
            dp[0][0] = 0;
16
            17
            for (int i = 1; i <= n; i++) {
18
                for (int j = 0; j <= k; j++) {
19
                    // Don't skip
20
                    dp[i][j] = dp[i - 1][j] + arr[i - 1] + j;
21
                    // Skip
22
                    if (j > 0) dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1]);
23
                }
24
            }
25
            26
            long minEffort = Long.MAX_VALUE;
27
            for (int j = 0; j <= k; j++) {
28
                minEffort = Math.min(minEffort, dp[n][j]);
29
            }
30
            31
            System.out.println(minEffort);
32
        }
33
        sc.close();
34
    }
35
}
36",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053656
1390053654,unknown,unknown,unknown,"1
def earliest_faulty_reading(test_cases, data):
2
    results = []
3
    for case in range(test_cases):
4
        n, k = data[case][0]
5
        arr = data[case][1]
6
        res = []
7
        8
        for i in range(n - k + 1):
9
            batch = arr[i:i + k]
10
            found = next((num for num in batch if num < 0), 0)
11
            res.append(found)
12
        13
        results.append("" "".join(map(str, res)))
14
    15
    return ""\n"".join(results)
16
17
# Reading input
18
t = int(input())
19
data = []
20
for _ in range(t):
21
    n, k = map(int, input().split())
22
    arr = list(map(int, input().split()))
23
    data.append(((n, k), arr))
24
25
# Processing and printing output
26
print(earliest_faulty_reading(t, data))",124,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053654
