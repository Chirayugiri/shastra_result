submission_id,username,problem_name,language,code,page,url
1390053632,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        prefix_0 = [0] * (n + 1)
7
        prefix_1 = [0] * (n + 1)
8
        for i in range(n):
9
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
10
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
11
        for i in range(n + 1):
12
            for j in range(i, n + 1):
13
                remaining_0s = prefix_0[j] - prefix_0[i]
14
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
15
                cost = max(remaining_0s, removed_1s)
16
                if cost < min_cost:
17
                    min_cost = cost
18
        results.append(min_cost)
19
    return results
20
T = int(input())
21
test_cases = [input().strip() for _ in range(T)]
22
results = min_decommission_cost(test_cases)
23
for result in results:
24
    print(result)",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053632
1390053634,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process the first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store the result for the first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process the remaining windows
17
    for i in range(k, n):
18
        # Remove elements that are out of the current window
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add the current element if it is negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Store the result for the current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Size of array and batch size
35
    arr = list(map(int, input().split()))  # Array elements
36
    37
    # Get the results and print as space-separated values
38
    print(*earliest_faulty_readings(arr, k))",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053634
1390053635,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # If we can skip all firewalls, return 0 effort
3
    if k >= n:
4
        return 0
5
6
    # Initialize DP array: dp[j] = min effort using at most j skips
7
    dp = [float('inf')] * (k + 1)
8
    dp[0] = 0  # Base case: No firewalls, no effort
9
10
    for i in range(1, n + 1):
11
        # Process in **reverse order** to avoid overwriting dp[j-1]
12
        for j in range(min(k, i), -1, -1):  
13
            # Case 1: Don't skip this firewall
14
            if j <= i - 1:
15
                dp[j] = dp[j] + strengths[i-1] + j
16
17
            # Case 2: Skip this firewall (if we have skips left)
18
            if j > 0:
19
                dp[j] = min(dp[j], dp[j-1])
20
21
    return dp[k]
22
23
def solve():
24
    t = int(input())  # Read number of test cases
25
    26
    for _ in range(t):
27
        n, k = map(int, input().split())  # Read n (firewalls) and k (max skips)
28
        strengths = list(map(int, input().split()))  # Read firewall strengths
29
        30
        # Special case: If we can skip all firewalls
31
        if k >= n:
32
            print(0)
33
        else:
34
            print(min_effort_to_breach(n, k, strengths))
35
36
# Run the solution
37
solve()
38",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053635
1390053626,unknown,unknown,unknown,"1
def calculate_minimum_effort(test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        # Calculate the total effort
6
        total_effort = sum(firewalls)
7
        8
        # If k is equal to n, we can skip all firewalls
9
        if k == n:
10
            min_effort = 0
11
        else:
12
            # Sort the firewalls to find the k largest easily
13
            firewalls.sort()
14
            # Sum of the k largest firewalls
15
            sum_of_k_largest = sum(firewalls[-k:])
16
            # Minimum effort is total effort minus the sum of the k largest firewalls
17
            min_effort = total_effort - sum_of_k_largest
18
        19
        results.append(min_effort)
20
    21
    return results
22
23
def main():
24
    import sys
25
    input = sys.stdin.read
26
    data = input().splitlines()
27
    28
    index = 0
29
    T = int(data[index])
30
    index += 1
31
    test_cases = []
32
    33
    for _ in range(T):
34
        n, k = map(int, data[index].split())
35
        index += 1
36
        firewalls = list(map(int, data[index].split()))
37
        index += 1
38
        test_cases.append((n, k, firewalls))
39
    40
    results = calculate_minimum_effort(test_cases)
41
    42
    for result in results:
43
        print(result)
44
45
if __name__ == ""__main__"":
46
    main()",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053626
1390053627,unknown,unknown,unknown,"1
t = int(input())
2
3
for _ in range(t):
4
    n, k = map(int, input().split())
5
    arr = list(map(int, input().split()))
6
    result = []
7
8
    for i in range(n - k + 1):
9
        batch = arr[i:i + k]
10
        for num in batch:
11
            if num < 0:
12
                result.append(num)
13
                break
14
        else:
15
            result.append(0)  
16
    print(*result)
17
                18
            19
            ",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053627
1390053631,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Precompute prefix and suffix sums for active and idle servers
5
    prefix_active = [0] * (n + 1)  # prefix_active[i] = # of active servers in servers[0:i]
6
    prefix_idle = [0] * (n + 1)    # prefix_idle[i] = # of idle servers in servers[0:i]
7
    8
    for i in range(n):
9
        prefix_active[i + 1] = prefix_active[i] + (1 if servers[i] == '1' else 0)
10
        prefix_idle[i + 1] = prefix_idle[i] + (1 if servers[i] == '0' else 0)
11
    12
    total_active = prefix_active[n]
13
    total_idle = prefix_idle[n]
14
    15
    min_cost = float('inf')
16
    17
    # Try all possible left and right cuts
18
    for left in range(n + 1):  # Remove servers[0:left]
19
        for right in range(left, n + 1):  # Keep servers[left:right]
20
            # Active servers removed = those removed from left + those removed from right
21
            active_removed_left = prefix_active[left]
22
            active_removed_right = total_active - prefix_active[right]
23
            active_removed = active_removed_left + active_removed_right
24
            25
            # Idle servers remaining = those in the middle section we keep
26
            idle_remaining = prefix_idle[right] - prefix_idle[left]
27
            28
            cost = max(idle_remaining, active_removed)
29
            min_cost = min(min_cost, cost)
30
    31
    return min_cost
32
33
def main():
34
    t = int(input().strip())
35
    for _ in range(t):
36
        servers = input().strip()
37
        print(min_decommissioning_cost(servers))
38
39
if __name__ == ""__main__"":
40
    main()",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053631
1390053623,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        7
        # Precompute prefix sums for 0's and 1's
8
        prefix_0 = [0] * (n + 1)
9
        prefix_1 = [0] * (n + 1)
10
        for i in range(n):
11
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
12
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
13
        14
        # Iterate through all possible splits
15
        for i in range(n + 1):
16
            for j in range(i, n + 1):
17
                # Remaining segment is from i to j-1
18
                remaining_0s = prefix_0[j] - prefix_0[i]
19
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
20
                cost = max(remaining_0s, removed_1s)
21
                if cost < min_cost:
22
                    min_cost = cost
23
        results.append(min_cost)
24
    return results
25
26
# Read input
27
T = int(input())
28
test_cases = [input().strip() for _ in range(T)]
29
30
# Compute results
31
results = min_decommission_cost(test_cases)
32
33
# Print output
34
for result in results:
35
    print(result)
36",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053623
1390053624,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053624
1390053625,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int t = sc.nextInt(); // Number of test cases
8
9
        while (t-- > 0) {
10
            int n = sc.nextInt(); // Size of array
11
            int k = sc.nextInt(); // Batch size
12
            int[] arr = new int[n];
13
14
            // Read array elements
15
            for (int i = 0; i < n; i++) {
16
                arr[i] = sc.nextInt();
17
            }
18
19
            // Process each batch
20
            for (int i = 0; i <= n - k; i++) { 
21
                int found = 0; // Flag to check if negative found
22
                for (int j = i; j < i + k; j++) { 
23
                    if (arr[j] < 0) { 
24
                        System.out.print(arr[j] + "" ""); // Print first negative
25
                        found = 1;
26
                        break; // Stop checking this batch
27
                    }
28
                }
29
                if (found == 0) System.out.print(""0 ""); // No negative found
30
            }
31
            System.out.println(); // New line for next test case
32
        }
33
    }
34
}
35",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053625
1390053622,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    prefix_active = [0] * (n + 1)
5
    prefix_idle = [0] * (n + 1)
6
    7
    for i in range(n):
8
        prefix_active[i + 1] = prefix_active[i] + (1 if server_rack[i] == '1' else 0)
9
        prefix_idle[i + 1] = prefix_idle[i] + (1 if server_rack[i] == '0' else 0)
10
    11
    total_active = prefix_active[n]
12
    total_idle = prefix_idle[n]
13
    14
    min_cost = n
15
    16
    for prefix in range(n + 1):
17
        for suffix in range(n + 1 - prefix):
18
            if prefix + suffix == n:
19
                cost = total_active
20
            else:
21
                active_removed = prefix_active[prefix] + (prefix_active[n] - prefix_active[n - suffix])
22
                idle_remaining = total_idle - (prefix_idle[prefix] + (prefix_idle[n] - prefix_idle[n - suffix]))
23
                cost = max(idle_remaining, active_removed)
24
            25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
t = int(input().strip())
30
for _ in range(t):
31
    server_rack = input().strip()
32
    print(min_decommissioning_cost(server_rack))",126,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053622
