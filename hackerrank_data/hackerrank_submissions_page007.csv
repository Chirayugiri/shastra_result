submission_id,username,problem_name,language,code,page,url
1390056138,unknown,unknown,unknown,"1
import sys
2
3
def min_effort_to_breach(t, test_cases):
4
    INF = 10**18
5
    results = []
6
    7
    for n, k, firewalls in test_cases:
8
        prev = [INF] * (k + 1)
9
        prev[0] = 0
10
        11
        for i in range(n):
12
            curr = [INF] * (k + 1)
13
            for s in range(k + 1):
14
                curr[s] = prev[s] + firewalls[i] + s
15
                if s > 0:
16
                    curr[s] = min(curr[s], prev[s - 1])
17
            prev = curr
18
        19
        results.append(min(prev))
20
    21
    return results
22
23
24
t = int(sys.stdin.readline().strip())
25
test_cases = []
26
for _ in range(t):
27
    n, k = map(int, sys.stdin.readline().split())
28
    firewalls = list(map(int, sys.stdin.readline().split()))
29
    test_cases.append((n, k, firewalls))
30
31
32
results = min_effort_to_breach(t, test_cases)
33
34
# Print output
35
for res in results:
36
    print(res)",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056138
1390056140,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int t = scanner.nextInt(); // Number of test cases
9
        10
        for (int tc = 0; tc < t; tc++) {
11
            int n = scanner.nextInt(); // Number of firewalls
12
            int k = scanner.nextInt(); // Maximum firewalls to skip
13
            14
            int[] strengths = new int[n];
15
            for (int i = 0; i < n; i++) {
16
                strengths[i] = scanner.nextInt();
17
            }
18
            19
            System.out.println(minEffortToBreach(n, k, strengths));
20
        }
21
        22
        scanner.close();
23
    }
24
    25
    public static long minEffortToBreach(int n, int k, int[] strengths) {
26
        // Create a 2D DP table
27
        // dp[i][j] = min effort to breach first i firewalls by skipping j firewalls
28
        long[][] dp = new long[n + 1][k + 1];
29
        30
        // Initialize with maximum value
31
        for (int i = 0; i <= n; i++) {
32
            for (int j = 0; j <= k; j++) {
33
                dp[i][j] = Long.MAX_VALUE;
34
            }
35
        }
36
        37
        // Base case: no firewalls, no effort
38
        dp[0][0] = 0;
39
        40
        for (int i = 1; i <= n; i++) {
41
            int firewallIdx = i - 1; // Convert to 0-indexed for strengths array
42
            43
            for (int j = 0; j <= k; j++) {
44
                // Option 1: Don't skip the current firewall
45
                if (j <= firewallIdx) { // We must have skipped at most j firewalls among previous i-1
46
                    // Calculate increased strength due to j previously skipped firewalls
47
                    long currentStrength = strengths[firewallIdx] + j;
48
                    if (dp[i-1][j] != Long.MAX_VALUE) {
49
                        dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + currentStrength);
50
                    }
51
                }
52
                53
                // Option 2: Skip the current firewall (if we haven't used all skips)
54
                if (j > 0) {
55
                    if (dp[i-1][j-1] != Long.MAX_VALUE) {
56
                        dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1]);
57
                    }
58
                }
59
            }
60
        }
61
        62
        // Find minimum effort across all possible skip counts
63
        long minEffort = Long.MAX_VALUE;
64
        for (int j = 0; j <= k; j++) {
65
            minEffort = Math.min(minEffort, dp[n][j]);
66
        }
67
        68
        return minEffort;
69
    }
70
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056140
1390056144,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
    for _ in range(t):
8
        s = input_data[line].strip()
9
        line += 1
10
        n = len(s)
11
        # get indices for active servers ('1')
12
        positions = [i for i, ch in enumerate(s) if ch == '1']
13
        m = len(positions)
14
        if m == 0:
15
            out_lines.append(""0"")
16
            continue
17
        # Precompute A: A[i] = positions[i] - i
18
        A = [positions[i] - i for i in range(m)]
19
        20
        # check(X) returns True if there exists a window in A
21
        # such that:
22
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
23
        # and A[j] - A[i] <= X.
24
        def check(X):
25
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                # slide j as far as possible while A[j]-A[i] <= X
33
                while j < m and A[j] - A[i] <= X:
34
                    j += 1
35
                # j now is one past the last index satisfying condition, so the window has length (j - i)
36
                if j - i >= m - X:
37
                    return True
38
            return False
39
40
        # Binary search for the minimum X
41
        lo, hi, ans = 0, n, n
42
        while lo <= hi:
43
            mid = (lo + hi) // 2
44
            if check(mid):
45
                ans = mid
46
                hi = mid - 1
47
            else:
48
                lo = mid + 1
49
        out_lines.append(str(ans))
50
    51
    sys.stdout.write(""\n"".join(out_lines))
52
    53
if __name__ ==  ""__main__"":
54
     solve()",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056144
1390056133,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
def min_effort_to_breach(test_cases):
3
    results = []
4
    5
    for n, k, firewalls in test_cases:
6
        min_effort = float('inf')
7
        8
        for skipped in range(k + 1):
9
            effort = 0
10
            penalty = 0
11
            12
            for i in range(skipped, n):
13
                effort += firewalls[i] + penalty
14
                penalty += 1
15
                16
            min_effort = min(min_effort, effort)
17
            18
        19
        results.append(min_effort)
20
    return results
21
22
if __name__ == ""__main__"":
23
    try:
24
        T = int(input())
25
        test_cases = []
26
    27
    28
        for _ in range(T):
29
            try:
30
                n, k = map(int, input().split())
31
                firewalls = list(map(int, input().split()))
32
                33
                if len(firewalls) != n:
34
                    raise ValueError(""Invalid number of firewall strenghts"")
35
                test_cases.append((n, k, firewalls))
36
    37
            except ValueError as e:
38
                print(f""Invalid input: {e}"")
39
                exit(1)
40
    41
        output = min_effort_to_breach(test_cases)
42
    43
        for res in output:
44
            print(res)
45
    except ValueError:
46
        print(""Invalid input:  Expected an integer for the no of test cases."")      ",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056133
1390056134,unknown,unknown,unknown,"1
2
import java.util.*;
3
import java.io.*;
4
5
public class FirewallSkips {
6
    public static void main(String[] args) {
7
        FastReader in = new FastReader(System.in);
8
        int T = in.nextInt();
9
        10
        while (T-- > 0) {
11
            int n = in.nextInt();
12
            int k = in.nextInt();
13
            14
            long[] a = new long[n];
15
            long sumA = 0; // sum of all a[i]
16
            for (int i = 0; i < n; i++) {
17
                a[i] = in.nextLong();
18
                sumA += a[i];
19
            }
20
            21
            // Build array b[i] = a[i] + (i+1)  [using 1-based index for j]
22
            // We'll sort b in descending order to pick the top x.
23
            long[] b = new long[n];
24
            for (int i = 0; i < n; i++) {
25
                b[i] = a[i] + (i + 1);
26
            }
27
            28
            Arrays.sort(b);
29
            // Sort ascending by default; we want descending, so either:
30
            // 1) reverse in place, or
31
            // 2) build prefix sums from the end.
32
            // Let's just reverse in place for clarity.
33
            reverse(b); // Now b is descending.
34
            35
            // Build prefix sums of b in descending order:
36
            // p[x] = sum of top x elements in b (b[0] + b[1] + ... + b[x-1])
37
            long[] prefix = new long[n+1];
38
            prefix[0] = 0;
39
            for (int x = 1; x <= n; x++) {
40
                prefix[x] = prefix[x-1] + b[x-1];
41
            }
42
            43
            long ans = Long.MAX_VALUE;
44
            // Try x from 0..k (number of skips)
45
            for (int x = 0; x <= k; x++) {
46
                // cost(x) = sumA + x*n - prefix[x] - x*(x-1)/2
47
                // Make sure to use long to avoid overflow
48
                long cost = sumA 
49
                            + x * (long)n 
50
                            - prefix[x]
51
                            - ((long)x * (x - 1) / 2);
52
                ans = Math.min(ans, cost);
53
            }
54
            55
            System.out.println(ans);
56
        }
57
    }
58
    59
    // Utility to reverse array in place
60
    private static void reverse(long[] arr) {
61
        int left = 0, right = arr.length - 1;
62
        while (left < right) {
63
            long tmp = arr[left];
64
            arr[left] = arr[right];
65
            arr[right] = tmp;
66
            left++;
67
            right--;
68
        }
69
    }
70
    71
    // Fast input class (optional, for large I/O)
72
    static class FastReader {
73
        BufferedReader br;
74
        StringTokenizer st;
75
        76
        public FastReader(InputStream stream) {
77
            br = new BufferedReader(new InputStreamReader(stream));
78
        }
79
        80
        String next() {
81
            while (st == null || !st.hasMoreElements()) {
82
                try {
83
                    st = new StringTokenizer(br.readLine());
84
                } catch (IOException e) {
85
                    e.printStackTrace();
86
                }
87
            }
88
            return st.nextToken();
89
        }
90
        91
        int nextInt() {
92
            return Integer.parseInt(next());
93
        }
94
        95
        long nextLong() {
96
            return Long.parseLong(next());
97
        }
98
    }
99
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056134
1390056137,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056137
1390056130,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
#include <ext/pb_ds/assoc_container.hpp>
3
#include <ext/pb_ds/tree_policy.hpp>
4
#include <ext/pb_ds/detail/standard_policies.hpp>
5
#include <cmath>
6
#define int long long int
7
#define pb push_back
8
/*---------------------------------------------------------------------------------------------------------------------------------*/
9
/*ASCII small case-> a-97 to z-122
10
upper case-> A-65 to Z-90*/
11
#define nl ""\n""
12
#define mp map<int, int>
13
#define all(v) v.begin(), v.end()
14
#define F first
15
#define S second
16
#define ump unordered_map<long long, int, custom_hash>
17
#define mstpi multiset<pair<int, int> >
18
#define mst multiset<int>
19
#define vec vector<int>
20
#define pi pair<int, int>
21
#define ld long double
22
#define vep vector<pair<int, int>>
23
#define ul unsigned long long
24
#define loop1 for (int i = 0; i < n; i++)
25
#define REP(i, a, b) for (int i = a; i <= b; i++)
26
#define NO cout << ""NO"" << endl
27
#define YES cout << ""YES"" << endl
28
using namespace std;
29
using namespace __gnu_pbds;
30
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
31
/*---------------------------------------------------------------------------------------------------------------------------------*/
32
const double PI = 3.1415926535;
33
const int inf = 1e18;
34
const int mod = 1000000007;
35
/*---------------------------------------------------------------------------------------------------------------------------------*/
36
int modmul(int a, int b, int m)
37
{
38
    a %= m;
39
    b %= m;
40
    return (a * b) % m;
41
}
42
int modexp(int n, int x)
43
{
44
    int ans = 1;
45
    while (n > 0)
46
    {
47
        if (n & 1)
48
        {
49
            ans = (ans * x) % mod;
50
        }
51
        n >>= 1;
52
        x = (x * x) % mod;
53
    }
54
    return ans;
55
}
56
/*---------------------------------------------------------------------------------------------------------------------------------*/
57
string add(string a, string b)
58
{
59
    string ans = """";
60
    int carry = 0;
61
    while (!a.empty() || !b.empty() || carry > 0)
62
    {
63
        int digitA = a.empty() ? 0 : a.back() - '0';
64
        int digitB = b.empty() ? 0 : b.back() - '0';
65
        int sum = digitA + digitB + carry;
66
        ans = to_string(sum % 10) + ans;
67
        carry = sum / 10;
68
        if (!a.empty())
69
            a.pop_back();
70
        if (!b.empty())
71
            b.pop_back();
72
    }
73
    return ans;
74
}
75
string ministrnum(string a, string b)
76
{
77
    if (a.length() > b.length())
78
        return b;
79
    else if (b.length() > a.length())
80
        return a;
81
    else
82
    {
83
        int n = a.length();
84
        for (int i = 0; i < n; i++)
85
        {
86
            if (a[i] > b[i])
87
                return b;
88
            else if (a[i] < b[i])
89
                return a;
90
        }
91
    }
92
    return a;
93
}
94
vector<int> sieve(int n) {
95
    vector<bool> isPrime(n + 1, true);
96
    vector<int> primes;
97
    if(n >= 0) isPrime[0] = false;
98
    if(n >= 1) isPrime[1] = false;
99
    for (int i = 2; i <= n; i++) {
100
        if (isPrime[i]) {
101
            primes.push_back(i);
102
            for (int j = 2 * i; j <= n; j += i)
103
                isPrime[j] = false;
104
        }
105
    }
106
    return primes;
107
}
108
109
class SegmentTree {
110
public:
111
    int n;
112
    std::vector<int> tree;
113
    std::vector<int> lazy;
114
    115
    SegmentTree(const std::vector<int>& arr) {
116
        n = arr.size();
117
        tree.resize(4 * n, 0);
118
        lazy.resize(4 * n, 0);
119
        build(arr, 0, n - 1, 0);
120
    }
121
    122
    void build(const std::vector<int>& arr, int start, int end, int index) {
123
        if (start == end) {
124
            tree[index] = arr[start];
125
            return;
126
        }
127
        int mid = (start + end) / 2;
128
        build(arr, start, mid, 2 * index + 1);
129
        build(arr, mid + 1, end, 2 * index + 2);
130
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
131
    }
132
    133
    int queryRange(int start, int end, int l, int r, int index = 0) {
134
        if (lazy[index] != 0) {
135
            tree[index] += (end - start + 1) * lazy[index];
136
            if(start != end) {
137
                lazy[2 * index + 1] += lazy[index];
138
                lazy[2 * index + 2] += lazy[index];
139
            }
140
            lazy[index] = 0;
141
        }
142
        if (start > r || end < l)
143
            return 0;
144
        if (start >= l && end <= r)
145
            return tree[index];
146
        int mid = (start + end) / 2;
147
        return queryRange(start, mid, l, r, 2 * index + 1) +
148
               queryRange(mid + 1, end, l, r, 2 * index + 2);
149
    }
150
    151
    void updateRange(int start, int end, int l, int r, int diff, int index = 0) {
152
        if(lazy[index] != 0) {
153
            tree[index] += (end - start + 1) * lazy[index];
154
            if(start != end) {
155
                lazy[2 * index + 1] += lazy[index];
156
                lazy[2 * index + 2] += lazy[index];
157
            }
158
            lazy[index] = 0;
159
        }
160
        if(start > r || end < l)
161
            return;
162
        if(start >= l && end <= r) {
163
            tree[index] += (end - start + 1) * diff;
164
            if(start != end) {
165
                lazy[2 * index + 1] += diff;
166
                lazy[2 * index + 2] += diff;
167
            }
168
            return;
169
        }
170
        int mid = (start + end) / 2;
171
        updateRange(start, mid, l, r, diff, 2 * index + 1);
172
        updateRange(mid + 1, end, l, r, diff, 2 * index + 2);
173
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
174
    }
175
};
176
class DSU {
177
public:
178
    std::vector<int> parent, rank;
179
    180
    DSU(int n) {
181
        parent.resize(n);
182
        rank.resize(n, 0);
183
        for (int i = 0; i < n; i++)
184
            parent[i] = i;
185
    }
186
    187
    int find(int x) {
188
        if (parent[x] != x)
189
            parent[x] = find(parent[x]);
190
        return parent[x];
191
    }
192
    193
    bool unionSets(int x, int y) {
194
        int rootX = find(x);
195
        int rootY = find(y);
196
        if (rootX == rootY)
197
            return false;
198
        if (rank[rootX] < rank[rootY])
199
            parent[rootX] = rootY;
200
        else if (rank[rootX] > rank[rootY])
201
            parent[rootY] = rootX;
202
        else {
203
            parent[rootY] = rootX;
204
            rank[rootX]++;
205
        }
206
        return true;
207
    }
208
};
209
210
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
211
struct Node {
212
    int val;
213
    int weight, size;
214
    Node *left, *right;
215
    bool rev = false;
216
    Node(int c): val(c), weight(rng()), size(1), left(NULL), right(NULL) {}
217
};
218
ostream &operator<<(ostream &os, Node *n) {
219
    if(!n) return os;
220
    os << n -> left;
221
    os << n -> val;
222
    os << n -> right;
223
    return os;
224
}
225
int size(Node *Treap) {return Treap ? Treap -> size: 0;}
226
void push(Node* Treap) {
227
    if(!Treap) return;
228
    if(Treap -> rev) {
229
        Treap -> rev = false;
230
        swap(Treap->left, Treap->right);
231
        if(Treap -> left) Treap->left->rev ^= true;
232
        if(Treap -> right) Treap->right->rev ^= true;
233
    }
234
}
235
void pull(Node *Treap) {
236
    if(!Treap) return;
237
    push(Treap -> left), push(Treap -> right);
238
    Treap -> size = size(Treap -> left) + size(Treap -> right) + 1;
239
    return;
240
}
241
void split(Node *Treap, Node *&left, Node *&right, int val) {
242
    if(!Treap) {
243
        left = right = NULL;
244
        return;
245
    }
246
    push(Treap);
247
    if(size(Treap -> left) < val) {
248
        split(Treap -> right, Treap -> right, right, val - size(Treap->left) - 1);
249
        left = Treap;
250
    }
251
    else {
252
        split(Treap -> left, left, Treap -> left, val);
253
        right = Treap;
254
    }
255
    pull(Treap);
256
}
257
void merge(Node *&Treap, Node *left, Node *right) {
258
    push(left), push(right);
259
    if(left == NULL) {
260
        Treap = right;
261
        return;
262
    }
263
    if(right == NULL) {
264
        Treap = left;
265
        return;
266
    }
267
    if(left -> weight < right -> weight) {
268
        merge(right -> left, left, right -> left);
269
        Treap = right;
270
    }
271
    else {
272
        merge(left->right, left->right, right);
273
        Treap = left;
274
    }
275
    pull(Treap);
276
}
277
void inOrder(Node *curr, vector<int> &res) {
278
    if(curr == NULL) return;
279
    push(curr);
280
    inOrder(curr->left, res);
281
    res.pb(curr->val);
282
    inOrder(curr->right, res);
283
    pull(curr);
284
}
285
struct Treap {
286
    Node *root = nullptr;
287
    void insert(int i, int val) {
288
        Node *l, *r;
289
        split(root, l, r, i);
290
        Node *v = new Node(val);
291
        merge(l, l, v);
292
        merge(root, l, r);
293
    }
294
    295
    void del(int i) {
296
        Node *l, *r;
297
        split(root, l, r, i);
298
        split(r, root, r, 1);
299
        merge(root, l, r);
300
    }
301
    302
    void update(int l, int r, function<void(Node *)> f) {
303
        Node *a, *b, *c;
304
        split(root, a, b, l-1);
305
        split(b, b, c, r-l+1);
306
        if(b) {f(b);}
307
        merge(root, a, b);
308
        merge(root, root, c);
309
    }
310
    311
    vector<int> allPr() {
312
        vector<int> res;
313
        inOrder(root, res);
314
        return res;
315
    }
316
    317
    void cycShft(int l, int r) {
318
        Node *a, *b, *c, *d;
319
        split(root, a, b, l-1);
320
        split(b, b, c, r-l+1);
321
        split(b, b, d, r-l);
322
        merge(root, a, d);
323
        merge(root, root, b);
324
        merge(root, root, c);
325
    }
326
};
327
vector<int> computePrefix(const string &pattern) {
328
    int n = pattern.size();
329
    vector<int> prefix(n, 0);
330
    for (int i = 1, j = 0; i < n; i++) {
331
        while (j > 0 && pattern[i] != pattern[j])
332
            j = prefix[j - 1];
333
        if (pattern[i] == pattern[j])
334
            j++;
335
        prefix[i] = j;
336
    }
337
    return prefix;
338
}
339
340
vector<int> KMPSearch(const string &text, const string &pattern) {
341
    vector<int> prefix = computePrefix(pattern);
342
    vector<int> occurrences;
343
    for (int i = 0, j = 0; i < (int)text.size(); i++) {
344
        while (j > 0 && text[i] != pattern[j])
345
            j = prefix[j - 1];
346
        if (text[i] == pattern[j])
347
            j++;
348
        if (j == (int)pattern.size()) {
349
            occurrences.push_back(i - j + 1);
350
            j = prefix[j - 1];
351
        }
352
    }
353
    return occurrences;
354
}
355
void solve()
356
{
357
    int n, k;
358
    cin>>n>>k;
359
    360
    vector<int> v(n);
361
    loop1 cin>>v[i];
362
    363
    queue<int> st;
364
    for(int i = 0; i<n; i++) {
365
        if(v[i] < 0) {
366
             st.push(i);
367
        }
368
        369
        if(i >= k-1) {
370
            if(st.empty()) cout<<0<<"" "";
371
            else cout<<v[st.front()]<<"" "";
372
            if(!st.empty() && st.front() <= i - k + 1)
373
            st.pop();
374
        }
375
    }
376
    cout<<endl;
377
}
378
int32_t main()
379
{
380
    ios_base ::sync_with_stdio(0);
381
    cin.tie(0);
382
    cout.tie(0);
383
    int t = 1;
384
    cin >> t;
385
    while (t--)
386
        solve();
387
}",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390056130
1390056131,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    dp[0][0] = 0
7
8
    for i in range(1, n + 1):
9
        for j in range(k + 1):
10
            if j > 0:
11
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])  # Skip
12
            dp[i][j] = min(dp[i][j], dp[i - 1][j] + a[i - 1] + j)  # Don't skip
13
14
    return min(dp[n])
15
16
t = int(input())
17
for _ in range(t):
18
    print(solve())",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056131
1390056132,unknown,unknown,unknown,"1
def min_server_decommissioning_cost():
2
    T = int(input())
3
    for _ in range(T):
4
        servers = input().strip()
5
        n = len(servers)
6
7
        total_zeros = servers.count('0')
8
        total_ones = servers.count('1')
9
        min_cost = float('inf')
10
11
        # Try all possible prefixes to remove from front (0 to n)
12
        for l in range(n + 1):
13
            # Try all possible suffixes to remove from end (0 to n - l)
14
            for r in range(n - l + 1):
15
                remaining = servers[l:n - r]
16
17
                remaining_zeros = remaining.count('0')
18
                removed_ones = servers[:l].count('1') + servers[n - r:].count('1')
19
20
                cost = max(remaining_zeros, removed_ones)
21
                min_cost = min(min_cost, cost)
22
23
        print(min_cost)
24",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056132
1390056121,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
#include <climits>
5
6
using namespace std;
7
8
vector<int> min_decommissioning_cost(const vector<string>& test_cases) {
9
    vector<int> results;
10
    11
    for (const string& servers : test_cases) {
12
        int n = servers.size();
13
        int total_0 = 0;
14
        for (char c : servers) {
15
            if (c == '0') total_0++;
16
        }
17
        int total_1 = n - total_0;
18
        19
        // Precompute prefix counts for 0s and 1s
20
        vector<int> prefix_0(n + 1, 0), prefix_1(n + 1, 0);
21
        for (int i = 1; i <= n; ++i) {
22
            prefix_0[i] = prefix_0[i-1] + (servers[i-1] == '0');
23
            prefix_1[i] = prefix_1[i-1] + (servers[i-1] == '1');
24
        }
25
        26
        // Precompute suffix counts for 0s and 1s
27
        vector<int> suffix_0(n + 1, 0), suffix_1(n + 1, 0);
28
        for (int j = 1; j <= n; ++j) {
29
            suffix_0[j] = suffix_0[j-1] + (servers[n - j] == '0');
30
            suffix_1[j] = suffix_1[j-1] + (servers[n - j] == '1');
31
        }
32
        33
        int min_cost = INT_MAX;
34
        35
        // Iterate over all possible prefixes (i)
36
        for (int i = 0; i <= n; ++i) {
37
            int j_max = n - i;
38
            int left = 0, right = j_max;
39
            int best_j = 0;
40
            int best_cost = INT_MAX;
41
            42
            // Binary search for the best j
43
            while (left <= right) {
44
                int mid = (left + right) / 2;
45
                int remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid]);
46
                int decommissioned_1 = prefix_1[i] + suffix_1[mid];
47
                int current_cost = max(remaining_0, decommissioned_1);
48
                49
                if (current_cost < best_cost) {
50
                    best_cost = current_cost;
51
                    best_j = mid;
52
                } else if (current_cost == best_cost && mid < best_j) {
53
                    best_j = mid;
54
                }
55
                56
                if (decommissioned_1 < remaining_0) {
57
                    left = mid + 1;
58
                } else {
59
                    right = mid - 1;
60
                }
61
            }
62
            63
            // Check neighboring j values
64
            for (int dj : {-1, 0, 1}) {
65
                int j = best_j + dj;
66
                if (j >= 0 && j <= j_max) {
67
                    int remaining_0 = total_0 - (prefix_0[i] + suffix_0[j]);
68
                    int decommissioned_1 = prefix_1[i] + suffix_1[j];
69
                    int current_cost = max(remaining_0, decommissioned_1);
70
                    if (current_cost < best_cost) {
71
                        best_cost = current_cost;
72
                    }
73
                }
74
            }
75
            76
            if (best_cost < min_cost) {
77
                min_cost = best_cost;
78
            }
79
        }
80
        81
        results.push_back(min_cost);
82
    }
83
    84
    return results;
85
}
86
87
int main() {
88
    int T;
89
    cin >> T;
90
    vector<string> test_cases(T);
91
    for (int i = 0; i < T; ++i) {
92
        cin >> test_cases[i];
93
    }
94
    95
    vector<int> results = min_decommissioning_cost(test_cases);
96
    97
    for (int result : results) {
98
        cout << result << endl;
99
    }
100
    101
    return 0;
102
} ",7,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056121
