submission_id,username,problem_name,language,code,page,url
1390052987,unknown,unknown,unknown,"1
def main():
2
    t = int(input())
3
    4
    for _ in range(t):
5
        n, k = map(int, input().split())
6
        strengths = list(map(int, input().split()))
7
        8
        if k >= n:
9
            print(0)
10
            continue
11
        12
        prev = [float('inf')] * (k + 1)
13
        prev[0] = 0
14
        15
        for i in range(n):
16
            curr = [float('inf')] * (k + 1)
17
            18
            for j in range(k + 1):
19
                if j > 0 and prev[j-1] != float('inf'):
20
                    curr[j] = min(curr[j], prev[j-1])
21
                22
                if prev[j] != float('inf'):
23
                    curr[j] = min(curr[j], prev[j] + strengths[i] + j)
24
            25
            prev = curr
26
        27
        print(min(prev))
28
29
if __name__ == ""__main__"":
30
    main()",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052987
1390052996,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052996
1390052997,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
    results = []
3
    4
    # Loop through each possible batch
5
    for i in range(len(arr) - k + 1):
6
        fault_found = False
7
        8
        # Find earliest fault in current batch
9
        for j in range(i, i + k):
10
            if arr[j] < 0:
11
                results.append(arr[j])
12
                fault_found = True
13
                break
14
                15
        # If no fault found in batch, append 0
16
        if not fault_found:
17
            results.append(0)
18
    19
    return results
20
21
# Process test cases
22
t = int(input())
23
for _ in range(t):
24
    n, k = map(int, input().split())
25
    arr = list(map(int, input().split()))
26
    27
    result = earliest_fault(arr, k)
28
    print(*result)",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052997
1390052978,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, n, k):
4
    result = []
5
    dq = deque()  # Store indices of negative numbers
6
7
    # Process the first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Process remaining windows
13
    for i in range(n - k + 1):
14
        # If deque is not empty, the front of the queue is the earliest negative
15
        if dq:
16
            result.append(arr[dq[0]])
17
        else:
18
            result.append(0)
19
20
        # Remove elements that are out of this window
21
        if dq and dq[0] == i:
22
            dq.popleft()
23
24
        # Add the next element of the window
25
        if i + k < n and arr[i + k] < 0:
26
            dq.append(i + k)
27
28
    print(*result)  # Print space-separated output
29
30
# Read input
31
t = int(input())  # Number of test cases
32
for _ in range(t):
33
    n, k = map(int, input().split())  # Size of array and batch size
34
    arr = list(map(int, input().split()))  # Array elements
35
    earliest_faulty_readings(arr, n, k)",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052978
1390052980,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc=new Scanner(System.in);
7
        int T=sc.nextInt();
8
9
        while(T-- > 0) {
10
            int n=sc.nextInt(),k=sc.nextInt();
11
            int[] a=new int[n];
12
            for(int i=0;i<n;i++) a[i]=sc.nextInt();
13
14
            List<Integer> idx=new ArrayList<>();
15
            for(int i=0;i<n;i++) idx.add(i);
16
            idx.sort((x,y)->Integer.compare(a[y],a[x]));
17
18
            Set<Integer> skip=new HashSet<>();
19
            for(int i=0;i<k;i++) skip.add(idx.get(i));
20
21
            long effort=0;
22
            int skipped=0;
23
            for(int i=0;i<n;i++) {
24
                if(skip.contains(i)) skipped++;
25
                else effort+=a[i]+skipped;
26
            }
27
            System.out.println(effort);
28
        }
29
        sc.close();
30
    }
31
}",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052980
1390052981,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process the first k elements
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the first result
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process the remaining elements
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of the current window
18
        while dq and dq[0] <= i - k:
19
            dq.popleft()
20
        21
        # Add the current element if it is faulty
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store the result for this window
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
# Read input
31
t = int(input())
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    print(*earliest_faulty_readings(arr, k))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052981
1390052971,unknown,unknown,unknown,"1
t = int(input())  
2
3
for _ in range(t):
4
    n, k = map(int, input().split()) 
5
    arr = list(map(int, input().split()))  
6
    7
    for i in range(n - k + 1):  
8
        found = 0  
9
        for j in range(i, i + k):  
10
            if arr[j] < 0:
11
                found = arr[j]  
12
                break
13
        print(found, end="" "") 
14
    print() ",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052971
1390052976,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052976
1390052968,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  
7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    result.append(arr[dq[0]] if dq else 0)
12
    13
    for i in range(k, n):
14
        if dq and dq[0] < i - k + 1:
15
            dq.popleft()
16
        17
        if arr[i] < 0:
18
            dq.append(i)
19
20
        result.append(arr[dq[0]] if dq else 0)
21
    22
    return result
23
24
t = int(input())  # Number of test cases
25
for _ in range(t):
26
    n, k = map(int, input().split())
27
    arr = list(map(int, input().split()))
28
    print(*earliest_faulty_readings(arr, k))",158,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052968
