submission_id,username,problem_name,language,code,page,url
1390054133,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054133
1390054135,unknown,unknown,unknown,"1
def find_earliest_faults(arr, k):
2
    """"""
3
    Finds the earliest faulty reading for each consecutive batch of size k.
4
5
    Args:
6
        arr: A list of sensor readings (integers).
7
        k: The batch size.
8
9
    Returns:
10
        A list of earliest faulty readings for each batch.
11
    """"""
12
    result = []
13
    for i in range(len(arr) - k + 1):
14
        batch = arr[i:i + k]
15
        earliest_fault = 0
16
        for j, reading in enumerate(batch):
17
            if reading < 0:
18
                earliest_fault = reading
19
                break
20
        result.append(earliest_fault)
21
    return result
22
23
def solve():
24
    t = int(input())
25
    for _ in range(t):
26
        n, k = map(int, input().split())
27
        arr = list(map(int, input().split()))
28
        result = find_earliest_faults(arr, k)
29
        print(*result)
30
31
solve()",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054135
1390054134,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    """"""
3
    Calculate minimum effort to breach n firewalls with optimal strategy.
4
    5
    Args:
6
        n: Number of firewalls
7
        k: Maximum number of firewalls that can be skipped
8
        firewalls: List of firewall strengths
9
        10
    Returns:
11
        Minimum effort required
12
    """"""
13
    # If we can skip all firewalls, return 0
14
    if k >= n:
15
        return 0
16
    17
    # Initialize dp array with infinity
18
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
19
    20
    # Base case: no firewalls, no effort
21
    dp[0][0] = 0
22
    23
    for i in range(1, n + 1):
24
        firewall_idx = i - 1  # Convert to 0-indexed
25
        26
        for j in range(k + 1):
27
            # Option 1: Don't skip the current firewall
28
            if j <= i - 1:  # Ensure we have processed enough firewalls
29
                dp[i][j] = min(dp[i][j], dp[i-1][j] + firewalls[firewall_idx] + j)
30
            31
            # Option 2: Skip the current firewall
32
            if j > 0:  # We must have at least one skip available
33
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
34
    35
    # Return the minimum effort after processing all firewalls
36
    return dp[n][k]
37
38
def main():
39
    t = int(input())  # Number of test cases
40
    41
    for _ in range(t):
42
        n, k = map(int, input().split())
43
        firewalls = list(map(int, input().split()))
44
        45
        min_effort = min_effort_to_breach(n, k, firewalls)
46
        print(min_effort)
47
48
if __name__ == ""__main__"":
49
    main()",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054134
1390054129,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054129
1390054130,unknown,unknown,unknown,"1
t = int(input())
2
3
for _ in range(t):
4
    n, k = map(int, input().split())
5
    arr = list(map(int, input().split()))
6
    7
    result = []
8
    9
    for i in range(n - k + 1):
10
        batch = arr[i:i + k]
11
        first_faulty = 0  
12
        13
        for num in batch:
14
            if num < 0:
15
                first_faulty = num
16
                break  
17
        18
        result.append(first_faulty)
19
    20
    print(*result)
21
22",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054130
1390054132,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, arr = case
5
        result = []
6
        for i in range(n - k + 1):
7
            batch = arr[i:i+k]
8
            earliest_fault = 0
9
            for num in batch:
10
                if num < 0:
11
                    earliest_fault = num
12
                    break
13
            result.append(earliest_fault)
14
        results.append(result)
15
    return results
16
17
# Read input
18
t = int(input())
19
test_cases = []
20
for _ in range(t):
21
    n, k = map(int, input().split())
22
    arr = list(map(int, input().split()))
23
    test_cases.append((n, k, arr))
24
25
# Compute results
26
results = earliest_faulty_readings(test_cases)
27
28
# Output results
29
for result in results:
30
    print(' '.join(map(str, result)) + ' ')",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054132
1390054124,unknown,unknown,unknown,"1
def min_effort_to_breach(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n, k = test_cases[t][0]  # Read n and k
6
        firewalls = test_cases[t][1]  # Read firewall strengths
7
        8
        # Sort indices of firewalls by their strength in descending order
9
        sorted_indices = sorted(range(n), key=lambda i: -firewalls[i])
10
11
        # Store indices of the `k` firewalls to skip
12
        skipped = set(sorted_indices[:k])
13
14
        total_effort = 0
15
        increment = 0  # This keeps track of the number of skipped firewalls before each one
16
        17
        for i in range(n):
18
            if i in skipped:
19
                increment += 1  # Each skip increases later firewalls' strength
20
            else:
21
                total_effort += firewalls[i] + increment  # Add effort with increments
22
        23
        results.append(total_effort)
24
    25
    return results
26
27
28
# Reading input
29
T = int(input().strip())  
30
test_cases = []
31
32
for _ in range(T):
33
    n, k = map(int, input().strip().split())  
34
    firewalls = list(map(int, input().strip().split()))  
35
    test_cases.append(((n, k), firewalls))
36
37
# Get results
38
output = min_effort_to_breach(T, test_cases)
39
40
# Print results
41
for res in output:
42
    print(res)
43",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054124
1390054127,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054127
1390054128,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
    8
    # Process the first batch of size k
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
13
    # Process remaining batches
14
    for i in range(n - k + 1):
15
        # Append earliest faulty reading or 0 if none
16
        result.append(arr[dq[0]] if dq else 0)
17
        18
        # Remove elements that are out of this window
19
        if dq and dq[0] == i:
20
            dq.popleft()
21
            printvtdr",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054128
1390054123,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",98,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054123
