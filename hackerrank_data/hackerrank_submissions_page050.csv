submission_id,username,problem_name,language,code,page,url
1390055094,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055094
1390055097,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055097
1390055101,unknown,unknown,unknown,"1
def earliest_fault_in_batches(arr, k):
2
    results = []
3
    n = len(arr)
4
    5
    # Process each batch of size k
6
    for i in range(n - k + 1):
7
        batch = arr[i:i+k]
8
        9
        # Find earliest fault (negative value) in current batch
10
        fault_found = False
11
        for val in batch:
12
            if val < 0:
13
                results.append(val)
14
                fault_found = True
15
                break
16
        17
        # If no fault found in batch, append 0
18
        if not fault_found:
19
            results.append(0)
20
    21
    return results
22
23
# Process multiple test cases
24
def solve_test_cases():
25
    t = int(input())  # Number of test cases
26
    results = []
27
    28
    for _ in range(t):
29
        n, k = map(int, input().split())
30
        arr = list(map(int, input().split()))
31
        32
        batch_results = earliest_fault_in_batches(arr, k)
33
        results.append(batch_results)
34
    35
    # Print results
36
    for batch_result in results:
37
        print(*batch_result)
38
39
# Execute program
40
if __name__ == ""__main__"":
41
    solve_test_cases()",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055101
1390055090,unknown,unknown,unknown,"1
function processData(input) {
2
    let lines = input.trim().split(""\n"");
3
    let t = parseInt(lines[0]); 
4
    let index = 1;
5
    let output = [];
6
7
    for (let test = 0; test < t; test++) {
8
        let [n, k] = lines[index].split("" "").map(Number);
9
        let arr = lines[index + 1].split("" "").map(Number);
10
        index += 2; // Move to next test case
11
        12
        let res = [];
13
    14
        for(let i = 0; i <= n - k; i++){
15
            let batch = arr.slice(i,i+k)
16
            let faulty = false;
17
18
            for(let val of batch){
19
                if(val < 0){
20
                    res.push(val)
21
                    faulty = true
22
                    break;
23
                }
24
            }
25
26
            if(!faulty) res.push(0)
27
28
        }
29
30
        output.push(res.join("" ""))        
31
    }
32
    33
    console.log(output.join(""\n""));
34
} 
35
36
process.stdin.resume();
37
process.stdin.setEncoding(""ascii"");
38
_input = """";
39
process.stdin.on(""data"", function (input) {
40
    _input += input;
41
});
42
43
process.stdin.on(""end"", function () {
44
   processData(_input);
45
});",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055090
1390055092,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, n, k):
4
    result = []
5
    dq = deque()  # Store indices of negative numbers
6
7
    # Process the first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Process remaining windows
13
    for i in range(n - k + 1):
14
        # If deque is not empty, the front of the queue is the earliest negative
15
        if dq:
16
            result.append(arr[dq[0]])
17
        else:
18
            result.append(0)
19
20
        # Remove elements that are out of this window
21
        if dq and dq[0] == i:
22
            dq.popleft()
23
24
        # Add the next element of the window
25
        if i + k < n and arr[i + k] < 0:
26
            dq.append(i + k)
27
28
    print(*result)  # Print space-separated output
29
30
# Read input
31
t = int(input())  # Number of test cases
32
for _ in range(t):
33
    n, k = map(int, input().split())  # Size of array and batch size
34
    arr = list(map(int, input().split()))  # Array elements
35
    earliest_faulty_readings(arr, n, k)",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055092
1390055093,unknown,unknown,unknown,"1
def min_cost(rack):
2
    n = len(rack)
3
    return min(max(rack[start:n-end].count('0'), rack[:start].count('1') + rack[n-end:].count('1')) 
4
              for start in range(n + 1) for end in range(n - start + 1))
5
6
T = int(input())
7
for _ in range(T):
8
    print(min_cost(input().strip()))",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055093
1390055085,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); 
8
        9
        while(T-- > 0) {
10
            int n = sc.nextInt();
11
            int k = sc.nextInt();
12
            int[] a = new int[n];
13
            for (int i = 0; i < n; i++){
14
                a[i] = sc.nextInt();
15
            }
16
            17
           18
            if(k >= n) {
19
                System.out.println(0);
20
                continue;
21
            }
22
            23
         24
            long INF = Long.MAX_VALUE / 2;
25
            long[] dp = new long[k+1];
26
            Arrays.fill(dp, INF);
27
            dp[0] = 0;
28
            29
            30
            for (int i = 0; i < n; i++) {
31
                int lim = Math.min(i+1, k);
32
                long[] newdp = new long[k+1];
33
                Arrays.fill(newdp, INF);
34
                35
               36
                for (int j = lim; j >= 0; j--) {
37
                   38
                    newdp[j] = Math.min(newdp[j], dp[j] + a[i] + j);
39
                    40
                   41
                    if(j < k) {
42
                        newdp[j+1] = Math.min(newdp[j+1], dp[j]);
43
                    }
44
                }
45
                dp = newdp;
46
            }
47
            48
           49
            long ans = INF;
50
            for (int j = 0; j <= k; j++) {
51
                ans = Math.min(ans, dp[j]);
52
            }
53
            System.out.println(ans);
54
        }
55
        sc.close();
56
    }
57
}",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055085
1390055087,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
3
using namespace std;
4
5
using ll = long long;
6
7
int main() {
8
9
    // Optimize input/output
10
11
    ios::sync_with_stdio(false);
12
13
    cin.tie(0);
14
15
    int T;
16
17
    cin >> T;
18
19
    for (int t = 0; t < T; t++) {
20
21
        int n, k;
22
23
        cin >> n >> k;
24
25
        vector<ll> a(n);
26
27
        for (int i = 0; i < n; i++) {
28
29
            cin >> a[i];
30
31
        }
32
33
        // INF for impossible states , really tough one to solved actually 
34
35
        const ll INF = 1e18;
36
37
        vector<ll> prev(k + 1, INF);
38
39
        prev[0] = 0; 
40
41
    42
43
        for (int i = 0; i < n; i++) {
44
45
            vector<ll> curr(k + 1, INF);
46
47
            for (int s = 0; s <= k; s++) {
48
49
                // Don't skip i
50
51
                curr[s] = prev[s] + a[i] + s;
52
53
                // Skip i (if possible)
54
55
                if (s > 0) {
56
57
                    curr[s] = min(curr[s], prev[s - 1]);
58
59
                }
60
61
            }
62
63
            prev = curr; 
64
65
        }
66
67
        ll ans = *min_element(prev.begin(), prev.end());
68
69
        cout << ans << '\n';
70
71
    }
72
73
    return 0;
74
75
}",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055087
1390055089,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055089
1390055083,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    min_total_effort = float('inf')
3
    4
    dp = [[float('inf') for _ in range(k+1)] for _ in range(n+1)]
5
    dp[0][0] = 0 
6
    7
    for i in range(1, n+1):
8
        current_strength = strengths[i-1]
9
        10
        for j in range(k+1):
11
            if dp[i-1][j] != float('inf'):
12
                dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength + j)
13
        14
        for j in range(1, k+1):
15
            if dp[i-1][j-1] != float('inf'):
16
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
17
    18
    return min(dp[n])
19
20
def solve_test_cases():
21
    t = int(input())  
22
    23
    results = []
24
    for _ in range(t):
25
        n, k = map(int, input().split())
26
        strengths = list(map(int, input().split()))
27
        28
        min_effort = min_effort_to_breach(n, k, strengths)
29
        results.append(min_effort)
30
    31
    return results
32
33
if __name__ == ""__main__"":
34
    results = solve_test_cases()
35
    for result in results:
36
        print(result)",50,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055083
