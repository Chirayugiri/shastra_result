submission_id,username,problem_name,language,code,page,url
1390054634,unknown,unknown,unknown,"1
import sys
2
import threading
3
4
def main():
5
    T = int(sys.stdin.readline())
6
    7
    for _ in range(T):
8
        n, k = map(int, sys.stdin.readline().split())
9
        a = list(map(int, sys.stdin.readline().split()))
10
11
        benefits = []
12
        for i in range(n):
13
            benefit = a[i] - (n - i - 1)
14
            benefits.append((benefit, i))
15
        16
        benefits.sort(reverse=True)
17
18
        skipped = [False] * n
19
20
        for i in range(k):
21
            _, idx = benefits[i]
22
            skipped[idx] = True
23
24
        25
        total_effort = 0
26
        penalty = 0  
27
        for i in range(n):
28
            if skipped[i]:
29
                penalty += 1
30
            else:
31
                total_effort += a[i] + penalty
32
33
        print(total_effort)
34
35
threading.Thread(target=main).start()",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054634
1390054638,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054638
1390054637,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Main {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
8
        9
        int t = Integer.parseInt(br.readLine());
10
        11
        while (t-- > 0) {
12
            String[] nk = br.readLine().split("" "");
13
            int n = Integer.parseInt(nk[0]);
14
            int k = Integer.parseInt(nk[1]);
15
            16
            String[] input = br.readLine().split("" "");
17
            int[] a = new int[n];
18
            for (int i = 0; i < n; i++) a[i] = Integer.parseInt(input[i]);
19
            20
            bw.write(minEffort(n, k, a) + ""\n"");
21
        }
22
        23
        bw.flush();
24
        bw.close();
25
        br.close();
26
    }
27
28
    static int minEffort(int n, int k, int[] a) {
29
        int[] dp = new int[k + 2];
30
        31
        for (int i = n - 1; i >= 0; i--) {
32
            int[] next = new int[k + 2];
33
            for (int skip = k; skip >= 0; skip--) {
34
                int take = a[i] + skip + dp[skip];
35
                int leave = (skip < k) ? dp[skip + 1] : Integer.MAX_VALUE;
36
                next[skip] = Math.min(take, leave);
37
            }
38
            dp = next;
39
        }
40
        41
        return dp[0];
42
    }
43
}
44",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054637
1390054627,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner sc = new Scanner(System.in);
11
        int t = sc.nextInt();
12
        while (t-- > 0) {
13
            int n = sc.nextInt();
14
            int k = sc.nextInt();
15
            int[] arr = new int[n];
16
            for (int i = 0; i < n; i++) {
17
                arr[i] = sc.nextInt();
18
            }
19
            ArrayList<Integer> res = new ArrayList<>();
20
            Deque<Integer> dq = new ArrayDeque<>();
21
            for (int i = 0; i < k; i++) {
22
                if (arr[i] < 0)
23
                    dq.addLast(i);
24
            }
25
            res.add(!dq.isEmpty() ? arr[dq.peekFirst()] : 0);
26
            for (int i = k; i < n; i++) {
27
                while (!dq.isEmpty() && dq.peekFirst() < i - k + 1)
28
                    dq.removeFirst();
29
                if (arr[i] < 0)
30
                    dq.addLast(i);
31
                res.add(!dq.isEmpty() ? arr[dq.peekFirst()] : 0);
32
            }
33
            for (int num : res) {
34
                System.out.print(num + "" "");
35
            }
36
            System.out.println();
37
        }
38
    }
39
}
40",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054627
1390054629,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054629
1390054631,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if _name_ == ""_main_"":
73
    main()",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054631
1390054621,unknown,unknown,unknown,"1
def min_decommission_cost(rack):
2
    n = len(rack)
3
    4
    # Precompute prefix and suffix counts
5
    active_prefix = [0] * (n + 1)
6
    idle_prefix = [0] * (n + 1)
7
    8
    for i in range(n):
9
        active_prefix[i + 1] = active_prefix[i] + (1 if rack[i] == '1' else 0)
10
        idle_prefix[i + 1] = idle_prefix[i] + (1 if rack[i] == '0' else 0)
11
    12
    min_cost = n  # Initialize to worst case
13
    14
    # Process results in chunks to avoid memory issues
15
    for left in range(n + 1):
16
        active_removed_left = active_prefix[left]
17
        18
        for right in range(n + 1 - left):
19
            # Calculate costs
20
            active_removed = active_removed_left + (active_prefix[n] - active_prefix[n - right])
21
            idle_remaining = idle_prefix[n - right] - idle_prefix[left]
22
            23
            cost = max(active_removed, idle_remaining)
24
            min_cost = min(min_cost, cost)
25
    26
    return min_cost
27
28
def main():
29
    t = int(input())
30
    31
    for _ in range(t):
32
        rack = input()
33
        print(min_decommission_cost(rack))
34
35
if __name__ == ""__main__"":
36
    main()",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054621
1390054622,unknown,unknown,unknown,"1
import sys, bisect
2
data = sys.stdin.read().split()
3
if not data:
4
    exit()
5
t = int(data[0])
6
ptr = 1
7
res = []
8
for _ in range(t):
9
    s = data[ptr]
10
    ptr += 1
11
    n = len(s)
12
    ones = [0]*(n+1)
13
    zeros = [0]*(n+1)
14
    for i in range(n):
15
        ones[i+1] = ones[i] + (1 if s[i]=='1' else 0)
16
        zeros[i+1] = zeros[i] + (1 if s[i]=='0' else 0)
17
    tot = ones[n]
18
    lo, hi = 0, max(tot, n - tot)
19
    def feasible(X):
20
        if tot <= X:
21
            return True
22
        for i in range(n+1):
23
            target = ones[i] + tot - X
24
            j = bisect.bisect_left(ones, target, i+1, n+1)
25
            if j <= n:
26
                if zeros[j] - zeros[i] <= X:
27
                    return True
28
        return False
29
    while lo < hi:
30
        mid = (lo + hi) // 2
31
        if feasible(mid):
32
            hi = mid
33
        else:
34
            lo = mid + 1
35
    res.append(str(lo))
36
sys.stdout.write(""\n"".join(res))
37",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054622
1390054624,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if _name_ == ""_main_"":
73
    main()",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054624
1390054618,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if _name_ == ""_main_"":
73
    main()",73,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054618
