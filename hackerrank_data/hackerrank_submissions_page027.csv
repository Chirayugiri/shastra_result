submission_id,username,problem_name,language,code,page,url
1390055635,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}
69",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055635
1390055639,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055639
1390055637,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <climits>
4
#include <algorithm>
5
6
using namespace std;
7
8
using ll = long long;
9
10
ll min_effort(int n, int k, const vector<int>& firewalls) {
11
    if (n == 0) return 0;
12
    13
    vector<vector<ll>> dp(n + 1, vector<ll>(k + 1, LLONG_MAX));
14
    dp[0][0] = 0;
15
    16
    for (int i = 1; i <= n; ++i) {
17
        for (int j = 0; j <= k; ++j) {
18
            // Case 1: Do not skip the i-th firewall
19
            if (dp[i-1][j] != LLONG_MAX) {
20
                dp[i][j] = dp[i-1][j] + firewalls[i-1] + j;
21
            }
22
            // Case 2: Skip the i-th firewall if possible
23
            if (j > 0 && dp[i-1][j-1] != LLONG_MAX) {
24
                dp[i][j] = min(dp[i][j], dp[i-1][j-1]);
25
            }
26
        }
27
    }
28
    29
    return *min_element(dp[n].begin(), dp[n].end());
30
}
31
32
int main() {
33
    ios_base::sync_with_stdio(false);
34
    cin.tie(nullptr);
35
    36
    int T;
37
    cin >> T;
38
    39
    while (T--) {
40
        int n, k;
41
        cin >> n >> k;
42
        43
        vector<int> firewalls(n);
44
        for (int i = 0; i < n; ++i) {
45
            cin >> firewalls[i];
46
        }
47
        48
        cout << min_effort(n, k, firewalls) << '\n';
49
    }
50
    51
    return 0;
52
}",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055637
1390055630,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class BreachFirewall {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        StringTokenizer st = new StringTokenizer(br.readLine());
8
        9
        int T = Integer.parseInt(st.nextToken()); // Number of test cases
10
        StringBuilder result = new StringBuilder();
11
        12
        while (T-- > 0) {
13
            st = new StringTokenizer(br.readLine());
14
            int n = Integer.parseInt(st.nextToken());
15
            int k = Integer.parseInt(st.nextToken());
16
17
            int[] firewalls = new int[n];
18
            st = new StringTokenizer(br.readLine());
19
            int totalEffort = 0;
20
21
            for (int i = 0; i < n; i++) {
22
                firewalls[i] = Integer.parseInt(st.nextToken());
23
                totalEffort += firewalls[i]; // Calculate total sum
24
            }
25
26
            List<Integer> modifiedValues = new ArrayList<>();
27
            for (int i = 0; i < n; i++) {
28
                modifiedValues.add(firewalls[i] - (n - i - 1)); // Transform the array
29
            }
30
31
            // Sort in descending order
32
            modifiedValues.sort(Collections.reverseOrder());
33
34
            // Compute prefix sum for best `t` firewalls to skip
35
            int[] prefixSum = new int[n + 1];
36
            for (int i = 0; i < n; i++) {
37
                prefixSum[i + 1] = prefixSum[i] + modifiedValues.get(i);
38
            }
39
40
            int maxSum = 0;
41
            int maxT = Math.min(k, n);
42
            for (int t = 0; t <= maxT; t++) {
43
                int current = prefixSum[t] + (t * (t - 1)) / 2;
44
                maxSum = Math.max(maxSum, current);
45
            }
46
47
            result.append(totalEffort - maxSum).append(""\n"");
48
        }
49
50
        System.out.print(result);
51
    }
52
}
53",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055630
1390055632,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); 
8
        9
        while(T-- > 0) {
10
            int n = sc.nextInt();
11
            int k = sc.nextInt();
12
            int[] a = new int[n];
13
            for (int i = 0; i < n; i++){
14
                a[i] = sc.nextInt();
15
            }
16
            17
           18
            if(k >= n) {
19
                System.out.println(0);
20
                continue;
21
            }
22
            23
         24
            long INF = Long.MAX_VALUE / 2;
25
            long[] dp = new long[k+1];
26
            Arrays.fill(dp, INF);
27
            dp[0] = 0;
28
            29
            30
            for (int i = 0; i < n; i++) {
31
                int lim = Math.min(i+1, k);
32
                long[] newdp = new long[k+1];
33
                Arrays.fill(newdp, INF);
34
                35
               36
                for (int j = lim; j >= 0; j--) {
37
                   38
                    newdp[j] = Math.min(newdp[j], dp[j] + a[i] + j);
39
                    40
                   41
                    if(j < k) {
42
                        newdp[j+1] = Math.min(newdp[j+1], dp[j]);
43
                    }
44
                }
45
                dp = newdp;
46
            }
47
            48
           49
            long ans = INF;
50
            for (int j = 0; j <= k; j++) {
51
                ans = Math.min(ans, dp[j]);
52
            }
53
            System.out.println(ans);
54
        }
55
        sc.close();
56
    }
57
}
58",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055632
1390055633,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055633
1390055623,unknown,unknown,unknown,"1
import sys
2
3
def min_opp():
4
    test_cases = int(sys.stdin.readline().strip())
5
    6
    for _ in range(test_cases):
7
        bin_stri =sys.stdin.readline().strip()
8
        9
        ones_positions =[i for i, ch in enumerate(bin_stri) if ch == '1']
10
        total1 = len(ones_positions)
11
        12
        if total1 == 0 or ones_positions[-1]-ones_positions[0] == total1-1:
13
            print(0)
14
            continue
15
        16
        baye, daye = -1, total1
17
        18
        while daye - baye > 1:
19
            mid = (baye + daye) // 2
20
            ones_needed = total1 - mid
21
            22
            for i in range(total1 - ones_needed + 1):
23
                start, end = ones_positions[i], ones_positions[i + ones_needed - 1]
24
                if (end - start + 1) - ones_needed <= mid:
25
                    daye = mid
26
                    break
27
            else:
28
                baye = mid
29
        30
        print(daye)
31
32
if __name__ == ""__main__"":
33
    min_opp()
34",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055623
1390055626,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        impact = [(strengths[i] + i, i) for i in range(n)]
21
        impact.sort(reverse=True)
22
        to_skip = set(idx for _, idx in impact[:k])
23
        effort = 0
24
        skipped = 0
25
        26
        for i in range(n):
27
            if i in to_skip:
28
                skipped += 1
29
            else:
30
                effort += strengths[i] + skipped
31
        32
        results.append(str(effort))
33
    34
    sys.stdout.write(""\n"".join(results) + ""\n"")
35
36
if __name__ == ""__main__"":
37
    main()
38",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055626
1390055627,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
#include <string.h>
4
5
#define MAX(a, b) ((a) > (b) ? (a) : (b))
6
#define MIN(a, b) ((a) < (b) ? (a) : (b))
7
8
int minDecommissionCost(const char* servers) {
9
    int n = strlen(servers);
10
    int minCost = __INT_MAX__;
11
    12
    // Precompute prefix sums for active and idle servers
13
    int* activePrefix = (int*)malloc((n + 1) * sizeof(int));
14
    int* idlePrefix = (int*)malloc((n + 1) * sizeof(int));
15
    16
    activePrefix[0] = 0;
17
    idlePrefix[0] = 0;
18
    19
    for (int i = 0; i < n; i++) {
20
        activePrefix[i + 1] = activePrefix[i] + (servers[i] == '1' ? 1 : 0);
21
        idlePrefix[i + 1] = idlePrefix[i] + (servers[i] == '0' ? 1 : 0);
22
    }
23
    24
    int totalActive = activePrefix[n];
25
    int totalIdle = idlePrefix[n];
26
    27
    // Try all combinations of prefix and suffix removals
28
    for (int left = 0; left <= n; left++) {  // Left cut position (inclusive)
29
        for (int right = left; right <= n; right++) {  // Right cut position (exclusive)
30
            // Skip empty remaining segment
31
            if (left == right) {
32
                continue;
33
            }
34
            35
            // Calculate metrics
36
            int activeRemoved = activePrefix[left] + (totalActive - activePrefix[right]);
37
            int idleRemaining = idlePrefix[right] - idlePrefix[left];
38
            39
            int cost = MAX(activeRemoved, idleRemaining);
40
            minCost = MIN(minCost, cost);
41
        }
42
    }
43
    44
    free(activePrefix);
45
    free(idlePrefix);
46
    47
    return minCost;
48
}
49
50
int main() {
51
    int t;
52
    scanf(""%d"", &t);  // Number of test cases
53
    54
    for (int i = 0; i < t; i++) {
55
        char servers[100001];  // Assuming max length constraint
56
        scanf(""%s"", servers);
57
        printf(""%d\n"", minDecommissionCost(servers));
58
    }
59
    60
    return 0;
61
}",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055627
1390055617,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
    left = 0
3
    zeros = 0
4
    max_ones = 0
5
    n = len(s)
6
    7
    for right in range(n):
8
        if s[right] == '0':
9
            zeros += 1
10
        while zeros > k:
11
            if s[left] == '0':
12
                zeros -= 1
13
            left += 1
14
        current_ones = (right - left + 1) - zeros
15
        max_ones = max(max_ones, current_ones)
16
    17
    return max_ones
18
19
def min_flips_to_make_ones_consecutive(s):
20
    n = len(s)
21
    total_ones = s.count('1')
22
    23
    if total_ones == 0 or '1' * total_ones in s:
24
        return 0
25
    26
    total_zeros = n - total_ones
27
    max_consecutive_ones = max(map(len, s.split('0')))
28
    29
    low, high = 0, max(total_ones, total_zeros)
30
    answer = high
31
32
    while low <= high:
33
        mid = (low + high) // 2
34
        required_ones = max(0, total_ones - mid)
35
36
        if required_ones == 0:
37
            answer = mid
38
            high = mid - 1
39
            continue
40
        41
        max_ones = max_ones_with_at_most_k_zeros(s, mid)
42
        if max_ones >= required_ones:
43
            answer = mid
44
            high = mid - 1
45
        else:
46
            low = mid + 1
47
    48
    return answer
49
50
# Input handling
51
T = int(input().strip())
52
for _ in range(T):
53
    s = input().strip()
54
    print(min_flips_to_make_ones_consecutive(s))",27,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055617
