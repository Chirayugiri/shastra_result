submission_id,username,problem_name,language,code,page,url
1390052749,unknown,unknown,unknown,"1
from collections import deque
2
3
t = int(input()) 
4
5
6
for _ in range(t):
7
    n, k = map(int, input().split())  
8
    arr = list(map(int, input().split()))  
9
    dq = deque()  
10
    11
    12
    13
    results = [] 
14
    15
    #check1
16
    for i in range(n):
17
        18
        if arr[i] < 0:
19
            dq.append(i)
20
            21
        if i >= k - 1:
22
            23
            while dq and dq[0] < i - k + 1:
24
                25
                26
                dq.popleft()
27
                28
                #do
29
                30
                31
            results.append(arr[dq[0]] if dq else 0)
32
            33
            34
            35
            36
    print(' '.join(map(str, results)))",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052749
1390052755,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(t, test_cases):
4
5
    results = []
6
7
    8
9
    for case in test_cases:
10
11
        n, k, readings = case
12
13
        result = []
14
15
        dq = deque()  # Stores indices of negative numbers
16
17
        # Initialize the deque with indices of negative numbers in the first window
18
19
        for i in range(k):
20
21
            if readings[i] < 0:
22
23
                dq.append(i)
24
25
        # Process sliding windows
26
27
        for i in range(n - k + 1):
28
29
            # The first negative number in the window is at dq[0], if it exists
30
31
            if dq:
32
33
                result.append(readings[dq[0]])
34
35
            else:
36
37
                result.append(0)
38
39
            # Remove elements that are out of the current window
40
41
            if dq and dq[0] == i:
42
43
                dq.popleft()
44
45
            # Add the next element (i + k) if it's negative
46
47
            if i + k < n and readings[i + k] < 0:
48
49
                dq.append(i + k)
50
51
        # Store results as a space-separated string for each test case
52
53
        results.append("" "".join(map(str, result)))
54
55
    56
57
    return ""\n"".join(results)
58
59
# Example Usage
60
61
t = 2
62
63
test_cases = [
64
65
    (5, 2, [-8, 2, 3, -6, 10]),
66
67
    (8, 3, [12, -1, -7, 8, -15, 30, 16, 28])
68
69
]
70
71
print(earliest_faulty_readings(t, test_cases))",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052755
1390052751,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
    8
  9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    for i in range(k, n):
17
        if dq and dq[0] < i - k + 1:
18
            dq.popleft()
19
        20
        if arr[i] < 0:
21
            dq.append(i)
22
        23
        result.append(arr[dq[0]] if dq else 0)
24
    25
    return result
26
27
28
t = int(input())  # Number of test cases
29
for _ in range(t):
30
    n, k = map(int, input().split())  # Size of array and batch size
31
    arr = list(map(int, input().split()))  # Array elements
32
    33
    print(*earliest_faulty_readings(arr, k))",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052751
1390052741,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultyComponentDetector {
4
5
    public static List<Integer> findEarliestFaults(int[] arr, int k) {
6
        List<Integer> result = new ArrayList<>();
7
        Deque<Integer> deque = new LinkedList<>();
8
9
        for (int i = 0; i < arr.length; i++) {
10
            // Remove elements that are out of the current window
11
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
12
                deque.poll();
13
            }
14
15
            // Add current element index if it's a negative number
16
            if (arr[i] < 0) {
17
                deque.offer(i);
18
            }
19
20
            // Once we reach the window size, record the result
21
            if (i >= k - 1) {
22
                if (!deque.isEmpty()) {
23
                    result.add(arr[deque.peek()]); // Earliest fault in the current window
24
                } else {
25
                    result.add(0); // No fault in the current window
26
                }
27
            }
28
        }
29
30
        return result;
31
    }
32
33
    public static void main(String[] args) {
34
        Scanner scanner = new Scanner(System.in);
35
        int t = scanner.nextInt(); // Number of test cases
36
37
        while (t-- > 0) {
38
            int n = scanner.nextInt(); // Size of array
39
            int k = scanner.nextInt(); // Batch size
40
            int[] arr = new int[n];
41
42
            for (int i = 0; i < n; i++) {
43
                arr[i] = scanner.nextInt();
44
            }
45
46
            List<Integer> result = findEarliestFaults(arr, k);
47
            for (int val : result) {
48
                System.out.print(val + "" "");
49
            }
50
            System.out.println();
51
        }
52
53
        scanner.close();
54
    }
55
}
56",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052741
1390052746,unknown,unknown,unknown,"1
def minimize_effort(n, k, firewalls):
2
    # Each skip at index i adds (n - i - 1) penalty to total
3
    # So total extra penalty = total number of skipped firewalls * (average of positions after the skip)
4
    5
    total_effort = sum(firewalls)
6
7
    # Calculate cost of skipping each firewall (how much total cost increases due to penalty if we skip this one)
8
    penalties = []
9
    for i in range(n):
10
        # If we skip this firewall, we save a[i], but add (n - i - 1) penalty to the rest
11
        cost_diff = firewalls[i] + (n - i - 1)
12
        penalties.append((cost_diff, i))
13
14
    # Pick k firewalls with the **highest cost_diff**, i.e., best to skip (highest saving)
15
    penalties.sort(reverse=True)
16
17
    skipped = [0] * n
18
    for i in range(k):
19
        _, idx = penalties[i]
20
        skipped[idx] = 1
21
22
    # Now calculate final effort
23
    effort = 0
24
    penalty = 0
25
26
    for i in range(n):
27
        if skipped[i]:
28
            penalty += 1
29
        else:
30
            effort += firewalls[i] + penalty
31
32
    return effort
33
34
# Main driver
35
T = int(input())
36
for _ in range(T):
37
    n, k = map(int, input().split())
38
    firewalls = list(map(int, input().split()))
39
    print(minimize_effort(n, k, firewalls))
40",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052746
1390052748,unknown,unknown,unknown,"1
def min_effort(arr, k):
2
    n = len(arr)
3
    4
    if k >= n:
5
        return 0
6
    7
    # Calculate total effort without skipping
8
    total_effort = sum(arr)
9
    10
    # Calculate impact of skipping each firewall
11
    impacts = []
12
    for i in range(n):
13
        # If we skip this firewall:
14
        # - We save its strength
15
        # - We add +1 penalty to each non-skipped firewall that comes after it
16
        firewall_strength = arr[i]
17
        penalty = n - i - 1 - k + 1  # Remaining firewalls minus skipped ones after this one
18
        19
        # We need to adjust the penalty:
20
        # We can skip at most k firewalls, and we're skipping this one
21
        # So we can skip at most (k-1) more firewalls after this one
22
        penalty = max(0, penalty)  # If we can skip all remaining firewalls, no penalty
23
        24
        net_impact = firewall_strength - penalty
25
        impacts.append((net_impact, i))
26
    27
    # Sort impacts in descending order
28
    impacts.sort(reverse=True)
29
    30
    # Skip k firewalls with highest impact
31
    skipped = 0
32
    skip_indices = []
33
    34
    for impact, idx in impacts:
35
        if skipped < k:
36
            skip_indices.append(idx)
37
            skipped += 1
38
    39
    # Calculate final effort
40
    final_effort = 0
41
    skipped_so_far = 0
42
    43
    for i in range(n):
44
        if i in skip_indices:
45
            skipped_so_far += 1
46
        else:
47
            final_effort += arr[i] + skipped_so_far
48
    49
    return final_effort
50
51
def solve():
52
    t = int(input())
53
    54
    for _ in range(t):
55
        n, k = map(int, input().split())
56
        arr = list(map(int, input().split()))
57
        result = min_effort(arr, k)
58
        print(result)
59
60
if __name__ == ""__main__"":
61
    solve()",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052748
1390052727,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include <limits.h>  // For INT_MAX
7
8
using namespace std;
9
10
int minEffort(vector<int>& firewalls, int k) {
11
    int totalEffort = 0, n = firewalls.size();
12
13
    // Compute total effort without skipping any firewall
14
    for (int effort : firewalls) {
15
        totalEffort += effort;
16
    }
17
18
    // If we can skip all firewalls, the minimum effort is 0
19
    if (k == n) return 0;
20
21
    int minEffort = totalEffort;  // Initialize with no skipping
22
23
    // Check the effort when skipping each firewall
24
    for (int i = 0; i < n; i++) {
25
        int currentEffort = totalEffort - firewalls[i] + k;
26
        minEffort = min(minEffort, currentEffort);
27
    }
28
29
    return minEffort;
30
}
31
32
int main() {
33
    int T;
34
    cin >> T;
35
36
    while (T--) {
37
        int n, k;
38
        cin >> n >> k;
39
40
        vector<int> firewalls(n);
41
        for (int i = 0; i < n; i++) {
42
            cin >> firewalls[i];
43
        }
44
45
        cout << minEffort(firewalls, k) << endl;
46
    }
47
48
    return 0;
49
}",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052727
1390052729,unknown,unknown,unknown,"1
def faulty_sensor_readings(arr, k):
2
    """"""
3
    Determines the earliest faulty reading for each consecutive batch of size k.
4
5
    Args:
6
        arr: A list of sensor readings.
7
        k: The batch size.
8
9
    Returns:
10
        A list containing the earliest faulty reading for each batch.
11
    """"""
12
    result = []
13
    for i in range(len(arr) - k + 1):
14
        batch = arr[i:i + k]
15
        fault = 0
16
        for num in batch:
17
            if num < 0:
18
                fault = num
19
                break
20
        result.append(fault)
21
    return result
22
23
if __name__ == ""__main__"":
24
    t = int(input())
25
    for _ in range(t):
26
        n, k = map(int, input().split())
27
        arr = list(map(int, input().split()))
28
        result = faulty_sensor_readings(arr, k)
29
        print(*result)",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052729
1390052740,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_faulty_readings(t, test_cases):
4
    results = []
5
    6
    for i in range(t):
7
        n, k = test_cases[i][0], test_cases[i][1]
8
        arr = test_cases[i][2]
9
        10
       11
        result = []
12
        13
        14
        dq = deque()
15
        16
        17
        for j in range(k):
18
            if arr[j] < 0:
19
                dq.append(j)
20
        21
       22
        if dq:
23
            result.append(arr[dq[0]])
24
        else:
25
            result.append(0)
26
        27
 28
        for j in range(k, n):
29
           30
            if dq and dq[0] <= j - k:
31
                dq.popleft()
32
            33
          34
            if arr[j] < 0:
35
                dq.append(j)
36
            37
           38
            if dq:
39
                result.append(arr[dq[0]])
40
            else:
41
                result.append(0)
42
        43
        results.append(result)
44
    45
    return results
46
47
48
49
t = int(input())  
50
test_cases = []
51
52
for _ in range(t):
53
    n, k = map(int, input().split())  
54
    arr = list(map(int, input().split()))  
55
    test_cases.append((n, k, arr))
56
57
58
results = find_faulty_readings(t, test_cases)
59
60
61
for result in results:
62
    print("" "".join(map(str, result)))
63",168,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052740
