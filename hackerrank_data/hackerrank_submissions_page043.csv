submission_id,username,problem_name,language,code,page,url
1390055253,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
#include <ext/pb_ds/assoc_container.hpp>
3
#include <ext/pb_ds/tree_policy.hpp>
4
#include <ext/pb_ds/detail/standard_policies.hpp>
5
#include <cmath>
6
#define int long long int
7
#define pb push_back
8
/*---------------------------------------------------------------------------------------------------------------------------------*/
9
/*ASCII small case-> a-97 to z-122
10
upper case-> A-65 to Z-90*/
11
#define nl ""\n""
12
#define mp map<int, int>
13
#define all(v) v.begin(), v.end()
14
#define F first
15
#define S second
16
#define ump unordered_map<long long, int, custom_hash>
17
#define mstpi multiset<pair<int, int> >
18
#define mst multiset<int>
19
#define vec vector<int>
20
#define pi pair<int, int>
21
#define ld long double
22
#define vep vector<pair<int, int>>
23
#define ul unsigned long long
24
#define loop1 for (int i = 0; i < n; i++)
25
#define REP(i, a, b) for (int i = a; i <= b; i++)
26
#define NO cout << ""NO"" << endl
27
#define YES cout << ""YES"" << endl
28
using namespace std;
29
using namespace __gnu_pbds;
30
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set; //find_by_order, order_of_key, greater_equal<int> -> making it desc order
31
/*---------------------------------------------------------------------------------------------------------------------------------*/
32
const double PI = 3.1415926535;
33
const int inf = 1e18;
34
const int mod = 1000000007;
35
/*---------------------------------------------------------------------------------------------------------------------------------*/
36
int modmul(int a, int b, int m)
37
{
38
    a %= m;
39
    b %= m;
40
    return (a * b) % m;
41
}
42
int modexp(int n, int x)
43
{
44
    int ans = 1;
45
    while (n > 0)
46
    {
47
        if (n & 1)
48
        {
49
            ans = (ans * x) % mod;
50
        }
51
        n >>= 1;
52
        x = (x * x) % mod;
53
    }
54
    return ans;
55
}
56
/*---------------------------------------------------------------------------------------------------------------------------------*/
57
string add(string a, string b)
58
{
59
    string ans = """";
60
    int carry = 0;
61
    while (!a.empty() || !b.empty() || carry > 0)
62
    {
63
        int digitA = a.empty() ? 0 : a.back() - '0';
64
        int digitB = b.empty() ? 0 : b.back() - '0';
65
        int sum = digitA + digitB + carry;
66
        ans = to_string(sum % 10) + ans;
67
        carry = sum / 10;
68
        if (!a.empty())
69
            a.pop_back();
70
        if (!b.empty())
71
            b.pop_back();
72
    }
73
    return ans;
74
}
75
string ministrnum(string a, string b)
76
{
77
    if (a.length() > b.length())
78
        return b;
79
    else if (b.length() > a.length())
80
        return a;
81
    else
82
    {
83
        int n = a.length();
84
        for (int i = 0; i < n; i++)
85
        {
86
            if (a[i] > b[i])
87
                return b;
88
            else if (a[i] < b[i])
89
                return a;
90
        }
91
    }
92
    return a;
93
}
94
vector<int> sieve(int n) {
95
    vector<bool> isPrime(n + 1, true);
96
    vector<int> primes;
97
    if(n >= 0) isPrime[0] = false;
98
    if(n >= 1) isPrime[1] = false;
99
    for (int i = 2; i <= n; i++) {
100
        if (isPrime[i]) {
101
            primes.push_back(i);
102
            for (int j = 2 * i; j <= n; j += i)
103
                isPrime[j] = false;
104
        }
105
    }
106
    return primes;
107
}
108
109
class SegmentTree {
110
public:
111
    int n;
112
    std::vector<int> tree;
113
    std::vector<int> lazy;
114
    115
    SegmentTree(const std::vector<int>& arr) {
116
        n = arr.size();
117
        tree.resize(4 * n, 0);
118
        lazy.resize(4 * n, 0);
119
        build(arr, 0, n - 1, 0);
120
    }
121
    122
    void build(const std::vector<int>& arr, int start, int end, int index) {
123
        if (start == end) {
124
            tree[index] = arr[start];
125
            return;
126
        }
127
        int mid = (start + end) / 2;
128
        build(arr, start, mid, 2 * index + 1);
129
        build(arr, mid + 1, end, 2 * index + 2);
130
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
131
    }
132
    133
    int queryRange(int start, int end, int l, int r, int index = 0) {
134
        if (lazy[index] != 0) {
135
            tree[index] += (end - start + 1) * lazy[index];
136
            if(start != end) {
137
                lazy[2 * index + 1] += lazy[index];
138
                lazy[2 * index + 2] += lazy[index];
139
            }
140
            lazy[index] = 0;
141
        }
142
        if (start > r || end < l)
143
            return 0;
144
        if (start >= l && end <= r)
145
            return tree[index];
146
        int mid = (start + end) / 2;
147
        return queryRange(start, mid, l, r, 2 * index + 1) +
148
               queryRange(mid + 1, end, l, r, 2 * index + 2);
149
    }
150
    151
    void updateRange(int start, int end, int l, int r, int diff, int index = 0) {
152
        if(lazy[index] != 0) {
153
            tree[index] += (end - start + 1) * lazy[index];
154
            if(start != end) {
155
                lazy[2 * index + 1] += lazy[index];
156
                lazy[2 * index + 2] += lazy[index];
157
            }
158
            lazy[index] = 0;
159
        }
160
        if(start > r || end < l)
161
            return;
162
        if(start >= l && end <= r) {
163
            tree[index] += (end - start + 1) * diff;
164
            if(start != end) {
165
                lazy[2 * index + 1] += diff;
166
                lazy[2 * index + 2] += diff;
167
            }
168
            return;
169
        }
170
        int mid = (start + end) / 2;
171
        updateRange(start, mid, l, r, diff, 2 * index + 1);
172
        updateRange(mid + 1, end, l, r, diff, 2 * index + 2);
173
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
174
    }
175
};
176
class DSU {
177
public:
178
    std::vector<int> parent, rank;
179
    180
    DSU(int n) {
181
        parent.resize(n);
182
        rank.resize(n, 0);
183
        for (int i = 0; i < n; i++)
184
            parent[i] = i;
185
    }
186
    187
    int find(int x) {
188
        if (parent[x] != x)
189
            parent[x] = find(parent[x]);
190
        return parent[x];
191
    }
192
    193
    bool unionSets(int x, int y) {
194
        int rootX = find(x);
195
        int rootY = find(y);
196
        if (rootX == rootY)
197
            return false;
198
        if (rank[rootX] < rank[rootY])
199
            parent[rootX] = rootY;
200
        else if (rank[rootX] > rank[rootY])
201
            parent[rootY] = rootX;
202
        else {
203
            parent[rootY] = rootX;
204
            rank[rootX]++;
205
        }
206
        return true;
207
    }
208
};
209
210
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
211
struct Node {
212
    int val;
213
    int weight, size;
214
    Node *left, *right;
215
    bool rev = false;
216
    Node(int c): val(c), weight(rng()), size(1), left(NULL), right(NULL) {}
217
};
218
ostream &operator<<(ostream &os, Node *n) {
219
    if(!n) return os;
220
    os << n -> left;
221
    os << n -> val;
222
    os << n -> right;
223
    return os;
224
}
225
int size(Node *Treap) {return Treap ? Treap -> size: 0;}
226
void push(Node* Treap) {
227
    if(!Treap) return;
228
    if(Treap -> rev) {
229
        Treap -> rev = false;
230
        swap(Treap->left, Treap->right);
231
        if(Treap -> left) Treap->left->rev ^= true;
232
        if(Treap -> right) Treap->right->rev ^= true;
233
    }
234
}
235
void pull(Node *Treap) {
236
    if(!Treap) return;
237
    push(Treap -> left), push(Treap -> right);
238
    Treap -> size = size(Treap -> left) + size(Treap -> right) + 1;
239
    return;
240
}
241
void split(Node *Treap, Node *&left, Node *&right, int val) {
242
    if(!Treap) {
243
        left = right = NULL;
244
        return;
245
    }
246
    push(Treap);
247
    if(size(Treap -> left) < val) {
248
        split(Treap -> right, Treap -> right, right, val - size(Treap->left) - 1);
249
        left = Treap;
250
    }
251
    else {
252
        split(Treap -> left, left, Treap -> left, val);
253
        right = Treap;
254
    }
255
    pull(Treap);
256
}
257
void merge(Node *&Treap, Node *left, Node *right) {
258
    push(left), push(right);
259
    if(left == NULL) {
260
        Treap = right;
261
        return;
262
    }
263
    if(right == NULL) {
264
        Treap = left;
265
        return;
266
    }
267
    if(left -> weight < right -> weight) {
268
        merge(right -> left, left, right -> left);
269
        Treap = right;
270
    }
271
    else {
272
        merge(left->right, left->right, right);
273
        Treap = left;
274
    }
275
    pull(Treap);
276
}
277
void inOrder(Node *curr, vector<int> &res) {
278
    if(curr == NULL) return;
279
    push(curr);
280
    inOrder(curr->left, res);
281
    res.pb(curr->val);
282
    inOrder(curr->right, res);
283
    pull(curr);
284
}
285
struct Treap {
286
    Node *root = nullptr;
287
    void insert(int i, int val) {
288
        Node *l, *r;
289
        split(root, l, r, i);
290
        Node *v = new Node(val);
291
        merge(l, l, v);
292
        merge(root, l, r);
293
    }
294
    295
    void del(int i) {
296
        Node *l, *r;
297
        split(root, l, r, i);
298
        split(r, root, r, 1);
299
        merge(root, l, r);
300
    }
301
    302
    void update(int l, int r, function<void(Node *)> f) {
303
        Node *a, *b, *c;
304
        split(root, a, b, l-1);
305
        split(b, b, c, r-l+1);
306
        if(b) {f(b);}
307
        merge(root, a, b);
308
        merge(root, root, c);
309
    }
310
    311
    vector<int> allPr() {
312
        vector<int> res;
313
        inOrder(root, res);
314
        return res;
315
    }
316
    317
    void cycShft(int l, int r) {
318
        Node *a, *b, *c, *d;
319
        split(root, a, b, l-1);
320
        split(b, b, c, r-l+1);
321
        split(b, b, d, r-l);
322
        merge(root, a, d);
323
        merge(root, root, b);
324
        merge(root, root, c);
325
    }
326
};
327
vector<int> computePrefix(const string &pattern) {
328
    int n = pattern.size();
329
    vector<int> prefix(n, 0);
330
    for (int i = 1, j = 0; i < n; i++) {
331
        while (j > 0 && pattern[i] != pattern[j])
332
            j = prefix[j - 1];
333
        if (pattern[i] == pattern[j])
334
            j++;
335
        prefix[i] = j;
336
    }
337
    return prefix;
338
}
339
340
vector<int> KMPSearch(const string &text, const string &pattern) {
341
    vector<int> prefix = computePrefix(pattern);
342
    vector<int> occurrences;
343
    for (int i = 0, j = 0; i < (int)text.size(); i++) {
344
        while (j > 0 && text[i] != pattern[j])
345
            j = prefix[j - 1];
346
        if (text[i] == pattern[j])
347
            j++;
348
        if (j == (int)pattern.size()) {
349
            occurrences.push_back(i - j + 1);
350
            j = prefix[j - 1];
351
        }
352
    }
353
    return occurrences;
354
}
355
void solve()
356
{
357
    int n, ans = 1e9;
358
    string s;
359
    cin>>s;
360
    n = s.size();
361
    362
    int tot1 = count(all(s), '1');
363
    ans = tot1;
364
    365
    // vector<int> pref(n, 0);
366
    // for(int i = 0; i<n; i++) {
367
        // pref[i] = s[i] == '1';
368
        // if(i) pref[i] += pref[i - 1];
369
    // }
370
//     
371
//     
372
    // for(int i = 0; i<n; i++) {
373
        // for(int j = i; j<n; j++) {
374
            // int cnt1 = (i?pref[i-1]:0) + pref[n-1] - (j!=n-1?pref[j+1]:pref[n-1]), cnt0 = (j - i + 1) - (pref[j] - (i?pref[i-1]:0));
375
            // ans = min(ans, max(cnt1, cnt0)); 
376
        // }
377
    // }
378
    // cout<<ans<<'\n';
379
    380
    auto check = [&](int m) {
381
        int cnt0 = 0, cnt1 = 0;
382
        for(int i = 0, j = 0; i<n; i++) {
383
            cnt0 += s[i] == '0';
384
            cnt1 += s[i] == '1';
385
            386
            if(tot1 - cnt1 == m) {
387
                while(j < n && s[j] == '0') {
388
                    cnt0--;
389
                    j++;
390
                }
391
                if(cnt0 <= m) return true;
392
                while(j < n && s[j] != '0') {
393
                    cnt0--;
394
                    j++;
395
                }
396
                cnt1--;
397
                j++;
398
            }
399
        }
400
        return false;
401
    };
402
    403
    int l = 0, r = ans;
404
    while(l <= r) {
405
        int m = r - (r - l)/2;
406
        if(check(m)) r = m - 1;
407
        else l = m + 1;
408
    }
409
    cout<<l<<endl;
410
}
411
int32_t main()
412
{
413
    ios_base ::sync_with_stdio(0);
414
    cin.tie(0);
415
    cout.tie(0);
416
    int t = 1;
417
    cin >> t;
418
    while (t--)
419
        solve();
420
}",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055253
1390055250,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int t; // number of test cases
7
    cin >> t;
8
9
    while (t--) {
10
        int n, k; // size of array and batch size
11
        cin >> n >> k;
12
13
        vector<int> arr(n);
14
        for (int i = 0; i < n; i++) {
15
            cin >> arr[i];
16
        }
17
18
        // Iterate through each window (consecutive batch of size k)
19
        for (int i = 0; i <= n - k; i++) {
20
            int earliest_fault = 0; // Assume no faults
21
            // Check the batch from arr[i] to arr[i+k-1]
22
            for (int j = i; j < i + k; j++) {
23
                if (arr[j] < 0) {
24
                    earliest_fault = arr[j]; // Found a negative value, set it as earliest fault
25
                    break;
26
                }
27
            }
28
            cout << earliest_fault << "" "";
29
        }
30
        cout << endl;
31
    }
32
33
    return 0;
34
}
35",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055250
1390055243,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
5
    result = []  
6
7
    dq = deque()  
8
9
    10
11
    for i in range(k):
12
13
        if arr[i] < 0:
14
15
            dq.append(i)  
16
17
    18
19
    20
21
    for i in range(len(arr) - k + 1):
22
23
    24
25
        if dq:
26
27
            result.append(arr[dq[0]])  
28
29
        else:
30
31
            result.append(0)  
32
33
        34
35
    36
37
        if dq and dq[0] == i:
38
39
            dq.popleft()
40
41
        42
43
        44
45
        if i + k < len(arr) and arr[i + k] < 0:
46
47
            dq.append(i + k)
48
49
    50
51
    return result
52
53
54
55
t = int(input())  
56
57
for _ in range(t):
58
59
    n, k = map(int, input().split())  
60
61
    arr = list(map(int, input().split()))  
62
63
    64
65
66
67
    print(*earliest_faulty_readings(arr, k))",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055243
1390055246,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
5
    n = len(arr)
6
7
    result = []
8
9
    dq = deque()  # To store indices of negative numbers
10
11
    12
13
    # Process the first window
14
15
    for i in range(k):
16
17
        if arr[i] < 0:
18
19
            dq.append(i)
20
21
    22
23
    # Store the result for the first window
24
25
    result.append(arr[dq[0]] if dq else 0)
26
27
    28
29
    # Process the remaining windows
30
31
    for i in range(k, n):
32
33
        # Remove elements that are out of the current window
34
35
        if dq and dq[0] < i - k + 1:
36
37
            dq.popleft()
38
39
        40
41
        # Add the current element if it is negative
42
43
        if arr[i] < 0:
44
45
            dq.append(i)
46
47
        48
49
        # Store the result for the current window
50
51
        result.append(arr[dq[0]] if dq else 0)
52
53
    54
55
    return result
56
57
# Reading input
58
59
t = int(input())  # Number of test cases
60
61
for _ in range(t):
62
63
    n, k = map(int, input().split())  # Size of array and batch size
64
65
    arr = list(map(int, input().split()))  # Array elements
66
67
    68
69
    # Get the results and print as space-separated values
70
71
    print(*earliest_faulty_readings(arr, k))",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055246
1390055248,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055248
1390055234,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_faulty_batches(sensor_data, batch_size):
4
5
    output_list = []
6
7
    index_queue = deque()
8
9
    for idx in range(batch_size):
10
11
        if sensor_data[idx] < 0:
12
13
            index_queue.append(idx)
14
15
    output_list.append(sensor_data[index_queue[0]] if index_queue else 0)
16
17
    for idx in range(batch_size, len(sensor_data)):
18
19
        if index_queue and index_queue[0] < idx - batch_size + 1:
20
21
            index_queue.popleft()
22
23
        if sensor_data[idx] < 0:
24
25
            index_queue.append(idx)
26
27
        output_list.append(sensor_data[index_queue[0]] if index_queue else 0)
28
29
    return output_list
30
31
test_cases = int(input())
32
33
for _ in range(test_cases):
34
35
    array_size, batch_size = map(int, input().split())
36
37
    sensor_readings = list(map(int, input().split()))
38
39
    print(*find_faulty_batches(sensor_readings, batch_size))",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055234
1390055242,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(t, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        n, k, arr = case
8
        dq = deque()
9
        output = []
10
        11
        for i in range(n):
12
            # Remove elements that are out of this window
13
            if dq and dq[0] < i - k + 1:
14
                dq.popleft()
15
            16
            # Add current element if it is faulty (negative)
17
            if arr[i] < 0:
18
                dq.append(i)
19
            20
            # Process first valid window
21
            if i >= k - 1:
22
                output.append(arr[dq[0]] if dq else 0)
23
        24
        results.append(output)
25
    26
    return results
27
28
# Reading input
29
t = int(input())
30
test_cases = []
31
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    test_cases.append((n, k, arr))
36
37
# Processing and printing output
38
results = earliest_faulty_readings(t, test_cases)
39
for res in results:
40
    print("" "".join(map(str, res)))",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055242
1390055235,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultySensor {
4
    public static List<Integer> earliestFaults(int[] arr, int k) {
5
        List<Integer> result = new ArrayList<>();
6
        Deque<Integer> deque = new LinkedList<>();
7
8
        for (int i = 0; i < arr.length; i++) {
9
            // Remove out-of-window elements
10
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
11
                deque.poll();
12
            }
13
14
            // Add new faulty readings
15
            if (arr[i] < 0) {
16
                deque.offer(i);
17
            }
18
19
            // Collect results for valid windows
20
            if (i >= k - 1) {
21
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
22
            }
23
        }
24
        return result;
25
    }
26
27
    public static void main(String[] args) {
28
        Scanner scanner = new Scanner(System.in);
29
        int t = scanner.nextInt(); // Number of test cases
30
31
        while (t-- > 0) {
32
            int n = scanner.nextInt(); // Array size
33
            int k = scanner.nextInt(); // Batch size
34
            int[] arr = new int[n];
35
36
            for (int i = 0; i < n; i++) {
37
                arr[i] = scanner.nextInt();
38
            }
39
40
            // Compute and print results
41
            List<Integer> faults = earliestFaults(arr, k);
42
            for (int val : faults) {
43
                System.out.print(val + "" "");
44
            }
45
            System.out.println();
46
        }
47
        scanner.close();
48
    }
49
}",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055235
1390055229,unknown,unknown,unknown,"1
def min_cost(rack):
2
    n = len(rack)
3
    min_cost = float('inf')
4
    5
    for start in range(n + 1):
6
        for end in range(n - start + 1):
7
            remaining = rack[start:n-end]
8
            idle_remaining = remaining.count('0')
9
            removed_start = rack[:start]
10
            removed_end = rack[n-end:] if end > 0 else ''
11
            active_removed = removed_start.count('1') + removed_end.count('1')
12
            cost = max(idle_remaining, active_removed)
13
            min_cost = min(min_cost, cost)
14
    15
    return min_cost
16
17
T = int(input())
18
for _ in range(T):
19
    rack = input().strip()
20
    print(min_cost(rack))
21",43,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055229
