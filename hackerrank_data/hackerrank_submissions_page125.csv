submission_id,username,problem_name,language,code,page,url
1390053649,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053649
1390053651,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static int minEffort(int[] firewalls, int k) {
7
        int n = firewalls.length;
8
        if (k >= n) return 0;
9
10
        int[][] dp = new int[n + 1][k + 1];
11
        12
        for (int[] row : dp) Arrays.fill(row, Integer.MAX_VALUE);
13
        for (int j = 0; j <= k; j++) dp[n][j] = 0;
14
15
        for (int i = n - 1; i >= 0; i--) {
16
            for (int j = 0; j <= k; j++) {
17
                if (j < k) dp[i][j] = dp[i + 1][j + 1];
18
                if (dp[i + 1][j] != Integer.MAX_VALUE) {
19
                    dp[i][j] = Math.min(dp[i][j], firewalls[i] + dp[i + 1][j]);
20
                }
21
            }
22
        }
23
24
        return dp[0][0];
25
    }
26
27
    public static void main(String[] args) {
28
        Scanner sc = new Scanner(System.in);
29
        int t = sc.nextInt();
30
31
        while (t-- > 0) {
32
            int n = sc.nextInt();
33
            int k = sc.nextInt();
34
            int[] firewalls = new int[n];
35
36
            for (int i = 0; i < n; i++) {
37
                firewalls[i] = sc.nextInt();
38
            }
39
40
            System.out.println(minEffort(firewalls, k));
41
        }
42
43
        sc.close();
44
    }
45
}
46",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053651
1390053652,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    ans = float('inf')
6
    7
    for i in range(n + 1):
8
        for j in range(n - i + 1):
9
            10
            decommissioned_ones = 0
11
            remaining_zeros = 0
12
            13
            # Decommission from the beginning
14
            decommissioned_ones += s[:i].count('1')
15
            16
            # Decommission from the end
17
            decommissioned_ones += s[n - j:].count('1')
18
            19
            # Remaining string after decommissioning
20
            remaining_string = s[i:n - j]
21
            remaining_zeros = remaining_string.count('0')
22
            23
            ans = min(ans, max(decommissioned_ones, remaining_zeros))
24
            25
    print(ans)
26
27
t = int(input())
28
for _ in range(t):
29
    solve()",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053652
1390053641,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053641
1390053643,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    ans = float('inf')
5
    6
    for i in range(n + 1):
7
        prefix = s[:i]
8
        for j in range(n - i + 1):
9
            suffix = s[n-j:]
10
            remaining = s[i:n-j]
11
            12
            zeros_remaining = remaining.count('0')
13
            ones_removed = prefix.count('1') + suffix.count('1')
14
            15
            ans = min(ans, max(zeros_remaining, ones_removed))
16
    17
    print(ans)
18
19
t = int(input())
20
for _ in range(t):
21
    solve()",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053643
1390053648,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include <bits/stdc++.h>
7
using namespace std;
8
9
vector<int> earliest_faulty_readings(vector<int>& arr, int k) {
10
    int n = arr.size();
11
    vector<int> result;
12
    deque<int> dq;  // Stores indices of negative numbers
13
14
    // Process first window
15
    for (int i = 0; i < k; i++) {
16
        if (arr[i] < 0) dq.push_back(i);
17
    }
18
19
    // Process the sliding window
20
    for (int i = k; i <= n; i++) {
21
        // Append first negative number in the window
22
        if (!dq.empty()) 
23
            result.push_back(arr[dq.front()]);  // First negative in the deque
24
        else 
25
            result.push_back(0);  // No negative number
26
27
        // Remove elements that are out of the current window
28
        while (!dq.empty() && dq.front() < i - k + 1) {
29
            dq.pop_front();
30
        }
31
32
        // Add the next element if negative
33
        if (i < n && arr[i] < 0) {
34
            dq.push_back(i);
35
        }
36
    }
37
38
    return result;
39
}
40
41
42
int main() {
43
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
44
    int t;
45
    cin >> t;  // Number of test cases
46
    while (t--) {
47
        int n, k;
48
        cin >> n >> k;  // Size of array and batch size
49
        vector<int> arr(n);
50
        for (int i = 0; i < n; i++) {
51
            cin >> arr[i];
52
        }
53
        54
        vector<int> result = earliest_faulty_readings(arr, k);
55
        for (int num : result) {
56
            cout << num << "" "";
57
        }
58
        cout << endl;
59
    }
60
    return 0;
61
}",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053648
1390053639,unknown,unknown,unknown,"1
2
def faulty_reading(arr, k):
3
    result = []
4
    for i in range(0,len(arr) - k + 1):
5
        for j in range(i,i+k):
6
            if arr[j] < 0:
7
                result.append(arr[j])
8
                break
9
            if j == i+k-1:
10
                result.append(0)
11
    return result
12
13
14
15
t = int(input())
16
17
for _ in range(t):
18
    n,k = map(int,input().split())
19
    arr = list(map(int,input().split()))
20
    print(*faulty_reading(arr,k))",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053639
1390053640,unknown,unknown,unknown,"1
def minimize_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    4
    # Create list of (value + index) for each firewall
5
    skip_value = []
6
    for i in range(n):
7
        skip_value.append((firewalls[i] + i, i))
8
9
    # Sort by descending benefit to skip
10
    skip_value.sort(reverse=True)
11
12
    # Mark which firewalls to skip
13
    skipped = [0] * n
14
    for i in range(k):
15
        _, idx = skip_value[i]
16
        skipped[idx] = 1
17
18
    # Now calculate final effort
19
    effort = 0
20
    penalty = 0
21
    for i in range(n):
22
        if skipped[i]:
23
            penalty += 1
24
        else:
25
            effort += firewalls[i] + penalty
26
27
    return effort
28
29
# Main driver
30
T = int(input())
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    firewalls = list(map(int, input().split()))
34
    print(minimize_effort(n, k, firewalls))",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053640
1390053637,unknown,unknown,unknown,"1
def minimize_effort(test_cases):
2
    results = []
3
    4
    for n, k, strengths in test_cases:
5
        # Sort the strengths array to prioritize skipping the most costly firewalls
6
        strengths.sort()
7
        8
        # Skip up to k strongest firewalls, which are now the last k elements in the sorted list
9
        total_effort = sum(strengths[:-k]) if k < n else 0
10
        11
        results.append(total_effort)
12
    13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    n, k = map(int, input().split())
21
    strengths = list(map(int, input().split()))
22
    test_cases.append((n, k, strengths))
23
24
# Get results
25
results = minimize_effort(test_cases)
26
27
# Output results
28
for res in results:
29
    print(res)",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053637
1390053636,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",125,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053636
