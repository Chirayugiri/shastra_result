submission_id,username,problem_name,language,code,page,url
1390052793,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    for n, k, arr in test_cases:
6
        dq = deque()
7
        res = []
8
        9
        for i in range(n):
10
            if arr[i] < 0:
11
                dq.append(i)
12
13
            if i >= k - 1:
14
                while dq and dq[0] < i - k + 1:
15
                    dq.popleft()
16
17
                res.append(arr[dq[0]] if dq else 0)
18
19
        results.append("" "".join(map(str, res)))
20
    21
    print(""\n"".join(results))
22
23
# Read input
24
t = int(input())
25
test_cases = []
26
for _ in range(t):
27
    n, k = map(int, input().split())
28
    arr = list(map(int, input().split()))
29
    test_cases.append((n, k, arr))
30
31
earliest_faulty_readings(test_cases)
32",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052793
1390052794,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faculty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
    8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
            12
    for i in range(n - k + 1):
13
        result.append(arr[dq[0]] if dq else 0)
14
        15
        if dq and dq[0] == i:
16
            dq.popleft()
17
            18
        if i + k < n and arr[i + k] < 0:
19
            dq.append(i + k)
20
            21
    return result
22
23
t = int(input())
24
for _ in range(t):
25
    n, k = map(int, input().split())
26
    arr = list(map(int,input().split()))
27
    print(*earliest_faculty_readings(arr, k))",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052794
1390052795,unknown,unknown,unknown,"1
def minimum_effort(n, k, arr):
2
    total_sum = sum(arr)
3
    4
    if k == n:
5
        return 0
6
    7
    current_window_sum = sum(arr[:k])
8
    min_effort = total_sum - current_window_sum + (n - k)
9
    10
    for i in range(1, n - k + 1):
11
        current_window_sum += arr[i + k - 1] - arr[i - 1]
12
        effort = total_sum - current_window_sum + (n - (i + k))
13
        min_effort = min(min_effort, effort)
14
    15
    return min_effort
16
17
t = int(input())
18
for _ in range(t):
19
    n, k = map(int, input().split())
20
    arr = list(map(int, input().split()))
21
    result = minimum_effort(n, k, arr)
22
    print(result)",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052795
1390052786,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    for n, k, arr in test_cases:
4
        if k == n:
5
            results.append(0)
6
            continue
7
8
        total_effort = sum(arr)
9
        min_effort = total_effort
10
11
        for i in range(n):
12
            effort = total_effort - arr[i] + (n - 1) * k
13
            min_effort = min(min_effort, effort)
14
15
        results.append(min_effort)
16
17
    return results
18
19
t = int(input())
20
test_cases = [(lambda n, k, arr: (n, k, arr))(*map(int, input().split()), list(map(int, input().split()))) for _ in range(t)]
21
22
for output in min_effort(test_cases):
23
    print(output)
24",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052786
1390052787,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        Scanner scanner = new Scanner(System.in);
12
        int t = scanner.nextInt(); 
13
        while (t-- > 0) {
14
            int n = scanner.nextInt(); 
15
            int k = scanner.nextInt(); 
16
            int[] arr = new int[n];
17
            for (int i = 0; i < n; i++) {
18
                arr[i] = scanner.nextInt();
19
            }
20
            21
            List<Integer> result = findEarliestFaults(arr, k);
22
            for (int num : result) {
23
                System.out.print(num + "" "");
24
            }
25
            System.out.println();
26
        }
27
        scanner.close();
28
    }
29
    30
    public static List<Integer> findEarliestFaults(int[] arr, int k) {
31
        List<Integer> result = new ArrayList<>();
32
        Deque<Integer> deque = new LinkedList<>(); 
33
        34
        for (int i = 0; i < k; i++) {
35
            if (arr[i] < 0) {
36
                deque.addLast(i);
37
            }
38
        }
39
        40
        result.add(deque.isEmpty() ? 0 : arr[deque.peekFirst()]);
41
        42
        for (int i = k; i < arr.length; i++) {
43
            if (!deque.isEmpty() && deque.peekFirst() <= i - k) {
44
                deque.pollFirst();
45
            }
46
            47
            if (arr[i] < 0) {
48
                deque.addLast(i);
49
            }
50
            51
            result.add(deque.isEmpty() ? 0 : arr[deque.peekFirst()]);
52
        }
53
        54
        return result;
55
    }
56
57
}",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052787
1390052791,unknown,unknown,unknown,"1
def minimum_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        if k >= n:
6
            results.append(0)
7
            continue
8
        total_effort = sum(a)
9
        reduction = []
10
        for i in range(n):
11
            reduction.append(a[i] - (n - i - 1))
12
        reduction.sort(reverse=True)
13
        max_reduction = sum(reduction[:k])
14
        results.append(total_effort - max_reduction)
15
    return results
16
17
def main():
18
    import sys
19
    input = sys.stdin.read
20
    data = input().split()
21
    idx = 0
22
    T = int(data[idx])
23
    idx += 1
24
    test_cases = []
25
    for _ in range(T):
26
        n, k = int(data[idx]), int(data[idx + 1])
27
        idx += 2
28
        a = list(map(int, data[idx:idx + n]))
29
        idx += n
30
        test_cases.append((n, k, a))
31
    results = minimum_effort(test_cases)
32
    for res in results:
33
        print(res)
34
35
if __name__ == ""__main__"":
36
    main()",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052791
1390052777,unknown,unknown,unknown,"1
t = int(input())
2
3
for _ in range(t):
4
    n, k = map(int, input().split())
5
    a = list(map(int, input().split()))
6
    result = []
7
    neg = []
8
9
    for i in range(k):
10
        if a[i] < 0:
11
            neg.append(i)
12
13
    result.append(a[neg[0]] if neg else 0)
14
15
    for i in range(k, n):
16
        if neg and neg[0] < i - k + 1:
17
            neg.pop(0)
18
        if a[i] < 0:
19
            neg.append(i)
20
        result.append(a[neg[0]] if neg else 0)
21
22
    print("" "".join(str(x) for x in result))",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052777
1390052780,unknown,unknown,unknown,"1
import java.util.ArrayList;
2
import java.util.List;
3
import java.util.Scanner;
4
5
public class Solution {
6
7
    public static void main(String[] args) {
8
        Scanner scanner = new Scanner(System.in);
9
        int t = scanner.nextInt();
10
        while (t-- > 0) {
11
            int n = scanner.nextInt();
12
            int k = scanner.nextInt();
13
            int[] a = new int[n];
14
            for (int j = 0; j < n; j++) {
15
                a[j] = scanner.nextInt();
16
            }
17
            solve(n, k, a);
18
        }
19
        scanner.close();
20
    }
21
22
    public static void solve(int n, int k, int[] a) {
23
        long minEffort = Long.MAX_VALUE;
24
25
        for (int i = 0; i < (1 << n); i++) {
26
            int skippedCount = 0;
27
            for (int j = 0; j < n; j++) {
28
                if ((i & (1 << j)) != 0) {
29
                    skippedCount++;
30
                }
31
            }
32
33
            if (skippedCount <= k) {
34
                long effort = 0;
35
                int increasedStrength = 0;
36
                int currentSkippedIndex = 0;
37
                List<Integer> skippedIndices = new ArrayList<>();
38
39
                for (int j = 0; j < n; j++) {
40
                    if ((i & (1 << j)) != 0) {
41
                        skippedIndices.add(j);
42
                    }
43
                }
44
45
                for (int j = 0; j < n; j++) {
46
                    if (currentSkippedIndex < skippedIndices.size() && skippedIndices.get(currentSkippedIndex) == j) {
47
                        increasedStrength++;
48
                        currentSkippedIndex++;
49
                    } else {
50
                        effort += (long) a[j] + increasedStrength;
51
                    }
52
                }
53
                minEffort = Math.min(minEffort, effort);
54
            }
55
        }
56
        System.out.println(minEffort);
57
    }
58
}",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052780
1390052781,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void earliest_faulty_readings(int test_cases) {
5
    for (int t = 0; t < test_cases; t++) {
6
        int n, k;
7
        scanf(""%d %d"", &n, &k);
8
        int *arr = (int *)malloc(n * sizeof(int));
9
        for (int i = 0; i < n; i++) {
10
            scanf(""%d"", &arr[i]);
11
        }
12
        13
        for (int i = 0; i <= n - k; i++) {
14
            int fault = 0;
15
            for (int j = i; j < i + k; j++) {
16
                if (arr[j] < 0) {
17
                    fault = arr[j];
18
                    break;
19
                }
20
            }
21
            printf(""%d "", fault);
22
        }
23
        printf(""\n"");
24
        free(arr);
25
    }
26
}
27
28
int main() {
29
    int test_cases;
30
    scanf(""%d"", &test_cases);
31
    earliest_faulty_readings(test_cases);
32
    return 0;
33
}",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052781
1390052772,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    min_total_effort = float('inf')
3
4
    for i in range(1 << n):  
5
        skipped_count = 0
6
        current_effort = 0
7
        current_firewalls = firewalls[:] 
8
9
        skipped_indices = []
10
        for j in range(n):
11
            if (i >> j) & 1:
12
                skipped_count += 1
13
                skipped_indices.append(j)
14
15
        if skipped_count <= k:
16
            skipped_indices.sort()
17
            18
            for skip_index in skipped_indices:
19
                for idx in range(skip_index + 1, n):
20
                    current_firewalls[idx] += 1
21
            22
            non_skipped_indices = [idx for idx in range(n) if idx not in skipped_indices]
23
            24
            for idx in non_skipped_indices:
25
                current_effort += current_firewalls[idx]
26
            27
            min_total_effort = min(min_total_effort, current_effort)
28
29
    return min_total_effort
30
31
if __name__ == ""__main__"":
32
    t = int(input())
33
    for _ in range(t):
34
        n, k = map(int, input().split())
35
        firewalls = list(map(int, input().split()))
36
        print(min_effort(n, k, firewalls))",166,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052772
