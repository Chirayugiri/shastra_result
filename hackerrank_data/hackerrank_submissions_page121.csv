submission_id,username,problem_name,language,code,page,url
1390053729,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053729
1390053731,unknown,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n, k = map(int, input().split())
4
    arr = list(map(int, input().split()))
5
    res = []
6
    7
    L, R = 0, k - 1
8
    while R < n:
9
        batch = arr[L:R+1]
10
        isFaulty, value = False, 0
11
        for i in range(len(batch)):
12
            if batch[i] < 0:
13
                isFaulty = True
14
                value = batch[i]
15
                break
16
        if not isFaulty:
17
            res.append(0)
18
        else:
19
            res.append(value)
20
        L += 1
21
        R += 1
22
    23
    print(*res)",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053731
1390053730,unknown,unknown,unknown,"1
def minimum_effort(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n, k = test_cases[t][0]
6
        arr = test_cases[t][1][:]  # Create a copy of the input array
7
        8
        if k >= n:
9
            results.append(0)
10
            continue
11
        12
        min_effort = float('inf')
13
        14
        for i in range(1 << n):
15
            skipped_indices = []
16
            17
            for j in range(n):
18
                if (i >> j) & 1:
19
                    skipped_indices.append(j)
20
                    21
            if len(skipped_indices) <= k:
22
                effort = 0
23
                temp_arr = arr[:]  # Create a copy of the original array for each combination
24
                25
                skip_count = 0
26
                for j in range(n):
27
                    if (i >> j) & 1:
28
                        skip_count += 1
29
                        for l in range(j + 1, n):
30
                            if not (i >> l) & 1:
31
                                temp_arr[l] += 1
32
                    else:
33
                        effort += temp_arr[j]
34
                35
                min_effort = min(min_effort, effort)
36
        37
        results.append(min_effort)
38
        39
    return results
40
41
# Input reading
42
T = int(input())
43
test_cases = []
44
45
# Read all test cases
46
for _ in range(T):
47
    n, k = map(int, input().split())
48
    arr = list(map(int, input().split()))
49
    test_cases.append([(n, k), arr])
50
51
# Get the results and print them
52
results = minimum_effort(T, test_cases)
53
54
for result in results:
55
    print(result)",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053730
1390053722,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class DataCenterOptimization {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = Integer.parseInt(sc.nextLine());
7
        while (T-- > 0) {
8
            String s = sc.nextLine();
9
            int n = s.length();
10
11
            int totalActive = 0, totalIdle = 0;
12
            for (char c : s.toCharArray()) {
13
                if (c == '1') totalActive++;
14
                else totalIdle++;
15
            }
16
17
            int[] prefixActive = new int[n + 1];
18
            int[] prefixIdle = new int[n + 1];
19
            for (int i = 0; i < n; i++) {
20
                prefixActive[i + 1] = prefixActive[i] + (s.charAt(i) == '1' ? 1 : 0);
21
                prefixIdle[i + 1] = prefixIdle[i] + (s.charAt(i) == '0' ? 1 : 0);
22
            }
23
24
            int minCost = Integer.MAX_VALUE;
25
26
            // Try all possible (l, r) subarrays to keep
27
            for (int l = 0; l <= n; l++) {
28
                for (int r = l; r <= n; r++) {
29
                    int idleLeft = prefixIdle[r] - prefixIdle[l];
30
                    int activeRemoved = prefixActive[l] + (totalActive - prefixActive[r]);
31
                    int cost = Math.max(idleLeft, activeRemoved);
32
                    minCost = Math.min(minCost, cost);
33
                }
34
            }
35
36
            System.out.println(minCost);
37
        }
38
        sc.close();
39
    }
40
}
41",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053722
1390053723,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner scanner = new Scanner(System.in);
11
        int t = scanner.nextInt(); 
12
13
        while (t-- > 0) {
14
            int n = scanner.nextInt(); 
15
            int k = scanner.nextInt(); 
16
            int[] arr = new int[n];
17
18
            for (int i = 0; i < n; i++) {
19
                arr[i] = scanner.nextInt();
20
            }
21
22
            List<Integer> ans = findResult(arr, k);
23
24
            for (int num : ans) {
25
                System.out.print(num + "" "");
26
            }
27
            System.out.println();
28
        }
29
        scanner.close();
30
     31
    }
32
    public static List<Integer> findResult(int []arr, int k){
33
        List<Integer> ans = new ArrayList<Integer>();
34
        Deque<Integer> deque = new LinkedList<>();
35
        36
        for(int i =0;i<k;i++){
37
            if(arr[i]<0){
38
            deque.addLast(i);
39
            }
40
        }
41
        if(!deque.isEmpty()){
42
            ans.add(arr[deque.peekFirst()]);
43
        }
44
        for(int i=k;i<arr.length;i++){
45
            if(!deque.isEmpty()&&deque.peekFirst()<=i-k){
46
                deque.pollFirst();
47
            }
48
            if(arr[i]<0){
49
            deque.addLast(i);
50
            }
51
            if(!deque.isEmpty()){
52
                ans.add(arr[deque.peekFirst()]);
53
            }else{
54
                ans.add(0);
55
            }
56
        }
57
        58
        59
        return ans;
60
     61
    }
62
}",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053723
1390053728,unknown,unknown,unknown,"1
#include <stdio.h>
2
3
int main() {
4
    int t;
5
    scanf(""%d"", &t);
6
    7
    while (t--) {
8
        int n, k;
9
        scanf(""%d %d"", &n, &k);
10
        11
        int arr[n];
12
        for (int i = 0; i < n; i++) {
13
            scanf(""%d"", &arr[i]);
14
        }
15
16
        // Process each window
17
        for (int i = 0; i <= n - k; i++) {
18
            int found = 0;
19
            for (int j = i; j < i + k; j++) {
20
                if (arr[j] < 0) {
21
                    printf(""%d "", arr[j]);
22
                    found = 1;
23
                    break;
24
                }
25
            }
26
            if (!found) {
27
                printf(""0 "");
28
            }
29
        }
30
        printf(""\n"");
31
    }
32
33
    return 0;
34
}
35",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053728
1390053719,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053719
1390053721,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053721
1390053718,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
7
        # Precompute prefix sums for 1's
8
        prefix_1 = [0] * (n + 1)
9
        for i in range(n):
10
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
11
12
        # Iterate through all possible splits
13
        for i in range(n + 1):
14
            for j in range(i, n + 1):
15
                # Remaining segment is from i to j-1
16
                remaining_0s = (j - i) - (prefix_1[j] - prefix_1[i])  # Optimized calculation of 0s
17
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
18
                cost = max(remaining_0s, removed_1s)
19
                min_cost = min(min_cost, cost)
20
        results.append(min_cost)
21
    return results
22
23
# Read input
24
T = int(input())
25
test_cases = [input().strip() for _ in range(T)]
26
27
# Compute results
28
results = min_decommission_cost(test_cases)
29
30
# Print output
31
for result in results:
32
    print(result)",121,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053718
