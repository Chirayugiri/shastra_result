submission_id,username,problem_name,language,code,page,url
1390053459,unknown,unknown,unknown,"1
def minimum_decommission_cost(servers):
2
    n = len(servers)
3
    4
    # Convert the string to a list of integers (0 or 1)
5
    server_list = [1 if c == '1' else 0 for c in servers]
6
    7
    # Precompute prefix sums
8
    prefix_sum = [0] * (n + 1)
9
    for i in range(n):
10
        prefix_sum[i + 1] = prefix_sum[i] + server_list[i]
11
    12
    min_cost = n  # Initialize to worst case
13
    14
    # For each start index i
15
    for i in range(n + 1):
16
        # Total active servers removed from the left
17
        left_ones = prefix_sum[i]
18
        19
        # For each end index j (using binary search would be ideal, but direct is OK for now)
20
        for j in range(i, n + 1):
21
            # Calculate metrics for current segment [i,j)
22
            segment_length = j - i
23
            segment_ones = prefix_sum[j] - prefix_sum[i]
24
            segment_zeros = segment_length - segment_ones
25
            26
            # Total active servers removed from the right
27
            right_ones = prefix_sum[n] - prefix_sum[j]
28
            29
            # Total active servers removed
30
            total_ones_removed = left_ones + right_ones
31
            32
            cost = max(segment_zeros, total_ones_removed)
33
            min_cost = min(min_cost, cost)
34
    35
    return min_cost
36
37
def process_input():
38
    t = int(input().strip())
39
    results = []
40
    41
    for _ in range(t):
42
        servers = input().strip()
43
        results.append(minimum_decommission_cost(servers))
44
    45
    for result in results:
46
        print(result)
47
48
if __name__ == ""__main__"":
49
    process_input()",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053459
1390053461,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    min_cost = float('inf')
4
    5
    total_active = server_rack.count('1')
6
    7
    for prefix in range(n + 1):
8
        for suffix in range(n + 1 - prefix):
9
            if prefix + suffix > n:
10
                continue
11
                12
            remaining = server_rack[prefix:n-suffix]
13
            14
            if not remaining:
15
                cost = total_active
16
            else:
17
                idle_remaining = remaining.count('0')
18
                active_removed = total_active - remaining.count('1')
19
                cost = max(idle_remaining, active_removed)
20
                21
            min_cost = min(min_cost, cost)
22
    23
    return min_cost
24
25
def process_test_cases():
26
    t = int(input().strip())
27
    results = []
28
    29
    for _ in range(t):
30
        server_rack = input().strip()
31
        results.append(min_decommissioning_cost(server_rack))
32
    33
    return results
34
35
if __name__ == ""__main__"":
36
    results = process_test_cases()
37
    for result in results:
38
        print(result)",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053461
1390053462,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    idx = 0
6
    T = int(input[idx])
7
    idx += 1
8
    for _ in range(T):
9
        n, k = int(input[idx]), int(input[idx + 1])
10
        idx += 2
11
        a = list(map(int, input[idx:idx + n]))
12
        idx += n
13
        14
        sum_S = sum(a)
15
        # Compute a[i] + i (0-based)
16
        values = [a[i] + i for i in range(n)]
17
        # Sort in descending order
18
        values.sort(reverse=True)
19
        sum_aj_plus_j = sum(values[:k])
20
        # Compute the result
21
        res = sum_S - sum_aj_plus_j - (k * (k + 1)) // 2 + k * n
22
        print(res)
23
24
if __name__ == ""__main__"":
25
    main()",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053462
1390053456,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    4
    for n, k, arr in test_cases:
5
        total_effort = sum(arr)
6
7
        if k == n:
8
            results.append(""0"")  # If k == n, we can skip all firewalls
9
            continue
10
11
        # Compute the minimum effort after skipping one firewall
12
        min_effort = float('inf')
13
14
        for i in range(n):
15
            effort_with_skip = total_effort - arr[i] + k  # Remove arr[i] and add k
16
            min_effort = min(min_effort, effort_with_skip)
17
18
        results.append(str(min_effort))
19
20
    return ""\n"".join(results)
21
22
23
# Reading input
24
t = int(input())  # Number of test cases
25
test_cases = []
26
27
for _ in range(t):
28
    n, k = map(int, input().split())  # Number of firewalls and penalty
29
    arr = list(map(int, input().split()))  # Firewall strengths
30
    test_cases.append((n, k, arr))
31
32
# Output results
33
print(min_effort(test_cases))
34",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053456
1390053457,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultySensor {
4
    public static List<Integer> earliestFaults(int[] arr, int k) {
5
        List<Integer> result = new ArrayList<>();
6
        Deque<Integer> deque = new LinkedList<>();
7
8
        for (int i = 0; i < arr.length; i++) {
9
            // Remove out-of-window elements
10
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
11
                deque.poll();
12
            }
13
14
            // Add new faulty readings
15
            if (arr[i] < 0) {
16
                deque.offer(i);
17
            }
18
19
            // Collect results for valid windows
20
            if (i >= k - 1) {
21
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
22
            }
23
        }
24
        return result;
25
    }
26
27
    public static void main(String[] args) {
28
        Scanner scanner = new Scanner(System.in);
29
        int t = scanner.nextInt(); // Number of test cases
30
31
        while (t-- > 0) {
32
            int n = scanner.nextInt(); // Array size
33
            int k = scanner.nextInt(); // Batch size
34
            int[] arr = new int[n];
35
36
            for (int i = 0; i < n; i++) {
37
                arr[i] = scanner.nextInt();
38
            }
39
40
            // Compute and print results
41
            List<Integer> faults = earliestFaults(arr, k);
42
            for (int val : faults) {
43
                System.out.print(val + "" "");
44
            }
45
            System.out.println();
46
        }
47
        scanner.close();
48
    }
49
}",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053457
1390053458,unknown,unknown,unknown,"1
def minimum_pruning_cost(server_rack):
2
    active_count = server_rack.count('1')
3
    idle_count = server_rack.count('0')
4
    5
    min_cost = float('inf')
6
    7
    for start_servers in range(len(server_rack) + 1):
8
        for end_servers in range(len(server_rack) + 1 - start_servers):
9
            if start_servers == 0 and end_servers == 0:
10
                continue
11
                12
            remaining = server_rack[start_servers:len(server_rack) - end_servers]
13
            14
            active_decommissioned = (server_rack[:start_servers].count('1') + 
15
                                    server_rack[len(server_rack) - end_servers:].count('1'))
16
            17
            remaining_idle = remaining.count('0')
18
            19
            cost = max(remaining_idle, active_decommissioned)
20
            21
            min_cost = min(min_cost, cost)
22
    23
    return min_cost
24
25
def main():
26
    t = int(input().strip())
27
    28
    results = []
29
    for _ in range(t):
30
        server_rack = input().strip()
31
        results.append(minimum_pruning_cost(server_rack))
32
    33
    for result in results:
34
        print(result)
35
36
if __name__ == ""__main__"":
37
    main()",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053458
1390053448,unknown,unknown,unknown,"1
def find_earliest_faults(arr, batch_size):
2
    results = []
3
    for i in range(len(arr) - batch_size + 1):
4
        batch = arr[i:i + batch_size]
5
        earliest_fault = next((x for x in batch if x < 0), 0)
6
        results.append(earliest_fault)
7
    return results
8
9
# Test cases
10
for _ in range(int(input())):
11
    n, k = map(int, input().split())
12
    arr = list(map(int, input().split()))
13
    print(*find_earliest_faults(arr, k))
14",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053448
1390053449,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
    results = []
3
    4
    # Loop through each possible batch
5
    for i in range(len(arr) - k + 1):
6
        fault_found = False
7
        8
        # Find earliest fault in current batch
9
        for j in range(i, i + k):
10
            if arr[j] < 0:
11
                results.append(arr[j])
12
                fault_found = True
13
                break
14
                15
        # If no fault found in batch, append 0
16
        if not fault_found:
17
            results.append(0)
18
    19
    return results
20
21
# Process test cases
22
t = int(input())
23
for _ in range(t):
24
    n, k = map(int, input().split())
25
    arr = list(map(int, input().split()))
26
    27
    result = earliest_fault(arr, k)
28
    print(*result)",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053449
1390053454,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    idx = 0
6
    T = int(input[idx])
7
    idx += 1
8
    for _ in range(T):
9
        n, k = int(input[idx]), int(input[idx + 1])
10
        idx += 2
11
        a = list(map(int, input[idx:idx + n]))
12
        idx += n
13
        14
        sum_S = sum(a)
15
        # Compute a[i] + i (0-based)
16
        values = [a[i] + i for i in range(n)]
17
        # Sort in descending order
18
        values.sort(reverse=True)
19
        sum_aj_plus_j = sum(values[:k])
20
        # Compute the result
21
        res = sum_S - sum_aj_plus_j - (k * (k + 1)) // 2 + k * n
22
        print(res)
23
24
25
main()",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053454
1390053446,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  
7
    8
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
   13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    16
    for i in range(k, n):
17
       18
        if dq and dq[0] <= i - k:
19
            dq.popleft()
20
        21
        22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
       26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
31
t = int(input())  
32
for _ in range(t):
33
    n, k = map(int, input().split())  
34
    arr = list(map(int, input().split()))  
35
    print(*earliest_faulty_readings(arr, k))
36",136,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053446
