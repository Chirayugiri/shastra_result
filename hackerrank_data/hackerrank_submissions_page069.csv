submission_id,username,problem_name,language,code,page,url
1390054731,unknown,unknown,unknown,"1
cases = int(input())
2
for t in range(cases):
3
    n,k = [int(i) for i in input().split()]
4
    array = [int(i) for i in input().split()]
5
    if n == k:
6
        print(0)
7
        continue
8
    batch_sum = [0]*n
9
    for i in range(n):
10
        batch_sum[i] = sum(array[i:i+k])
11
    total = sum(array)
12
    best = total
13
    for i in range(n):
14
        if i + k <= n:
15
            best = min(best, total - batch_sum[i] + n-i-k)
16
        else:
17
            best = min(best, total - batch_sum[i])
18
    print(best)
19
        20
        21
    22
    23
    24
    25
    ",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054731
1390054736,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void findEarliestFaultyReadings(int *arr, int n, int k) {
5
    int *result = (int *)malloc((n - k + 1) * sizeof(int));
6
    int front = 0, rear = 0;
7
    int queue[n];
8
    9
    // Process the first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) {
12
            queue[rear++] = i;
13
        }
14
    }
15
    16
    // Store result for the first batch
17
    result[0] = (front < rear) ? arr[queue[front]] : 0;
18
    19
    // Process the remaining windows
20
    for (int i = k; i < n; i++) {
21
        // Remove elements not within the window
22
        while (front < rear && queue[front] <= i - k) {
23
            front++;
24
        }
25
        26
        // Add new element if it's faulty
27
        if (arr[i] < 0) {
28
            queue[rear++] = i;
29
        }
30
        31
        // Store result for current batch
32
        result[i - k + 1] = (front < rear) ? arr[queue[front]] : 0;
33
    }
34
    35
    // Print the result
36
    for (int i = 0; i < n - k + 1; i++) {
37
        printf(""%d "", result[i]);
38
    }
39
    printf(""\n"");
40
    41
    free(result);
42
}
43
44
int main() {
45
    int t;
46
    scanf(""%d"", &t);
47
    48
    while (t--) {
49
        int n, k;
50
        scanf(""%d %d"", &n, &k);
51
        int arr[n];
52
        53
        for (int i = 0; i < n; i++) {
54
            scanf(""%d"", &arr[i]);
55
        }
56
        57
        findEarliestFaultyReadings(arr, n, k);
58
    }
59
    60
    return 0;
61
}
62",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054736
1390054738,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
import sys
3
4
def main():
5
    input = sys.stdin.read
6
    data = input().split(""\n"")
7
    8
    t = int(data[0])  # Number of test cases
9
    index = 1
10
11
    results = []
12
    for _ in range(t):
13
        n, k = map(int, data[index].split())  # Number of firewalls and skips allowed
14
        strengths = list(map(int, data[index + 1].split()))  # Firewall strengths
15
        index += 2
16
        17
        if k >= n:
18
            results.append(""0"")
19
            continue
20
        21
        # Calculate the impact of each firewall: strength + index
22
        impact = [(strengths[i] + i, i) for i in range(n)]
23
        24
        # Sort firewalls by impact (higher impact should be skipped first)
25
        impact.sort(reverse=True)
26
        27
        # Select the top k firewalls to skip
28
        to_skip = set(idx for _, idx in impact[:k])
29
        30
        # Compute the minimal effort
31
        effort = 0
32
        skipped = 0
33
        34
        for i in range(n):
35
            if i in to_skip:
36
                skipped += 1
37
            else:
38
                effort += strengths[i] + skipped
39
        40
        results.append(str(effort))
41
    42
    # Print all results at once (faster output handling)
43
    sys.stdout.write(""\n"".join(results) + ""\n"")
44
45
if _name_ == ""_main_"":
46
    main()
47",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054738
1390054729,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
#include <math.h>
4
#include <stdlib.h>
5
void findreading(int n,int k,int arr[]){
6
        for (int i = 0; i <= n - k; i++) {  
7
        int found = 0;  
8
        for (int j = i; j < i + k; j++) {
9
            if (arr[j] < 0) {
10
                printf(""%d "", arr[j]);  
11
                found = 1;
12
                break;
13
            }
14
        }
15
16
        if (!found) {
17
            printf(""0 "");  
18
        }
19
    }
20
    printf(""\n"");  
21
}
22
int main() {
23
    int t;
24
    scanf(""%d"", &t);  
25
26
    for (int i = 0; i < t; i++) {
27
        int n, k;
28
        scanf(""%d %d"", &n, &k);  
29
30
        int arr[n];  
31
32
        for (int j = 0; j < n; j++) {  
33
            scanf(""%d"", &arr[j]);  
34
        }
35
36
        findreading(n, k, arr);  
37
    }
38
39
    return 0;
40
}",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054729
1390054728,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T; 
7
    for (int t = 0; t < T; t++) {
8
        string s;
9
        cin >> s; 
10
        int n = s.length();
11
12
    13
        vector<int> prefix_0(n + 1, 0);
14
        vector<int> prefix_1(n + 1, 0);
15
        for (int i = 1; i <= n; i++) {
16
            prefix_0[i] = prefix_0[i - 1] + (s[i - 1] == '0' ? 1 : 0);
17
            prefix_1[i] = prefix_1[i - 1] + (s[i - 1] == '1' ? 1 : 0);
18
        }  
19
        auto check = [&](int k) {
20
            int l = 0;
21
         22
            for (int r = 0; r < n; r++) {
23
              24
                while (l <= r && prefix_0[r + 1] - prefix_0[l] > k) {
25
                    l++;
26
                }
27
                // wtf ,  check number of 1's decommissioned
28
                if (l <= r && prefix_1[l] + (prefix_1[n] - prefix_1[r + 1]) <= k) {
29
                    return true;
30
                }
31
            }
32
      33
            if (prefix_1[n] <= k) {
34
                return true;
35
            }
36
            return false;
37
        };
38
39
        // Binary search for minimum cost
40
        int low = 0, high = n;
41
        while (low < high) {
42
            int mid = (low + high) / 2;
43
            if (check(mid)) {
44
                high = mid;
45
            } else {
46
                low = mid + 1;
47
            }
48
        }
49
        cout << low << endl;
50
    }
51
    return 0;
52
}",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054728
1390054721,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    """"""
3
    Calculate the minimum cost of decommissioning servers with advanced optimization.
4
    5
    Args:
6
        servers (str): Binary string representing rack of servers (0 for idle, 1 for active)
7
    8
    Returns:
9
        int: Minimum possible cost
10
    """"""
11
    n = len(servers)
12
    13
    # Convert string to list of integers for faster processing
14
    servers_list = [int(s) for s in servers]
15
    16
    # Precompute prefix sums for active and idle servers
17
    prefix_active = [0] * (n + 1)
18
    prefix_idle = [0] * (n + 1)
19
    20
    for i in range(n):
21
        prefix_active[i + 1] = prefix_active[i] + servers_list[i]
22
        prefix_idle[i + 1] = prefix_idle[i] + (1 - servers_list[i])
23
    24
    total_active = prefix_active[n]
25
    total_idle = prefix_idle[n]
26
    27
    min_cost = float('inf')
28
    29
    # Optimize the nested loop by reducing redundant calculations
30
    for i in range(n + 1):
31
        # Active servers decommissioned from the beginning
32
        active_decom_begin = prefix_active[i]
33
        34
        # For each prefix (servers removed from beginning), 
35
        # find the optimal suffix to remove
36
        for j in range(n + 1 - i):
37
            # If we've already found a better solution than what's possible here, skip
38
            if min_cost == 0:  # Perfect solution already found
39
                return 0
40
                41
            # Active servers decommissioned from the end
42
            active_decom_end = total_active - prefix_active[n-j] if j > 0 else 0
43
            active_decommissioned = active_decom_begin + active_decom_end
44
            45
            # Idle servers remaining
46
            idle_remaining = total_idle - (prefix_idle[i] + (prefix_idle[n] - prefix_idle[n-j]))
47
            48
            cost = max(idle_remaining, active_decommissioned)
49
            min_cost = min(min_cost, cost)
50
            51
            # Early termination if we've found a perfect solution
52
            if min_cost == 0:
53
                return 0
54
    55
    return min_cost
56
57
def main():
58
    # Read number of test cases
59
    t = int(input().strip())
60
    61
    for _ in range(t):
62
        servers = input().strip()
63
        print(min_decommissioning_cost(servers))
64
65
if __name__ == ""__main__"":
66
    main()",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054721
1390054723,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    min_total_effort = float('inf')
3
    dp = [[float('inf') for _ in range(k+1)] for _ in range(n+1)]
4
    dp[0][0] = 0  
5
    for i in range(1, n+1):
6
        current_strength = strengths[i-1]
7
        for j in range(k+1):
8
            if dp[i-1][j] != float('inf'):
9
                dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength + j)
10
        for j in range(1, k+1):
11
            if dp[i-1][j-1] != float('inf'):
12
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
13
    return min(dp[n])
14
def solve_test_cases():
15
    t = int(input())
16
    results = []
17
    for _ in range(t):
18
        n, k = map(int, input().split())
19
        strengths = list(map(int, input().split()))
20
        min_effort = min_effort_to_breach(n, k, strengths)
21
        results.append(min_effort)
22
    return results
23
if __name__ == ""__main__"":
24
    results = solve_test_cases()
25
    for result in results:
26
        print(result)",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054723
1390054726,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Main {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
8
        9
        int t = Integer.parseInt(br.readLine());
10
        11
        while (t-- > 0) {
12
            String[] nk = br.readLine().split("" "");
13
            int n = Integer.parseInt(nk[0]);
14
            int k = Integer.parseInt(nk[1]);
15
            16
            String[] input = br.readLine().split("" "");
17
            int[] a = new int[n];
18
            for (int i = 0; i < n; i++) a[i] = Integer.parseInt(input[i]);
19
            20
            bw.write(minEffort(n, k, a) + ""\n"");
21
        }
22
        23
        bw.flush();
24
        bw.close();
25
        br.close();
26
    }
27
28
    static int minEffort(int n, int k, int[] a) {
29
        int[] dp = new int[k + 2];
30
        31
        for (int i = n - 1; i >= 0; i--) {
32
            int[] next = new int[k + 2];
33
            for (int skip = 0; skip <= k; skip++) {
34
                int take = a[i] + skip + dp[skip]; 
35
                int leave = (skip < k) ? dp[skip + 1] : Integer.MAX_VALUE; 
36
                next[skip] = Math.min(take, leave);
37
            }
38
            dp = next;
39
        }
40
        41
        return dp[0];
42
    }
43
}
44",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054726
1390054717,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        min_cost = float('inf')
7
        8
        # Iterate over all possible prefixes to remove
9
        for start in range(n + 1):
10
            # Iterate over all possible suffixes to remove
11
            for end in range(n - start + 1):
12
                # Remaining servers after removing `start` from the front and `end` from the back
13
                remaining = servers[start:n-end] if end > 0 else servers[start:n]
14
                15
                # Count remaining idle servers (0's) and decommissioned active servers (1's)
16
                remaining_idle = remaining.count('0')
17
                decommissioned_active = (servers[:start] + servers[n-end:]).count('1')
18
                19
                # Calculate the cost
20
                cost = max(remaining_idle, decommissioned_active)
21
                22
                # Update the minimum cost
23
                min_cost = min(min_cost, cost)
24
        25
        results.append(min_cost)
26
    27
    return results
28
29
# Input reading
30
T = int(input())
31
test_cases = [input().strip() for _ in range(T)]
32
33
# Get results
34
results = min_decommissioning_cost(test_cases)
35
36
# Output results
37
for result in results:
38
    print(result)",69,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054717
