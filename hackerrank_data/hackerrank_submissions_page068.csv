submission_id,username,problem_name,language,code,page,url
1390054755,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        res = []
8
        dq = deque()
9
        10
        # Process first k elements
11
        for i in range(k):
12
            if arr[i] < 0:
13
                dq.append(i)
14
        15
        # Process the rest of the elements
16
        for i in range(n - k + 1):
17
            # Add the first faulty element or 0 if none
18
            res.append(arr[dq[0]] if dq else 0)
19
            20
            # Remove elements that are out of the current window
21
            if dq and dq[0] == i:
22
                dq.popleft()
23
            24
            # Add the next element
25
            if i + k < n and arr[i + k] < 0:
26
                dq.append(i + k)
27
        28
        results.append("" "".join(map(str, res)))
29
    30
    return results
31
32
# Read input
33
t = int(input())
34
test_cases = []
35
36
for _ in range(t):
37
    n, k = map(int, input().split())
38
    arr = list(map(int, input().split()))
39
    test_cases.append((n, k, arr))
40
41
# Process and output results
42
for result in earliest_faulty_readings(test_cases):
43
    print(result)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054755
1390054759,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
3
    # Create all possible scenarios of skipping up to k firewalls
4
5
    min_total_effort = float('inf')
6
7
    8
9
    # Try all combinations of which firewalls to skip
10
11
    # Since k can be up to 10 and n up to 100, we can't try all 2^n combinations
12
13
    # Instead, we'll use dynamic programming
14
15
    16
17
    # dp[i][j] = min effort to breach first i firewalls while skipping exactly j of them
18
19
    dp = [[float('inf') for _ in range(k+1)] for _ in range(n+1)]
20
21
    dp[0][0] = 0  # Base case: no effort to breach 0 firewalls with 0 skips
22
23
    24
25
    for i in range(1, n+1):
26
27
        current_strength = strengths[i-1]
28
29
        30
31
        # Don't skip the current firewall
32
33
        for j in range(k+1):
34
35
            if dp[i-1][j] != float('inf'):
36
37
                # Current firewall strength increases by j (number of previously skipped firewalls)
38
39
                dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength + j)
40
41
        42
43
        # Skip the current firewall
44
45
        for j in range(1, k+1):
46
47
            if dp[i-1][j-1] != float('inf'):
48
49
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
50
51
    52
53
    # Find minimum across all possible numbers of skips
54
55
    return min(dp[n])
56
57
def solve_test_cases():
58
59
    t = int(input())  # Number of test cases
60
61
    62
63
    results = []
64
65
    for _ in range(t):
66
67
        n, k = map(int, input().split())
68
69
        strengths = list(map(int, input().split()))
70
71
        72
73
        min_effort = min_effort_to_breach(n, k, strengths)
74
75
        results.append(min_effort)
76
77
    78
79
    return results
80
81
# Main execution
82
83
if __name__ == ""__main__"":
84
85
    results = solve_test_cases()
86
87
    for result in results:
88
89
        print(result)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054759
1390054760,unknown,unknown,unknown,"1
#include <iostream>
2
#include <string>
3
#include <algorithm>
4
#include <vector>
5
6
using namespace std;
7
8
int solve() {
9
    string s;
10
    cin >> s;
11
    int n = s.length();
12
    int min_cost = n;
13
14
    for (int i = 0; i <= n; ++i) {
15
        for (int j = i; j <= n; ++j) {
16
            int remaining_zeros = 0;
17
            for (int k = i; k < j; ++k) {
18
                if (s[k] == '0') {
19
                    remaining_zeros++;
20
                }
21
            }
22
23
            int removed_ones = 0;
24
            for (int k = 0; k < i; ++k) {
25
                if (s[k] == '1') {
26
                    removed_ones++;
27
                }
28
            }
29
            for (int k = j; k < n; ++k) {
30
                if (s[k] == '1') {
31
                    removed_ones++;
32
                }
33
            }
34
35
            min_cost = min(min_cost, max(remaining_zeros, removed_ones));
36
        }
37
    }
38
    return min_cost;
39
}
40
41
int main() {
42
    int t;
43
    cin >> t;
44
    while (t--) {
45
        cout << solve() << endl;
46
    }
47
    return 0;
48
}",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054760
1390054750,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
3
    4
    for j in range(k + 1):
5
        dp[0][j] = 0
6
    7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            if j > 0:
10
                dp[i][j] = dp[i-1][j-1]
11
            12
            current_strength = strengths[i-1] + j 
13
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
14
    15
    return min(dp[n])
16
17
def solve():
18
    t = int(input())
19
    results = []
20
    21
    for _ in range(t):
22
        n, k = map(int, input().split())
23
        strengths = list(map(int, input().split()))
24
        results.append(min_effort_to_breach(n, k, strengths))
25
    26
    for result in results:
27
        print(result)
28
29
solve()",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054750
1390054753,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        result = []
8
        dq = deque()
9
        10
        # Process first window
11
        for i in range(k):
12
            if arr[i] < 0:
13
                dq.append(i)
14
        15
        # Store the first result
16
        result.append(arr[dq[0]] if dq else 0)
17
        18
        # Process remaining windows
19
        for i in range(k, n):
20
            # Remove elements no longer in window
21
            if dq and dq[0] <= i - k:
22
                dq.popleft()
23
            24
            # Add new element if it's faulty
25
            if arr[i] < 0:
26
                dq.append(i)
27
            28
            # Store result for current window
29
            result.append(arr[dq[0]] if dq else 0)
30
        31
        results.append("" "".join(map(str, result)))
32
    33
    return results
34
35
# Read input
36
t = int(input())
37
test_cases = []
38
for _ in range(t):
39
    n, k = map(int, input().split())
40
    arr = list(map(int, input().split()))
41
    test_cases.append((n, k, arr))
42
43
# Compute and print output
44
for res in earliest_faulty_readings(test_cases):
45
    print(res)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054753
1390054751,unknown,unknown,unknown,"1
import sys
2
data = sys.stdin.read().split()
3
if not data:
4
    exit()
5
t = int(data[0])
6
ptr = 1
7
res = []
8
for _ in range(t):
9
    n = int(data[ptr]); k = int(data[ptr+1]); ptr += 2
10
    arr = list(map(int, data[ptr:ptr+n])); ptr += n
11
    total = sum(arr)
12
    b = [arr[i] - ((n - 1) - i) for i in range(n)]
13
    b.sort(reverse=True)
14
    best = 0
15
    s = 0
16
    for x in range(1, min(k, n) + 1):
17
        s += b[x-1]
18
        cur = s + (x * (x - 1)) // 2
19
        if cur > best:
20
            best = cur
21
    res.append(str(total - best))
22
sys.stdout.write(""\n"".join(res))",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054751
1390054743,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    if k >= n:
3
        return 0
4
        5
    impacts = []
6
    7
    for i in range(n):
8
        impact = strengths[i] - (n - i - 1)
9
        impacts.append((impact, i))
10
    11
    impacts.sort(reverse=True)
12
    13
    to_skip = set(impacts[i][1] for i in range(k))
14
    15
    total_effort = 0
16
    penalty = 0
17
    18
    for i in range(n):
19
        if i in to_skip:
20
            penalty += 1
21
        else:
22
            total_effort += strengths[i] + penalty
23
    24
    return total_effort
25
26
def solve_test_cases():
27
    t = int(input())
28
    results = []
29
    30
    for _ in range(t):
31
        n, k = map(int, input().split())
32
        strengths = list(map(int, input().split()))
33
        results.append(min_effort_to_breach(n, k, strengths))
34
    35
    return results
36
37
def main():
38
    results = solve_test_cases()
39
    40
    for result in results:
41
        print(result)
42
43
if __name__ == ""__main__"":
44
    main()
45",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054743
1390054746,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, fw):
2
    total_effort = sum(fw)
3
    min_effort = total_effort
4
5
    for i in range(n - k + 1):  
6
        skipped_penalty = sum(fw[i:i + k])
7
        added_penalty = (n - (i + k)) * k  
8
        min_effort = min(min_effort, total_effort - skipped_penalty + added_penalty)
9
10
    return min_effort
11
12
T = int(input())  
13
for _ in range(T):
14
    n, k = map(int, input().split())
15
    fw = list(map(int, input().split()))
16
    print(min_effort_to_breach(n, k, fw))
17",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054746
1390054747,unknown,unknown,unknown,"1
def min_operations(T, test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        6
        prefix_0 = [0] * (n + 1)
7
        prefix_1 = [0] * (n + 1)
8
        9
        for i in range(1, n + 1):
10
            prefix_0[i] = prefix_0[i - 1] + (1 if s[i - 1] == '0' else 0)
11
            prefix_1[i] = prefix_1[i - 1] + (1 if s[i - 1] == '1' else 0)
12
        13
        def check(k):
14
            l = 0
15
            for r in range(n):
16
                while l <= r and prefix_0[r + 1] - prefix_0[l] > k:
17
                    l += 1
18
                if l <= r and prefix_1[l] + (prefix_1[n] - prefix_1[r + 1]) <= k:
19
                    return True
20
            21
            return prefix_1[n] <= k
22
        23
        low, high = 0, n
24
        while low < high:
25
            mid = (low + high) // 2
26
            if check(mid):
27
                high = mid
28
            else:
29
                low = mid + 1
30
        31
        results.append(low)
32
    33
    return results
34
35
36
37
T = int(input())
38
test_cases = [input().strip() for _ in range(T)]
39
40
results = min_operations(T, test_cases)
41
for res in results:
42
    print(res)
43",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054747
1390054740,unknown,unknown,unknown,"1
def earliest_faulty_reading(test_cases):
2
    results = []
3
    4
    for n, k, arr in test_cases:
5
        batch_results = []
6
        7
        for i in range(n - k + 1):
8
            batch = arr[i:i + k]
9
            faulty = next((x for x in batch if x < 0), 0)
10
            batch_results.append(faulty)
11
        12
        results.append(batch_results)
13
    14
    return results
15
16
17
if ___name___ == ""___main___"":
18
    t = int(input())
19
    test_cases = []
20
    21
    for _ in range(t):
22
        n, k = map(int, input().strip().split())
23
        arr = list(map(int, input().strip().split()))
24
        test_cases.append((n, k, arr))
25
26
    results = earliest_faulty_reading(test_cases)
27
    28
    for res in results:
29
        print(*res)",68,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054740
