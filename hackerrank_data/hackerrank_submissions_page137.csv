submission_id,username,problem_name,language,code,page,url
1390053438,unknown,unknown,unknown,"1
def main():
2
    import sys
3
    input = sys.stdin.read
4
    data = input().split()
5
    6
    # Read number of test cases
7
    T = int(data[0])
8
    index = 1
9
    10
    # Process each test case
11
    for _ in range(T):
12
        s = data[index]
13
        index += 1
14
        n = len(s)
15
        16
        # Compute prefix sums for '0's and '1's
17
        prefix0 = [0] * (n + 1)  # Number of '0's up to index i
18
        prefix1 = [0] * (n + 1)  # Number of '1's up to index i
19
        for i in range(n):
20
            prefix0[i + 1] = prefix0[i] + (1 if s[i] == '0' else 0)
21
            prefix1[i + 1] = prefix1[i] + (1 if s[i] == '1' else 0)
22
        23
        # Initial minimum cost: cost of removing entire string
24
        min_cost = prefix1[n]
25
        26
        # Iterate over all possible ending indices b
27
        for b in range(n):
28
            # '0's up to b, '1's from b+1 to end
29
            zeros_up_to_b = prefix0[b + 1]
30
            ones_after_b = prefix1[n] - prefix1[b + 1]
31
            32
            # Cost function for a given starting index a
33
            def cost(a):
34
                zeros_remaining = zeros_up_to_b - prefix0[a]
35
                ones_removed = prefix1[a] + ones_after_b
36
                return max(zeros_remaining, ones_removed)
37
            38
            # Ternary search to find optimal a for this b
39
            left, right = 0, b
40
            while right - left > 2:
41
                m1 = left + (right - left) // 3
42
                m2 = right - (right - left) // 3
43
                if cost(m1) < cost(m2):
44
                    right = m2
45
                else:
46
                    left = m1
47
            48
            # Check remaining points for minimum cost
49
            local_min = min(cost(a) for a in range(left, right + 1))
50
            min_cost = min(min_cost, local_min)
51
        52
        # Output the minimum cost for this test case
53
        print(min_cost)
54
55
if __name__ == ""__main__"":
56
    main()",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053438
1390053435,unknown,unknown,unknown,"1
def solve():
2
    server_rack = input().strip()
3
    n = len(server_rack)
4
    ones_prefix = [0] * (n + 1)
5
    for i in range(n):
6
        ones_prefix[i+1] = ones_prefix[i] + (1 if server_rack[i] == '1' else 0)
7
8
    min_cost = float('inf')
9
    for left_remove_count in range(n + 1):
10
        for right_remove_count in range(n - left_remove_count + 1):
11
            active_removed = ones_prefix[left_remove_count] + (ones_prefix[n] - ones_prefix[n - right_remove_count])
12
            remaining_rack = server_rack[left_remove_count:n - right_remove_count]
13
            idle_remaining = 0
14
            for char in remaining_rack:
15
                if char == '0':
16
                    idle_remaining += 1
17
            cost = max(idle_remaining, active_removed)
18
            min_cost = min(min_cost, cost)
19
    print(min_cost)
20
21
T = int(input())
22
for _ in range(T):
23
    solve()",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053435
1390053439,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int t = sc.nextInt();
8
        while (t-- > 0) {
9
            int n = sc.nextInt(), k = sc.nextInt();
10
            int[] s = new int[n];
11
            for (int i = 0; i < n; i++) s[i] = sc.nextInt();
12
            System.out.println(minEffort(s, n, k));
13
        }
14
        sc.close();
15
    }
16
17
    private static long minEffort(int[] s, int n, int k) {
18
        if (k >= n) return 0;
19
20
        long[][] dp = new long[n + 1][k + 1];
21
        for (long[] row : dp) Arrays.fill(row, Long.MAX_VALUE / 2);
22
        dp[0][0] = 0;
23
24
        for (int i = 0; i < n; i++) {
25
            for (int j = 0; j <= k; j++) {
26
                if (dp[i][j] == Long.MAX_VALUE / 2) continue;
27
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j] + s[i] + j);
28
                if (j < k) dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i][j]);
29
            }
30
        }
31
32
        long minEffort = Long.MAX_VALUE;
33
        for (int j = 0; j <= k; j++) minEffort = Math.min(minEffort, dp[n][j]);
34
35
        return minEffort;
36
    }
37
}
38",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053439
1390053431,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053431
1390053432,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053432
1390053424,unknown,unknown,unknown,"1
def min_effort(firewalls, n, k):
2
    if k >= n:
3
        return 0
4
    5
    indexed_firewalls = [(i, firewalls[i]) for i in range(n)]
6
    indexed_firewalls.sort(key=lambda x: x[1], reverse=True)
7
    8
    skip = [False] * n
9
    for i in range(k):
10
        skip[indexed_firewalls[i][0]] = True
11
    12
    total_effort = 0
13
    skipped_count = 0
14
    15
    for i in range(n):
16
        if skip[i]:
17
            skipped_count += 1
18
        else:
19
            total_effort += firewalls[i] + skipped_count
20
    21
    return total_effort
22
23
if __name__ == ""__main__"":
24
    import sys
25
    input = sys.stdin.read
26
    data = input().split('\n')
27
    28
    t = int(data[0])
29
    index = 1
30
    31
    results = []
32
    for _ in range(t):
33
        n, k = map(int, data[index].split())
34
        firewalls = list(map(int, data[index + 1].split()))
35
        results.append(str(min_effort(firewalls, n, k)))
36
        index += 2
37
    38
    print(""\n"".join(results))",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053424
1390053428,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultySensor {
4
    public static List<Integer> earliestFaults(int[] arr, int k) {
5
        List<Integer> result = new ArrayList<>();
6
        Deque<Integer> deque = new LinkedList<>();
7
8
        for (int i = 0; i < arr.length; i++) {
9
            // Remove out-of-window elements
10
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
11
                deque.poll();
12
            }
13
14
            // Add new faulty readings
15
            if (arr[i] < 0) {
16
                deque.offer(i);
17
            }
18
19
            // Collect results for valid windows
20
            if (i >= k - 1) {
21
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
22
            }
23
        }
24
        return result;
25
    }
26
27
    public static void main(String[] args) {
28
        Scanner scanner = new Scanner(System.in);
29
        int t = scanner.nextInt(); // Number of test cases
30
31
        while (t-- > 0) {
32
            int n = scanner.nextInt(); // Array size
33
            int k = scanner.nextInt(); // Batch size
34
            int[] arr = new int[n];
35
36
            for (int i = 0; i < n; i++) {
37
                arr[i] = scanner.nextInt();
38
            }
39
40
            // Compute and print results
41
            List<Integer> faults = earliestFaults(arr, k);
42
            for (int val : faults) {
43
                System.out.print(val + "" "");
44
            }
45
            System.out.println();
46
        }
47
        scanner.close();
48
    }
49
}",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053428
1390053427,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void findEarliestFaultyReadings(int *arr, int n, int k) {
5
    int *result = (int *)malloc((n - k + 1) * sizeof(int));
6
    int front = 0, rear = 0;
7
    int queue[n];
8
    9
    // Process the first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) {
12
            queue[rear++] = i;
13
        }
14
    }
15
    16
    // Store result for the first batch
17
    result[0] = (front < rear) ? arr[queue[front]] : 0;
18
    19
    // Process the remaining windows
20
    for (int i = k; i < n; i++) {
21
        // Remove elements not within the window
22
        while (front < rear && queue[front] <= i - k) {
23
            front++;
24
        }
25
        26
        // Add new element if it's faulty
27
        if (arr[i] < 0) {
28
            queue[rear++] = i;
29
        }
30
        31
        // Store result for current batch
32
        result[i - k + 1] = (front < rear) ? arr[queue[front]] : 0;
33
    }
34
    35
    // Print the result
36
    for (int i = 0; i < n - k + 1; i++) {
37
        printf(""%d "", result[i]);
38
    }
39
    printf(""\n"");
40
    41
    free(result);
42
}
43
44
int main() {
45
    int t;
46
    scanf(""%d"", &t);
47
    48
    while (t--) {
49
        int n, k;
50
        scanf(""%d %d"", &n, &k);
51
        int arr[n];
52
        53
        for (int i = 0; i < n; i++) {
54
            scanf(""%d"", &arr[i]);
55
        }
56
        57
        findEarliestFaultyReadings(arr, n, k);
58
    }
59
    60
    return 0;
61
}",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053427
1390053423,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    if k == n:
3
        return 0
4
    if k == 0:
5
        return sum(firewalls)
6
    min_effort = float('inf')
7
    for i in range(n):
8
   9
        skipped = 0
10
        effort = 0
11
        for j in range(n):
12
            if skipped < k and j >= i:
13
                skipped += 1
14
            else:
15
                effort += firewalls[j] + skipped
16
17
        min_effort = min(min_effort, effort)
18
19
    return min_effort
20
21
T = int(input().strip())
22
results = []
23
24
for _ in range(T):
25
    n, k = map(int, input().split())
26
    firewalls = list(map(int, input().split()))
27
    results.append(min_effort(n, k, firewalls))
28
29
for res in results:
30
    print(res)",137,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053423
