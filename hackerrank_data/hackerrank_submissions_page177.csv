submission_id,username,problem_name,language,code,page,url
1390052495,unknown,unknown,unknown,"1
from collections import deque
2
def earliest_faculty_readings(arr,k):
3
    dq,result=deque(),[]
4
    for i in range (len(arr)):
5
        if dq and dq[0]<i-k+1:
6
            dq.popleft()
7
        if arr[i]<0:
8
            dq.append(i)
9
        if i>=k-1:
10
            result.append(arr[dq[0]] if dq else 0)
11
    return result
12
t=int(input())
13
for _ in range(t):
14
    n,k=map(int,input().split())
15
    arr=list(map(int,input().split()))
16
    print(*earliest_faculty_readings(arr,k))
17
        ",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052495
1390052497,unknown,unknown,unknown,"1
def solve_breach_problem(n, k, firewall_strengths):
2
    # Create a 2D dp array where:
3
    # dp[i][j] = minimum effort needed to breach first i firewalls 
4
    # after skipping exactly j firewalls
5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    7
    # Base case: No firewall, no effort
8
    dp[0][0] = 0
9
    10
    for i in range(1, n + 1):
11
        current_strength = firewall_strengths[i - 1]
12
        13
        for j in range(k + 1):
14
            # Option 1: Don't skip the current firewall (if j firewalls already skipped)
15
            if j <= i - 1:  # We can only skip j firewalls out of i-1 previous ones
16
                # Current firewall strength increases by j (number of previously skipped firewalls)
17
                dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength + j)
18
            19
            # Option 2: Skip the current firewall (if we haven't used all our skips)
20
            if j > 0:
21
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
22
    23
    # Find minimum effort considering all possible numbers of skipped firewalls
24
    return min(dp[n])
25
26
def main():
27
    test_cases = int(input())
28
    29
    for _ in range(test_cases):
30
        n, k = map(int, input().split())
31
        firewall_strengths = list(map(int, input().split()))
32
        33
        min_effort = solve_breach_problem(n, k, firewall_strengths)
34
        print(min_effort)
35
36
if __name__ == ""__main__"":
37
    main()",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052497
1390052498,unknown,unknown,unknown,"1
import sys
2
3
def min_effort_to_breach(test_cases):
4
    results = []
5
    6
    for n, k, firewalls in test_cases:
7
        total_effort = sum(firewalls)
8
        min_effort = total_effort
9
10
        prefix_sum = [0] * (n + 1)
11
        for i in range(n):
12
            prefix_sum[i + 1] = prefix_sum[i] + firewalls[i]
13
14
        for i in range(n - k + 1):
15
            skipped_sum = prefix_sum[i + k] - prefix_sum[i]  
16
            increased_effort = (n - (i + k)) * k  
17
            min_effort = min(min_effort, total_effort - skipped_sum + increased_effort)
18
19
        results.append(str(min_effort))
20
    21
    return ""\n"".join(results)
22
23
input = sys.stdin.read
24
data = input().split()
25
t = int(data[0])
26
index = 1
27
test_cases = []
28
29
for _ in range(t):
30
    n, k = int(data[index]), int(data[index + 1])
31
    firewalls = list(map(int, data[index + 2: index + 2 + n]))
32
    index += 2 + n
33
    test_cases.append((n, k, firewalls))
34
35
print(min_effort_to_breach(test_cases))
36",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052498
1390052490,unknown,unknown,unknown,"1
def minimum_effort_to_breach_firewalls(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, firewalls = case
5
        min_effort = float('inf')  # Initialize with a large value
6
7
        for i in range(1 << n):  # Iterate through all possible subsets of firewalls to skip
8
            skipped_count = 0
9
            current_effort = 0
10
            temp_firewalls = firewalls[:]  # Create a copy to modify
11
12
            # Determine which firewalls are skipped based on the bits in i
13
            skipped_indices = []
14
            for j in range(n):
15
                if (i >> j) & 1:
16
                    skipped_count += 1
17
                    skipped_indices.append(j)
18
            19
            if skipped_count <= k:
20
                effort = 0
21
                skipped_indices.sort()
22
                23
                #Calculate effort with increased strength for subsequent firewalls
24
                for j in range(n):
25
                    if j in skipped_indices:
26
                        continue
27
                    else:
28
                        increase = 0
29
                        skipped_before = 0
30
                        for skip_idx in skipped_indices:
31
                            if skip_idx < j:
32
                                skipped_before += 1
33
                        effort += firewalls[j] + skipped_before
34
                min_effort = min(min_effort, effort)
35
36
        results.append(min_effort)
37
    return results
38
39
40
# Example Usage (based on the sample input):
41
T = int(input())
42
test_cases = []
43
for _ in range(T):
44
    n, k = map(int, input().split())
45
    firewalls = list(map(int, input().split()))
46
    test_cases.append((n, k, firewalls))
47
48
results = minimum_effort_to_breach_firewalls(test_cases)
49
for result in results:
50
    print(result)
51",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052490
1390052492,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
    public static void main(String[] args) {
9
        Scanner scanner=new Scanner(System.in);
10
        int testCases=scanner.nextInt();
11
        12
        for(int t=0;t<testCases;t++){
13
            int n=scanner.nextInt();
14
            int k=scanner.nextInt();
15
            int[] arr=new int[n];
16
            17
            for(int i=0;i<n;i++) arr[i]=scanner.nextInt();
18
            19
            List<Integer> result=new ArrayList<>();
20
            for(int i=0;i<=n-k;i++) {
21
                int earliestFault=0;
22
                for(int j=i;j<i+k;j++) {
23
                    if(arr[j]<0) {
24
                        earliestFault=arr[j];
25
                        break;
26
                    }
27
                }
28
                result.add(earliestFault);
29
            }
30
            for(int res:result) System.out.print(res+"" "");
31
            System.out.println();
32
        }
33
        scanner.close();
34
    }
35
}
36",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052492
1390052486,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # For each possible remaining substring (after removing prefixes and suffixes)
5
    min_cost = float('inf')
6
    7
    # Try all possible substrings (start, end+1)
8
    for start in range(n + 1):
9
        for end in range(start, n + 1):
10
            # Calculate the substring that remains after decommissioning
11
            remaining = servers[start:end]
12
            13
            # Calculate metrics
14
            active_removed = servers[:start].count('1') + servers[end:].count('1')
15
            idle_remaining = remaining.count('0')
16
            17
            # Cost is the maximum of idle servers remaining and active servers removed
18
            cost = max(idle_remaining, active_removed)
19
            20
            # Update minimum cost
21
            min_cost = min(min_cost, cost)
22
    23
    return min_cost
24
25
# Process test cases
26
t = int(input())
27
for _ in range(t):
28
    servers = input().strip()
29
    print(min_decommissioning_cost(servers))",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052486
1390052476,unknown,unknown,unknown,"1
def min_effort_to_breach(T, test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        if k == n:
6
            results.append(""0"")  # If all firewalls can be skipped, effort is 0
7
            continue
8
        9
        total_effort = sum(firewalls)
10
        min_effort = total_effort
11
        12
        # Compute initial sum of first k firewalls
13
        window_sum = sum(firewalls[:k])
14
        15
        # Iterate through possible skip windows
16
        for i in range(n - k + 1):
17
            skipped_firewalls = k
18
            increased_security = sum(range(1, skipped_firewalls + 1))  # Penalty for skipping
19
            20
            new_effort = total_effort - window_sum + increased_security
21
            min_effort = min(min_effort, new_effort)
22
            23
            # Move the sliding window
24
            if i + k < n:
25
                window_sum = window_sum - firewalls[i] + firewalls[i + k]
26
        27
        results.append(str(min_effort))
28
29
    return ""\n"".join(results)
30
31
# Read input
32
T = int(input())
33
test_cases = []
34
35
for _ in range(T):
36
    n, k = map(int, input().split())
37
    firewalls = list(map(int, input().split()))
38
    test_cases.append((n, k, firewalls))
39
40
# Compute and print results
41
print(min_effort_to_breach(T, test_cases))
42",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052476
1390052479,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
    8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    result.append(arr[dq[0]] if dq else 0)
13
    14
    for i in range(k, n):
15
16
        while dq and dq[0] <= i - k:
17
            dq.popleft()
18
        19
        if arr[i] < 0:
20
            dq.append(i)
21
        22
        result.append(arr[dq[0]] if dq else 0)
23
    24
    return result
25
26
def process_test_cases(t, test_cases):
27
    for n, k, arr in test_cases:
28
        print(*earliest_faulty_readings(arr, k))
29
30
31
t = int(input())
32
test_cases = []
33
for _ in range(t):
34
    n, k = map(int, input().split())
35
    arr = list(map(int, input().split()))
36
    test_cases.append((n, k, arr))
37
38
process_test_cases(t, test_cases)
39",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052479
1390052485,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
5
    public static List<List<Integer>> f(int t, List<int[]> a, List<int[]> s) {
6
        List<List<Integer>> r = new ArrayList<>();
7
8
        for (int i = 0; i < t; i++) {
9
            int n = s.get(i)[0], k = s.get(i)[1];
10
            int[] x = a.get(i);
11
            List<Integer> res = new ArrayList<>();
12
            Deque<Integer> d = new LinkedList<>();
13
14
            for (int j = 0; j < k; j++) {
15
                if (x[j] < 0) d.add(j);
16
            }
17
            res.add(d.isEmpty() ? 0 : x[d.peek()]);
18
19
            for (int j = k; j < n; j++) {
20
                if (!d.isEmpty() && d.peek() <= j - k) d.poll();
21
                if (x[j] < 0) d.add(j);
22
                res.add(d.isEmpty() ? 0 : x[d.peek()]);
23
            }
24
            r.add(res);
25
        }
26
27
        return r;
28
    }
29
30
    public static void main(String[] args) {
31
        Scanner sc = new Scanner(System.in);
32
        int t = sc.nextInt();
33
        List<int[]> a = new ArrayList<>(), s = new ArrayList<>();
34
35
        for (int i = 0; i < t; i++) {
36
            int n = sc.nextInt(), k = sc.nextInt();
37
            s.add(new int[]{n, k});
38
            int[] x = new int[n];
39
            for (int j = 0; j < n; j++) x[j] = sc.nextInt();
40
            a.add(x);
41
        }
42
43
        List<List<Integer>> o = f(t, a, s);
44
        for (List<Integer> l : o) {
45
            for (int v : l) System.out.print(v + "" "");
46
            System.out.println();
47
        }
48
        sc.close();
49
    }
50
}
51",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052485
1390052469,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int t = scanner.nextInt();  // Number of testcases
9
        10
        // Process each testcase
11
        while (t-- > 0) {
12
            int n = scanner.nextInt();  // Size of array
13
            int k = scanner.nextInt();  // Batch size
14
            int[] arr = new int[n];
15
            16
            // Reading array elements
17
            for (int i = 0; i < n; i++) {
18
                arr[i] = scanner.nextInt();
19
            }
20
            21
            List<Integer> result = earliestFaults(arr, k);
22
            // Printing the result for the current testcase
23
            for (int res : result) {
24
                System.out.print(res + "" "");
25
            }
26
            System.out.println();
27
        }
28
    }
29
30
    // Function to calculate the earliest faults for consecutive batches of size k
31
    private static List<Integer> earliestFaults(int[] arr, int k) {
32
        List<Integer> result = new ArrayList<>();
33
        Deque<Integer> deque = new LinkedList<>();
34
        35
        // Iterating through the array
36
        for (int i = 0; i < arr.length; i++) {
37
            // Remove elements which are no longer in the current window
38
            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
39
                deque.pollFirst();
40
            }
41
            42
            // Add the current element index to the deque if it's a faulty component
43
            if (arr[i] < 0) {
44
                deque.addLast(i);
45
            }
46
            47
            // For the first batch of size k and onward, calculate the earliest fault
48
            if (i >= k - 1) {
49
                if (!deque.isEmpty()) {
50
                    result.add(arr[deque.peekFirst()]);  // Add the earliest fault in the batch
51
                } else {
52
                    result.add(0);  // No faults in the current batch
53
                }
54
            }
55
        }
56
        57
        return result;
58
    }
59
}
60",177,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052469
