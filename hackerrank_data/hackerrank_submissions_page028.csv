submission_id,username,problem_name,language,code,page,url
1390055614,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    dp[0][0] = 0
7
8
    for i in range(1, n + 1):
9
        for j in range(k + 1):
10
            # Option 1: Don't skip the current firewall
11
            dp[i][j] = min(dp[i][j], dp[i - 1][j] + a[i - 1] + j)
12
13
            # Option 2: Skip the current firewall (if possible)
14
            if j > 0:
15
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
16
17
    min_effort = float('inf')
18
    for j in range(k + 1):
19
        min_effort = min(min_effort, dp[n][j])
20
21
    print(min_effort)
22
23
24
t = int(input())
25
for _ in range(t):
26
    solve()",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055614
1390055612,unknown,unknown,unknown,"1
def compute_min_cost(s):
2
    T = s.count('1')
3
    if T == 0:
4
        return 0
5
    n = len(s)
6
    7
    # Compute x_max_case1: max number of 1's in window of length T
8
    x_max_case1 = 0
9
    if T <= n:
10
        current = sum(1 for c in s[:T] if c == '1')
11
        x_max_case1 = current
12
        for i in range(1, n - T + 1):
13
            if s[i-1] == '1':
14
                current -= 1
15
            if s[i + T - 1] == '1':
16
                current += 1
17
            if current > x_max_case1:
18
                x_max_case1 = current
19
    20
    # Compute x_max_case2: max of min(run_length, T-1) for all runs of 1's
21
    x_max_case2 = 0
22
    current_run = 0
23
    for c in s:
24
        if c == '1':
25
            current_run += 1
26
        else:
27
            if current_run > 0:
28
                candidate = min(current_run, T-1)
29
                if candidate > x_max_case2:
30
                    x_max_case2 = candidate
31
                current_run = 0
32
    # Check the last run
33
    if current_run > 0:
34
        candidate = min(current_run, T-1)
35
        if candidate > x_max_case2:
36
            x_max_case2 = candidate
37
    38
    case1_cost = T - x_max_case1
39
    case2_cost = T - x_max_case2
40
    return min(case1_cost, case2_cost)
41
42
def main():
43
    import sys
44
    input = sys.stdin.read().split()
45
    T_cases = int(input[0])
46
    for i in range(1, T_cases + 1):
47
        s = input[i]
48
        print(compute_min_cost(s))
49
50
if __name__ == ""__main__"":
51
    main()",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055612
1390055615,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
    5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):
8
        skipped = []
9
        efforts = []
10
        11
        for j in range(n):
12
            if (i >> j) & 1:
13
                skipped.append(j)
14
            else:
15
                efforts.append(j)
16
        17
        if len(skipped) <= k:
18
            effort = 0
19
            skipped_count = 0
20
            for j in range(n):
21
                if j in skipped:
22
                    skipped_count += 1
23
                else:
24
                    effort += a[j] + skipped_count
25
            min_effort = min(min_effort, effort)
26
    27
    print(min_effort)
28
    29
t = int(input())
30
for _ in range(t):
31
    solve()",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055615
1390055605,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    int cases;
12
    cin >> cases;
13
    14
    while (cases--) {
15
        int n, k;
16
        cin >> n >> k;
17
        vector<int> array(n);
18
        19
        for (int i = 0; i < n; i++) {
20
            cin >> array[i];
21
        }
22
23
        for (int i = 0; i <= n - k; i++) {
24
            int neg = 0;
25
            for (int j = i; j < i + k; j++) {
26
                if (array[j] < 0) {
27
                    neg = array[j];
28
                    break;
29
                }
30
            }
31
            cout << neg << "" "";
32
        }
33
        cout << endl;
34
    }
35
36
    return 0;
37
}",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055605
1390055607,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommissioning {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt(); // Number of test cases
7
        scanner.nextLine(); // Consume the newline character
8
9
        for (int t = 0; t < T; t++) {
10
            String servers = scanner.nextLine(); // Binary string representing the server rack
11
            int n = servers.length();
12
            int minCost = Integer.MAX_VALUE;
13
14
            // Precompute prefix sums for 0's and 1's
15
            int[] prefixZeros = new int[n + 1];
16
            int[] prefixOnes = new int[n + 1];
17
            for (int i = 0; i < n; i++) {
18
                prefixZeros[i + 1] = prefixZeros[i] + (servers.charAt(i) == '0' ? 1 : 0);
19
                prefixOnes[i + 1] = prefixOnes[i] + (servers.charAt(i) == '1' ? 1 : 0);
20
            }
21
22
            // Iterate over all possible decommissioning plans
23
            for (int left = 0; left <= n; left++) {
24
                for (int right = 0; right <= n - left; right++) {
25
                    // Calculate remaining 0's in the middle substring
26
                    int remainingZeros = prefixZeros[n - right] - prefixZeros[left];
27
                    // Calculate decommissioned 1's (from left and right)
28
                    int decommissionedOnes = prefixOnes[left] + (prefixOnes[n] - prefixOnes[n - right]);
29
                    // Compute the cost
30
                    int cost = Math.max(remainingZeros, decommissionedOnes);
31
                    // Update the minimum cost
32
                    if (cost < minCost) {
33
                        minCost = cost;
34
                    }
35
                }
36
            }
37
38
            System.out.println(minCost);
39
        }
40
        scanner.close();
41
    }
42
}",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055607
1390055609,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
#include <climits>
5
6
using namespace std;
7
8
vector<int> min_decommissioning_cost(const vector<string>& test_cases) {
9
    vector<int> results;
10
    11
    for (const string& servers : test_cases) {
12
        int n = servers.size();
13
        int total_0 = 0;
14
        for (char c : servers) {
15
            if (c == '0') total_0++;
16
        }
17
        int total_1 = n - total_0;
18
        19
        // Precompute prefix counts for 0s and 1s
20
        vector<int> prefix_0(n + 1, 0), prefix_1(n + 1, 0);
21
        for (int i = 1; i <= n; ++i) {
22
            prefix_0[i] = prefix_0[i-1] + (servers[i-1] == '0');
23
            prefix_1[i] = prefix_1[i-1] + (servers[i-1] == '1');
24
        }
25
        26
        // Precompute suffix counts for 0s and 1s
27
        vector<int> suffix_0(n + 1, 0), suffix_1(n + 1, 0);
28
        for (int j = 1; j <= n; ++j) {
29
            suffix_0[j] = suffix_0[j-1] + (servers[n - j] == '0');
30
            suffix_1[j] = suffix_1[j-1] + (servers[n - j] == '1');
31
        }
32
        33
        int min_cost = INT_MAX;
34
        35
        // Iterate over all possible prefixes (i)
36
        for (int i = 0; i <= n; ++i) {
37
            int j_max = n - i;
38
            int left = 0, right = j_max;
39
            int best_j = 0;
40
            int best_cost = INT_MAX;
41
            42
            // Binary search for the best j
43
            while (left <= right) {
44
                int mid = (left + right) / 2;
45
                int remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid]);
46
                int decommissioned_1 = prefix_1[i] + suffix_1[mid];
47
                int current_cost = max(remaining_0, decommissioned_1);
48
                49
                if (current_cost < best_cost) {
50
                    best_cost = current_cost;
51
                    best_j = mid;
52
                } else if (current_cost == best_cost && mid < best_j) {
53
                    best_j = mid;
54
                }
55
                56
                if (decommissioned_1 < remaining_0) {
57
                    left = mid + 1;
58
                } else {
59
                    right = mid - 1;
60
                }
61
            }
62
            63
            // Check neighboring j values
64
            for (int dj : {-1, 0, 1}) {
65
                int j = best_j + dj;
66
                if (j >= 0 && j <= j_max) {
67
                    int remaining_0 = total_0 - (prefix_0[i] + suffix_0[j]);
68
                    int decommissioned_1 = prefix_1[i] + suffix_1[j];
69
                    int current_cost = max(remaining_0, decommissioned_1);
70
                    if (current_cost < best_cost) {
71
                        best_cost = current_cost;
72
                    }
73
                }
74
            }
75
            76
            if (best_cost < min_cost) {
77
                min_cost = best_cost;
78
            }
79
        }
80
        81
        results.push_back(min_cost);
82
    }
83
    84
    return results;
85
}
86
87
int main() {
88
    int T;
89
    cin >> T;
90
    vector<string> test_cases(T);
91
    for (int i = 0; i < T; ++i) {
92
        cin >> test_cases[i];
93
    }
94
    95
    vector<int> results = min_decommissioning_cost(test_cases);
96
    97
    for (int result : results) {
98
        cout << result << endl;
99
    }
100
    101
    return 0;
102
}
103",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055609
1390055603,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    if k == n:
4
        return 0  # If we can skip all firewalls, effort is 0.
5
    6
    min_extra_cost = min(firewalls)  # Find the least firewall strength to skip
7
    return total_effort - min_extra_cost  # Minimum effort after skipping one firewall.
8
9
# Reading input
10
T = int(input().strip())
11
for _ in range(T):
12
    n, k = map(int, input().split())
13
    firewalls = list(map(int, input().split()))
14
    print(min_effort(n, k, firewalls))
15",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055603
1390055604,unknown,unknown,unknown,"1
def minimize_decommission_cost(test_cases):
2
    results = []
3
4
    for binary_string in test_cases:
5
        n = len(binary_string)
6
        total_idle = binary_string.count('0') 
7
        total_active = binary_string.count('1')  
8
9
        min_cost = float('inf')  
10
11
        12
        for start in range(n + 1):  
13
            for end in range(n - start + 1):  
14
                15
                remaining = binary_string[start:n - end]
16
17
                18
                remaining_idle = remaining.count('0')
19
                decommissioned_active = total_active - remaining.count('1')
20
21
                22
                cost = max(remaining_idle, decommissioned_active)
23
                min_cost = min(min_cost, cost)
24
25
        results.append(min_cost)
26
27
    return results
28
29
30
31
T = int(input().strip())
32
test_cases = [input().strip() for _ in range(T)]
33
34
35
results = minimize_decommission_cost(test_cases)
36
for result in results:
37
    print(result)
38",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055604
1390055598,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
#include <string.h>
4
5
#define MAX(a, b) ((a) > (b) ? (a) : (b))
6
#define MIN(a, b) ((a) < (b) ? (a) : (b))
7
8
int minDecommissionCost(const char* servers) {
9
    int n = strlen(servers);
10
    int minCost = __INT_MAX__;
11
    12
    // Precompute prefix sums for active and idle servers
13
    int* activePrefix = (int*)malloc((n + 1) * sizeof(int));
14
    int* idlePrefix = (int*)malloc((n + 1) * sizeof(int));
15
    16
    activePrefix[0] = 0;
17
    idlePrefix[0] = 0;
18
    19
    for (int i = 0; i < n; i++) {
20
        activePrefix[i + 1] = activePrefix[i] + (servers[i] == '1' ? 1 : 0);
21
        idlePrefix[i + 1] = idlePrefix[i] + (servers[i] == '0' ? 1 : 0);
22
    }
23
    24
    int totalActive = activePrefix[n];
25
    int totalIdle = idlePrefix[n];
26
    27
    // Try all combinations of prefix and suffix removals
28
    for (int left = 0; left <= n; left++) {  // Left cut position (inclusive)
29
        for (int right = left; right <= n; right++) {  // Right cut position (exclusive)
30
            // Skip empty remaining segment
31
            if (left == right) {
32
                continue;
33
            }
34
            35
            // Calculate metrics
36
            int activeRemoved = activePrefix[left] + (totalActive - activePrefix[right]);
37
            int idleRemaining = idlePrefix[right] - idlePrefix[left];
38
            39
            int cost = MAX(activeRemoved, idleRemaining);
40
            minCost = MIN(minCost, cost);
41
        }
42
    }
43
    44
    free(activePrefix);
45
    free(idlePrefix);
46
    47
    return minCost;
48
}
49
50
int main() {
51
    int t;
52
    scanf(""%d"", &t);  // Number of test cases
53
    54
    for (int i = 0; i < t; i++) {
55
        char servers[100001];  // Assuming max length constraint
56
        scanf(""%s"", servers);
57
        printf(""%d\n"", minDecommissionCost(servers));
58
    }
59
    60
    return 0;
61
}",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055598
1390055596,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if __name__ == ""__main__"":
45
    main()",28,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055596
