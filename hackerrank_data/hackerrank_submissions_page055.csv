submission_id,username,problem_name,language,code,page,url
1390054999,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <string>
4
#include <climits>
5
6
using namespace std;
7
8
vector<int> min_decommissioning_cost(const vector<string>& test_cases) {
9
    vector<int> results;
10
    11
    for (const string& servers : test_cases) {
12
        int n = servers.size();
13
        int total_0 = 0;
14
        for (char c : servers) {
15
            if (c == '0') total_0++;
16
        }
17
        int total_1 = n - total_0;
18
        19
        // Precompute prefix counts for 0s and 1s
20
        vector<int> prefix_0(n + 1, 0), prefix_1(n + 1, 0);
21
        for (int i = 1; i <= n; ++i) {
22
            prefix_0[i] = prefix_0[i-1] + (servers[i-1] == '0');
23
            prefix_1[i] = prefix_1[i-1] + (servers[i-1] == '1');
24
        }
25
        26
        // Precompute suffix counts for 0s and 1s
27
        vector<int> suffix_0(n + 1, 0), suffix_1(n + 1, 0);
28
        for (int j = 1; j <= n; ++j) {
29
            suffix_0[j] = suffix_0[j-1] + (servers[n - j] == '0');
30
            suffix_1[j] = suffix_1[j-1] + (servers[n - j] == '1');
31
        }
32
        33
        int min_cost = INT_MAX;
34
        35
        // Iterate over all possible prefixes (i)
36
        for (int i = 0; i <= n; ++i) {
37
            int j_max = n - i;
38
            int left = 0, right = j_max;
39
            int best_j = 0;
40
            int best_cost = INT_MAX;
41
            42
            // Binary search for the best j
43
            while (left <= right) {
44
                int mid = (left + right) / 2;
45
                int remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid]);
46
                int decommissioned_1 = prefix_1[i] + suffix_1[mid];
47
                int current_cost = max(remaining_0, decommissioned_1);
48
                49
                if (current_cost < best_cost) {
50
                    best_cost = current_cost;
51
                    best_j = mid;
52
                } else if (current_cost == best_cost && mid < best_j) {
53
                    best_j = mid;
54
                }
55
                56
                if (decommissioned_1 < remaining_0) {
57
                    left = mid + 1;
58
                } else {
59
                    right = mid - 1;
60
                }
61
            }
62
            63
            // Check neighboring j values
64
            for (int dj : {-1, 0, 1}) {
65
                int j = best_j + dj;
66
                if (j >= 0 && j <= j_max) {
67
                    int remaining_0 = total_0 - (prefix_0[i] + suffix_0[j]);
68
                    int decommissioned_1 = prefix_1[i] + suffix_1[j];
69
                    int current_cost = max(remaining_0, decommissioned_1);
70
                    if (current_cost < best_cost) {
71
                        best_cost = current_cost;
72
                    }
73
                }
74
            }
75
            76
            if (best_cost < min_cost) {
77
                min_cost = best_cost;
78
            }
79
        }
80
        81
        results.push_back(min_cost);
82
    }
83
    84
    return results;
85
}
86
87
int main() {
88
    int T;
89
    cin >> T;
90
    vector<string> test_cases(T);
91
    for (int i = 0; i < T; ++i) {
92
        cin >> test_cases[i];
93
    }
94
    95
    vector<int> results = min_decommissioning_cost(test_cases);
96
    97
    for (int result : results) {
98
        cout << result << endl;
99
    }
100
    101
    return 0;
102
} ",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054999
1390055000,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}
69",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055000
1390055002,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T; 
7
    for (int t = 0; t < T; t++) {
8
        string s;
9
        cin >> s; 
10
        int n = s.length();
11
12
    13
        vector<int> prefix_0(n + 1, 0);
14
        vector<int> prefix_1(n + 1, 0);
15
        for (int i = 1; i <= n; i++) {
16
            prefix_0[i] = prefix_0[i - 1] + (s[i - 1] == '0' ? 1 : 0);
17
            prefix_1[i] = prefix_1[i - 1] + (s[i - 1] == '1' ? 1 : 0);
18
        }
19
20
      21
        auto check = [&](int k) {
22
            int l = 0;
23
         24
            for (int r = 0; r < n; r++) {
25
              26
                while (l <= r && prefix_0[r + 1] - prefix_0[l] > k) {
27
                    l++;
28
                }
29
                // wtf ,  check number of 1's decommissioned
30
                if (l <= r && prefix_1[l] + (prefix_1[n] - prefix_1[r + 1]) <= k) {
31
                    return true;
32
                }
33
            }
34
      35
            if (prefix_1[n] <= k) {
36
                return true;
37
            }
38
            return false;
39
        };
40
41
        // Binary search for minimum cost
42
        int low = 0, high = n;
43
        while (low < high) {
44
            int mid = (low + high) / 2;
45
            if (check(mid)) {
46
                high = mid;
47
            } else {
48
                low = mid + 1;
49
            }
50
        }
51
        cout << low << endl;
52
    }
53
    return 0;
54
}",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055002
1390054990,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054990
1390054992,unknown,unknown,unknown,"1
def min_cost_server_pruning(server_rack):
2
    n = len(server_rack)
3
    min_cost = float('inf')
4
    5
    for i in range(n + 1):
6
        for j in range(n + 1 - i):
7
            remaining = server_rack[i:n-j]
8
            idle_remaining = remaining.count('0')
9
            10
            removed_start = server_rack[:i].count('1')
11
            removed_end = server_rack[n-j:].count('1')
12
            active_decommissioned = removed_start + removed_end
13
            14
            cost = max(idle_remaining, active_decommissioned)
15
            min_cost = min(min_cost, cost)
16
    17
    return min_cost
18
19
t = int(input())
20
for _ in range(t):
21
    server_rack = input().strip()
22
    print(min_cost_server_pruning(server_rack))",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054992
1390054997,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        total_ones = s.count('1')
6
        total_zeros = s.count('0')
7
        min_cost = float('inf')
8
        for i in range(n + 1):  
9
            for j in range(i, n + 1):  
10
                remaining_zeros = s[i:j].count('0')
11
                remaining_ones = s[i:j].count('1')
12
                removed_ones = total_ones - remaining_ones
13
                cost = max(remaining_zeros, removed_ones)
14
                min_cost = min(min_cost, cost)
15
        results.append(min_cost)
16
    return results
17
T = int(input())  
18
test_cases = [input().strip() for _ in range(T)]
19
results = min_decommissioning_cost(test_cases)
20
for result in results:
21
    print(result)
22",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054997
1390054987,unknown,unknown,unknown,"1
#include <iostream>
2
#include <string>
3
#include <algorithm>
4
#include <vector>
5
6
using namespace std;
7
8
int solve() {
9
    string s;
10
    cin >> s;
11
    int n = s.length();
12
    int min_cost = n;
13
14
    int total_ones = 0;
15
    for (char c : s) {
16
        if (c == '1') {
17
            total_ones++;
18
        }
19
    }
20
21
    for (int i = 0; i <= n; ++i) {
22
        int removed_ones_prefix = 0;
23
        for (int k = 0; k < i; ++k) {
24
            if (s[k] == '1') {
25
                removed_ones_prefix++;
26
            }
27
        }
28
29
        for (int j = i; j <= n; ++j) {
30
            int remaining_zeros = 0;
31
            for (int k = i; k < j; ++k) {
32
                if (s[k] == '0') {
33
                    remaining_zeros++;
34
                }
35
            }
36
37
            int removed_ones_suffix = 0;
38
            for (int k = j; k < n; ++k) {
39
                if (s[k] == '1') {
40
                    removed_ones_suffix++;
41
                }
42
            }
43
44
            int removed_ones = removed_ones_prefix + removed_ones_suffix;
45
            min_cost = min(min_cost, max(remaining_zeros, removed_ones));
46
        }
47
    }
48
    return min_cost;
49
}
50
51
int main() {
52
    int t;
53
    cin >> t;
54
    while (t--) {
55
        cout << solve() << endl;
56
    }
57
    return 0;
58
}",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054987
1390054989,unknown,unknown,unknown,"1
2
def min_cost_server_pruning(server_rack):
3
    n = len(server_rack)
4
    min_cost = float('inf')
5
    6
    for i in range(n + 1):
7
        for j in range(n + 1 - i):
8
            remaining = server_rack[i:n-j]
9
            idle_remaining = remaining.count('0')
10
            11
            removed_start = server_rack[:i].count('1')
12
            removed_end = server_rack[n-j:].count('1')
13
            active_decommissioned = removed_start + removed_end
14
            15
            cost = max(idle_remaining, active_decommissioned)
16
            min_cost = min(min_cost, cost)
17
    18
    return min_cost
19
20
t = int(input())
21
for _ in range(t):
22
    server_rack = input().strip()
23
    print(min_cost_server_pruning(server_rack))",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054989
1390054986,unknown,unknown,unknown,"1
#include <iostream>
2
#include <string>
3
#include <vector>
4
#include <algorithm>
5
#include <climits>
6
7
using namespace std;
8
9
int findMinimumCost(const string& servers) {
10
    int n = servers.size();
11
    12
    // Count total idle and active servers
13
    int totalIdle = 0;
14
    for (char c : servers) {
15
        if (c == '0') totalIdle++;
16
    }
17
    int totalActive = n - totalIdle;
18
    19
    // Precompute prefix counts
20
    vector<int> prefixActive(n + 1, 0);
21
    vector<int> prefixIdle(n + 1, 0);
22
    23
    for (int i = 0; i < n; i++) {
24
        prefixActive[i + 1] = prefixActive[i] + (servers[i] == '1');
25
        prefixIdle[i + 1] = prefixIdle[i] + (servers[i] == '0');
26
    }
27
    28
    int minCost = INT_MAX;
29
    30
    // Optimize by using a linear approach instead of nested loops
31
    // For each possible starting point (front removal ending point)
32
    for (int start = 0; start <= n; start++) {
33
        // Calculate the remaining idle servers if we remove from 0 to start-1
34
        int frontActiveRemoved = prefixActive[start];
35
        36
        // Binary search or linear scan to find optimal end removal
37
        // For this problem size, linear scan should be efficient enough
38
        for (int end = start; end <= n; end++) {
39
            // Skip if we're not removing anything
40
            if (start == 0 && end == n) continue;
41
            42
            int remainingIdle = prefixIdle[end] - prefixIdle[start];
43
            int endActiveRemoved = totalActive - frontActiveRemoved - (prefixActive[end] - prefixActive[start]);
44
            int totalActiveRemoved = frontActiveRemoved + endActiveRemoved;
45
            46
            int cost = max(remainingIdle, totalActiveRemoved);
47
            minCost = min(minCost, cost);
48
        }
49
    }
50
    51
    return minCost;
52
}
53
54
int main() {
55
    ios_base::sync_with_stdio(false);
56
    cin.tie(nullptr);
57
    58
    int t;
59
    cin >> t;
60
    61
    while (t--) {
62
        string servers;
63
        cin >> servers;
64
        cout << findMinimumCost(servers) << ""\n"";
65
    }
66
    67
    return 0;
68
}",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054986
1390054983,unknown,unknown,unknown,"1
def min_cost_server_pruning(server_rack):
2
    n = len(server_rack)
3
    4
    # Precompute prefix and suffix counts of '1'
5
    prefix_ones = [0] * (n + 1)
6
    suffix_ones = [0] * (n + 1)
7
8
    for i in range(n):
9
        prefix_ones[i + 1] = prefix_ones[i] + (server_rack[i] == '1')
10
    11
    for i in range(n - 1, -1, -1):
12
        suffix_ones[i] = suffix_ones[i + 1] + (server_rack[i] == '1')
13
14
    total_ones = prefix_ones[n]  # Total active servers ('1' count)
15
    min_cost = float('inf')
16
17
    for i in range(n + 1):
18
        for j in range(i, n + 1):
19
            idle_remaining = server_rack[i:j].count('0')
20
            active_decommissioned = total_ones - (prefix_ones[j] - prefix_ones[i])
21
            cost = max(idle_remaining, active_decommissioned)
22
            min_cost = min(min_cost, cost)
23
24
    return min_cost
25
26
# Input handling
27
t = int(input().strip())
28
for _ in range(t):
29
    server_rack = input().strip()
30
    print(min_cost_server_pruning(server_rack))
31",55,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054983
