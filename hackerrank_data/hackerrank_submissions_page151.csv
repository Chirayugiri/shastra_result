submission_id,username,problem_name,language,code,page,url
1390053148,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static int minDecommissionCost(String s) {
6
        int n = s.length(), minCost = n;
7
8
        for (int start = 0; start <= n; start++) {
9
            for (int end = 0; end <= n - start; end++) {
10
                int idle = 0, active = 0;
11
12
                for (int i = 0; i < n; i++) {
13
                    if (i < start || i >= n - end) {
14
                        if (s.charAt(i) == '1') active++;
15
                    } else {
16
                        if (s.charAt(i) == '0') idle++;
17
                    }
18
                }
19
                20
                minCost = Math.min(minCost, Math.max(idle, active));
21
            }
22
        }
23
        return minCost;
24
    }
25
    public static void main(String[] args) {
26
        Scanner sc = new Scanner(System.in);
27
        int t = sc.nextInt();
28
        sc.nextLine();
29
        while (t-- > 0) System.out.println(minDecommissionCost(sc.nextLine().trim()));
30
        sc.close();
31
    }
32
}",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053148
1390053152,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053152
1390053156,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053156
1390053139,unknown,unknown,unknown,"1
function processData(input) {
2
    let lines = input.trim().split(""\n"");
3
    let t = parseInt(lines[0]);
4
    let testCases = [];
5
    let index = 1;
6
    7
    for (let i = 0; i < t; i++) {
8
        let [n, k] = lines[index].split("" "").map(Number);
9
        let arr = lines[index + 1].split("" "").map(Number);
10
        testCases.push([n, k, arr]);
11
        index += 2;
12
    }
13
    14
    function earliestFaultyReadings(testCases) {
15
        let results = [];
16
        17
        for (let [n, k, arr] of testCases) {
18
            let dq = [];
19
            let output = [];
20
            21
            // Process first k elements
22
            for (let i = 0; i < k; i++) {
23
                if (arr[i] < 0) {
24
                    dq.push(i);
25
                }
26
            }
27
            28
            // Process remaining elements
29
            for (let i = 0; i <= n - k; i++) {
30
                // Append first negative if exists, else 0
31
                output.push(dq.length ? arr[dq[0]] : 0);
32
                33
                // Remove elements that are out of the current window
34
                if (dq.length && dq[0] === i) {
35
                    dq.shift();
36
                }
37
                38
                // Add next element from the array if it's negative
39
                if (i + k < n && arr[i + k] < 0) {
40
                    dq.push(i + k);
41
                }
42
            }
43
            44
            results.push(output.join("" ""));
45
        }
46
        47
        console.log(results.join(""\n""));
48
    }
49
    50
    earliestFaultyReadings(testCases);
51
}
52
53
process.stdin.resume();
54
process.stdin.setEncoding(""ascii"");
55
let _input = """";
56
process.stdin.on(""data"", function (input) {
57
    _input += input;
58
});
59
60
process.stdin.on(""end"", function () {
61
    processData(_input);
62
});
63",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053139
1390053140,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultySensor {
4
    public static List<Integer> earliestFaults(int[] arr, int k) {
5
        List<Integer> result = new ArrayList<>();
6
        Deque<Integer> deque = new LinkedList<>();
7
8
        for (int i = 0; i < arr.length; i++) {
9
            // Remove out-of-window elements
10
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
11
                deque.poll();
12
            }
13
14
            // Add new faulty readings
15
            if (arr[i] < 0) {
16
                deque.offer(i);
17
            }
18
19
            // Collect results for valid windows
20
            if (i >= k - 1) {
21
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
22
            }
23
        }
24
        return result;
25
    }
26
27
    public static void main(String[] args) {
28
        Scanner scanner = new Scanner(System.in);
29
        int t = scanner.nextInt(); // Number of test cases
30
31
        while (t-- > 0) {
32
            int n = scanner.nextInt(); // Array size
33
            int k = scanner.nextInt(); // Batch size
34
            int[] arr = new int[n];
35
36
            for (int i = 0; i < n; i++) {
37
                arr[i] = scanner.nextInt();
38
            }
39
40
            // Compute and print results
41
            List<Integer> faults = earliestFaults(arr, k);
42
            for (int val : faults) {
43
                System.out.print(val + "" "");
44
            }
45
            System.out.println();
46
        }
47
        scanner.close();
48
    }
49
}",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053140
1390053142,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053142
1390053137,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053137
1390053138,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner sc=new Scanner(System.in);
11
        int t=sc.nextInt();
12
        while(t>0){
13
            int n=sc.nextInt();
14
            int k=sc.nextInt();
15
            int arr[]=new int[n];
16
            int i,j;
17
            for(i=0;i<n;i++){
18
                arr[i]=sc.nextInt();
19
            }
20
            for(i=0;i<=n-k;i++){
21
                int res=0;
22
                for(j=i;j<=i+k-1;j++){
23
                    if(arr[j]<0){
24
                        res=arr[j];
25
                        break;
26
                    }
27
                }
28
                System.out.print(res+"" "");
29
            }
30
            System.out.println();
31
            t--;
32
        }
33
    }
34
}",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053138
1390053136,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void findEarliestFaultyReadings(int *arr, int n, int k) {
5
    int *result = (int *)malloc((n - k + 1) * sizeof(int));
6
    int front = 0, rear = 0;
7
    int queue[n];
8
    9
    // Process the first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) {
12
            queue[rear++] = i;
13
        }
14
    }
15
    16
    // Store result for the first batch
17
    result[0] = (front < rear) ? arr[queue[front]] : 0;
18
    19
    // Process the remaining windows
20
    for (int i = k; i < n; i++) {
21
        // Remove elements not within the window
22
        while (front < rear && queue[front] <= i - k) {
23
            front++;
24
        }
25
        26
        // Add new element if it's faulty
27
        if (arr[i] < 0) {
28
            queue[rear++] = i;
29
        }
30
        31
        // Store result for current batch
32
        result[i - k + 1] = (front < rear) ? arr[queue[front]] : 0;
33
    }
34
    35
    // Print the result
36
    for (int i = 0; i < n - k + 1; i++) {
37
        printf(""%d "", result[i]);
38
    }
39
    printf(""\n"");
40
    41
    free(result);
42
}
43
44
int main() {
45
    int t;
46
    scanf(""%d"", &t);
47
    48
    while (t--) {
49
        int n, k;
50
        scanf(""%d %d"", &n, &k);
51
        int arr[n];
52
        53
        for (int i = 0; i < n; i++) {
54
            scanf(""%d"", &arr[i]);
55
        }
56
        57
        findEarliestFaultyReadings(arr, n, k);
58
    }
59
    60
    return 0;
61
}",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053136
1390053135,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    if k >= n:
3
        return 0
4
    5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    dp[0][0] = 0
7
    8
    for i in range(1, n + 1):
9
        for j in range(min(i, k) + 1):
10
            if j > 0:
11
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
12
            13
            if dp[i-1][j] != float('inf'):
14
                dp[i][j] = min(dp[i][j], dp[i-1][j] + strengths[i-1] + j)
15
    16
    return min(dp[n])
17
18
def solve():
19
    t = int(input().strip())
20
    results = []
21
    22
    for _ in range(t):
23
        n, k = map(int, input().strip().split())
24
        strengths = list(map(int, input().strip().split()))
25
        results.append(str(min_effort_to_breach(n, k, strengths)))
26
    27
    print(""\n"".join(results))
28
29
solve()",151,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053135
