submission_id,username,problem_name,language,code,page,url
1390053563,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, arr = case
5
        result = []
6
        for i in range(n - k + 1):  # Sliding window
7
            window = arr[i:i + k]
8
            earliest_fault = 0
9
            for num in window:
10
                if num < 0:
11
                    earliest_fault = num
12
                    break
13
            result.append(earliest_fault)
14
        results.append(result)
15
    return results
16
17
# Input Parsing
18
def main():
19
    import sys
20
    input = sys.stdin.read
21
    data = input().split()
22
    idx = 0
23
    T = int(data[idx])  # Number of test cases
24
    idx += 1
25
    test_cases = []
26
    for _ in range(T):
27
        n = int(data[idx])
28
        k = int(data[idx + 1])
29
        idx += 2
30
        arr = list(map(int, data[idx:idx + n]))
31
        idx += n
32
        test_cases.append((n, k, arr))
33
    34
    # Process and Output
35
    results = earliest_faulty_readings(test_cases)
36
    for result in results:
37
        print("" "".join(map(str, result)) + "" "")
38
39
if __name__ == ""__main__"":
40
    main()",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053563
1390053565,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    4
    # Count total active servers and total idle servers
5
    total_active = server_string.count('1')
6
    total_idle = n - total_active
7
    8
    # Precompute cumulative counts of active servers from left
9
    active_prefix_sum = [0] * (n + 1)
10
    for i in range(n):
11
        active_prefix_sum[i + 1] = active_prefix_sum[i] + (1 if server_string[i] == '1' else 0)
12
    13
    min_cost = float('inf')
14
    15
    # Try all possible starting positions for the remaining servers
16
    for left in range(n + 1):
17
        # For each possible ending position
18
        for right in range(left, n + 1):
19
            # Active servers in the remaining segment
20
            active_remaining = active_prefix_sum[right] - active_prefix_sum[left]
21
            idle_remaining = (right - left) - active_remaining
22
            23
            # Active servers removed
24
            active_removed = total_active - active_remaining
25
            26
            cost = max(idle_remaining, active_removed)
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
def faster_min_decommission_cost(server_string):
32
    n = len(server_string)
33
    34
    # Precompute prefix sums for active and idle servers
35
    active_prefix = [0] * (n + 1)
36
    idle_prefix = [0] * (n + 1)
37
    38
    for i in range(n):
39
        active_prefix[i + 1] = active_prefix[i] + (server_string[i] == '1')
40
        idle_prefix[i + 1] = idle_prefix[i] + (server_string[i] == '0')
41
    42
    min_cost = n  # Worst case cost
43
    44
    # For each possible remaining substring (from i to j-1)
45
    for i in range(n + 1):
46
        for j in range(i, n + 1):
47
            # Idle servers in remaining substring
48
            idle_remaining = idle_prefix[j] - idle_prefix[i]
49
            50
            # Active servers removed (from left and right)
51
            active_removed = active_prefix[n] - (active_prefix[j] - active_prefix[i])
52
            53
            cost = max(idle_remaining, active_removed)
54
            min_cost = min(min_cost, cost)
55
    56
    return min_cost
57
58
def main():
59
    t = int(input().strip())
60
    61
    for _ in range(t):
62
        server_string = input().strip()
63
        result = faster_min_decommission_cost(server_string)
64
        print(result)
65
66
if __name__ == ""__main__"":
67
    main()",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053565
1390053566,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053566
1390053560,unknown,unknown,unknown,"1
def minimize_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    4
    # Create list of (value + index) for each firewall
5
    skip_value = []
6
    for i in range(n):
7
        skip_value.append((firewalls[i] + i, i))
8
9
    # Sort by descending benefit to skip
10
    skip_value.sort(reverse=True)
11
12
    # Mark which firewalls to skip
13
    skipped = [0] * n
14
    for i in range(k):
15
        _, idx = skip_value[i]
16
        skipped[idx] = 1
17
18
    # Now calculate final effort
19
    effort = 0
20
    penalty = 0
21
    for i in range(n):
22
        if skipped[i]:
23
            penalty += 1
24
        else:
25
            effort += firewalls[i] + penalty
26
27
    return effort
28
29
# Main driver
30
T = int(input())
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    firewalls = list(map(int, input().split()))
34
    print(minimize_effort(n, k, firewalls))",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053560
1390053561,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T; 
7
    for (int t = 0; t < T; t++) {
8
        string s;
9
        cin >> s; 
10
        int n = s.length();
11
12
    13
        vector<int> prefix_0(n + 1, 0);
14
        vector<int> prefix_1(n + 1, 0);
15
        for (int i = 1; i <= n; i++) {
16
            prefix_0[i] = prefix_0[i - 1] + (s[i - 1] == '0' ? 1 : 0);
17
            prefix_1[i] = prefix_1[i - 1] + (s[i - 1] == '1' ? 1 : 0);
18
        }
19
20
      21
        auto check = [&](int k) {
22
            int l = 0;
23
         24
            for (int r = 0; r < n; r++) {
25
              26
                while (l <= r && prefix_0[r + 1] - prefix_0[l] > k) {
27
                    l++;
28
                }
29
                // If subarray is valid, check number of 1's decommissioned
30
                if (l <= r && prefix_1[l] + (prefix_1[n] - prefix_1[r + 1]) <= k) {
31
                    return true;
32
                }
33
            }
34
      35
            if (prefix_1[n] <= k) {
36
                return true;
37
            }
38
            return false;
39
        };
40
41
        // Binary search for minimum cost
42
        int low = 0, high = n;
43
        while (low < high) {
44
            int mid = (low + high) / 2;
45
            if (check(mid)) {
46
                high = mid;
47
            } else {
48
                low = mid + 1;
49
            }
50
        }
51
        cout << low << endl;
52
    }
53
    return 0;
54
}",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053561
1390053559,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
vector<int> earliest_faulty_readings(vector<int>& arr, int k) {
5
    int n = arr.size();
6
    vector<int> result;
7
    deque<int> dq;  // Stores indices of negative numbers
8
9
    // Process first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) dq.push_back(i);
12
    }
13
14
    // Process the sliding window
15
    for (int i = k; i <= n; i++) {
16
        // Append first negative number in the window
17
        if (!dq.empty()) 
18
            result.push_back(arr[dq.front()]);  // First negative in the deque
19
        else 
20
            result.push_back(0);  // No negative number
21
22
        // Remove elements that are out of the current window
23
        while (!dq.empty() && dq.front() < i - k + 1) {
24
            dq.pop_front();
25
        }
26
27
        // Add the next element if negative
28
        if (i < n && arr[i] < 0) {
29
            dq.push_back(i);
30
        }
31
    }
32
33
    return result;
34
}
35
36
int main() {
37
    int t;
38
    cin >> t;  // Number of test cases
39
    while (t--) {
40
        int n, k;
41
        cin >> n >> k;  // Size of array and batch size
42
        vector<int> arr(n);
43
        for (int i = 0; i < n; i++) {
44
            cin >> arr[i];
45
        }
46
        47
        vector<int> result = earliest_faulty_readings(arr, k);
48
        for (int num : result) {
49
            cout << num << "" "";
50
        }
51
        cout << endl;
52
    }
53
    return 0;
54
}",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053559
1390053550,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
void solve(){
9
    int n,k;
10
    cin>>n>>k;
11
    12
    vector<int> v(n);
13
    for(int i=0; i<n; i++) cin>>v[i];
14
    15
    vector<int> ans;
16
    for(int i=0; i<=n-k; i++){
17
        bool flag = false;
18
        19
        for(int j=i; j<k+i; j++){
20
            if(v[j] < 0){
21
                ans.push_back(v[j]);
22
                flag = true;
23
                break;
24
            }
25
        }
26
        if(!flag) ans.push_back(0);
27
    }
28
    29
    for(int i=0; i<ans.size(); i++){
30
        cout<<ans[i]<<"" "";
31
    } cout<<""\n"";
32
    33
}
34
35
36
int main() {
37
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
38
    int t;
39
    cin>>t;
40
    41
    while(t--){
42
        solve();
43
    }
44
    return 0;
45
}",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053550
1390053549,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
7
        int testCases = Integer.parseInt(reader.readLine().trim());
8
9
        StringBuilder output = new StringBuilder();
10
        11
        while (testCases-- > 0) {
12
            String[] input = reader.readLine().trim().split("" "");
13
            int arraySize = Integer.parseInt(input[0]);
14
            int batchSize = Integer.parseInt(input[1]);
15
16
            int[] readings = Arrays.stream(reader.readLine().trim().split("" ""))
17
                                   .mapToInt(Integer::parseInt)
18
                                   .toArray();
19
20
            List<Integer> earliestFaults = getFaultyReadings(readings, arraySize, batchSize);
21
22
            for (int fault : earliestFaults) {
23
                output.append(fault).append("" "");
24
            }
25
            output.append(""\n"");
26
        }
27
        28
        System.out.print(output);
29
    }
30
31
    public static List<Integer> getFaultyReadings(int[] readings, int size, int batchSize) {
32
        List<Integer> result = new ArrayList<>();
33
        Deque<Integer> faultIndices = new LinkedList<>(); 
34
35
        for (int i = 0; i < batchSize; i++) {
36
            if (readings[i] < 0) {
37
                faultIndices.addLast(i);
38
            }
39
        }
40
41
        for (int i = batchSize; i <= size; i++) {
42
            result.add(faultIndices.isEmpty() ? 0 : readings[faultIndices.peekFirst()]);
43
            while (!faultIndices.isEmpty() && faultIndices.peekFirst() < i - batchSize + 1) {
44
                faultIndices.pollFirst();
45
            }
46
            if (i < size && readings[i] < 0) {
47
                faultIndices.addLast(i);
48
            }
49
        }
50
51
        return result;
52
    }
53
}
54",130,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053549
