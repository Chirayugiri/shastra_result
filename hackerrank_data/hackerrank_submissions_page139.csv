submission_id,username,problem_name,language,code,page,url
1390053396,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process the first k elements
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the result for the first window
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process the remaining windows
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of the current window
18
        while dq and dq[0] <= i - k:
19
            dq.popleft()
20
        21
        # Add the current element if it is negative
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store the result for the current window
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
# Read input
31
t = int(input())
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    36
    # Compute and print results
37
    print("" "".join(map(str, earliest_faulty_readings(arr, k))))",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053396
1390053397,unknown,unknown,unknown,"1
# Enter your code here. Read input from STDIN. Print output to STDOUT
2
from collections import deque
3
4
def earliest_faulty_readings(arr, k):
5
6
    result = []
7
8
    dq = deque()
9
10
    11
12
    for i in range(len(arr)):
13
14
        # Remove elements not part of the current batch
15
16
        while dq and dq[0] < i - k + 1:
17
18
            dq.popleft()
19
20
        21
22
        # If current element is faulty, add its index to deque
23
24
        if arr[i] < 0:
25
26
            dq.append(i)
27
28
        29
30
        # Add the first faulty element of the batch to result
31
32
        if i >= k - 1:
33
34
            result.append(arr[dq[0]] if dq else 0)
35
36
    37
38
    return result
39
40
def main():
41
42
    t = int(input())
43
44
    for _ in range(t):
45
46
        n, k = map(int, input().split())
47
48
        arr = list(map(int, input().split()))
49
50
        print("" "".join(map(str, earliest_faulty_readings(arr, k))))
51
52
if __name__ == ""__main__"":
53
54
    main()",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053397
1390053401,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <algorithm>
4
5
using namespace std;
6
7
long long minEffort(vector<int>& firewalls, int n, int k) {
8
    // If we can skip all firewalls, return 0
9
    if (k >= n) return 0;
10
    11
    // Create a vector of pairs (index, strength)
12
    vector<pair<int, int>> indexedFirewalls(n);
13
    for (int i = 0; i < n; i++) {
14
        indexedFirewalls[i] = {i, firewalls[i]};
15
    }
16
    17
    // Sort by strength to find the k strongest firewalls to skip
18
    sort(indexedFirewalls.begin(), indexedFirewalls.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
19
        return a.second > b.second;
20
    });
21
    22
    // Mark which firewalls to skip
23
    vector<bool> skip(n, false);
24
    for (int i = 0; i < k; i++) {
25
        skip[indexedFirewalls[i].first] = true;
26
    }
27
    28
    // Calculate the total effort
29
    long long totalEffort = 0;
30
    int skippedCount = 0;
31
    32
    for (int i = 0; i < n; i++) {
33
        if (skip[i]) {
34
            skippedCount++;
35
        } else {
36
            totalEffort += firewalls[i] + skippedCount;
37
        }
38
    }
39
    40
    return totalEffort;
41
}
42
43
int main() {
44
    ios_base::sync_with_stdio(false);
45
    cin.tie(NULL);
46
    47
    int t;
48
    cin >> t;
49
    50
    while (t--) {
51
        int n, k;
52
        cin >> n >> k;
53
        54
        vector<int> firewalls(n);
55
        for (int i = 0; i < n; i++) {
56
            cin >> firewalls[i];
57
        }
58
        59
        cout << minEffort(firewalls, n, k) << endl;
60
    }
61
    62
    return 0;
63
}",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053401
1390053391,unknown,unknown,unknown,"1
def earliest_faulty_in_batches(arr, n, k):
2
    result = []
3
4
    for i in range(n - k + 1):
5
        batch = arr[i:i + k]
6
        found_fault = False 
7
        for num in batch:
8
            if num < 0:
9
                result.append(num)
10
                found_fault = True
11
                break
12
        if not found_fault:
13
            result.append(0)
14
    15
    return result
16
17
t= int(input().strip())
18
outputs = []
19
20
for _ in range(t):
21
    n, k = map(int, input().strip().split())
22
    arr = list(map(int, input().strip().split()))
23
    outputs.append(earliest_faulty_in_batches(arr, n, k))
24
for output in outputs:
25
    print("" "".join(map(str, output)))",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053391
1390053392,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
vector<int> earliest_faulty_readings(vector<int>& arr, int k) {
5
    int n = arr.size();
6
    vector<int> result;
7
    deque<int> dq;  
8
9
    for (int i = 0; i < k; i++) {
10
        if (arr[i] < 0) dq.push_back(i);
11
    }
12
13
    for (int i = k; i <= n; i++) {
14
    15
        if (!dq.empty()) 
16
            result.push_back(arr[dq.front()]);  
17
        else 
18
            result.push_back(0);  
19
20
        while (!dq.empty() && dq.front() < i - k + 1) {
21
            dq.pop_front();
22
        }
23
24
        if (i < n && arr[i] < 0) {
25
            dq.push_back(i);
26
        }
27
    }
28
29
    return result;
30
}
31
32
int main() {
33
    int t;
34
    cin >> t;  
35
    while (t--) {
36
        int n, k;
37
        cin >> n >> k;  
38
        vector<int> arr(n);
39
        for (int i = 0; i < n; i++) {
40
            cin >> arr[i];
41
        }
42
        43
        vector<int> result = earliest_faulty_readings(arr, k);
44
        for (int num : result) {
45
            cout << num << "" "";
46
        }
47
        cout << endl;
48
    }
49
    return 0;
50
}",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053392
1390053394,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    4
    for _ in range(test_cases):
5
        n, k = map(int, input().split())  # Read n (firewalls) and k (skips)
6
        effort = list(map(int, input().split()))  # Read effort values
7
8
        if k == n:  # If we skip all firewalls, effort is 0
9
            results.append(""0"")
10
            continue
11
12
        total_effort = sum(effort)  # Sum of all firewall efforts
13
        min_effort_value = total_effort  # Initialize with the maximum possible effort
14
15
        # Try skipping each firewall one by one and compute the new effort
16
        for i in range(n):
17
            new_effort = total_effort - effort[i]  # Remove effort[i] from the sum
18
            if i > 0:
19
                new_effort += 1  # Increase effort for all remaining firewalls
20
21
            min_effort_value = min(min_effort_value, new_effort)  # Update minimum effort
22
        23
        results.append(str(min_effort_value))  # Store the result for this test case
24
    print(""\n"".join(results))  # Print results ef
25
26
T = int(input())  # Number of test cases
27
min_effort(T)",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053394
1390053387,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static long minDecommissionCost(String s) {
6
        int n = s.length();
7
        if (n == 0) return 0;
8
9
        long[] preOnes = new long[n + 1], preZeros = new long[n + 1];
10
        long[] sufOnes = new long[n + 1], sufZeros = new long[n + 1];
11
12
        for (int i = 0; i < n; i++) {
13
            preOnes[i + 1] = preOnes[i] + (s.charAt(i) == '1' ? 1 : 0);
14
            preZeros[i + 1] = preZeros[i] + (s.charAt(i) == '0' ? 1 : 0);
15
        }
16
17
        for (int i = n - 1; i >= 0; i--) {
18
            sufOnes[i] = sufOnes[i + 1] + (s.charAt(i) == '1' ? 1 : 0);
19
            sufZeros[i] = sufZeros[i + 1] + (s.charAt(i) == '0' ? 1 : 0);
20
        }
21
22
        long minCost = Long.MAX_VALUE;
23
24
        for (int l = 0; l <= n; l++) {
25
            for (int r = l - 1; r < n; r++) {
26
                long decomm1s = (r < l) ? preOnes[n] : preOnes[l] + sufOnes[r + 1];
27
                long rem0s = (r < l) ? 0 : preZeros[r + 1] - preZeros[l];
28
                minCost = Math.min(minCost, Math.max(rem0s, decomm1s));
29
            }
30
        }
31
32
        return minCost;
33
    }
34
35
    public static void main(String[] args) {
36
        Scanner sc = new Scanner(System.in);
37
        int t = sc.nextInt();
38
        sc.nextLine();
39
        while (t-- > 0) System.out.println(minDecommissionCost(sc.nextLine().trim()));
40
        sc.close();
41
    }
42
}
43",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053387
1390053388,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    int T;
10
    cin >> T;
11
    while (T--) {
12
        string s;
13
        cin >> s;
14
        int n = s.size();
15
16
        // Total 1s and 0s
17
        vector<int> prefix_1(n + 1, 0);
18
        vector<int> prefix_0(n + 1, 0);
19
        for (int i = 0; i < n; i++) {
20
            prefix_1[i + 1] = prefix_1[i] + (s[i] == '1' ? 1 : 0);
21
            prefix_0[i + 1] = prefix_0[i] + (s[i] == '0' ? 1 : 0);
22
        }
23
24
        int total_1 = prefix_1[n];
25
        int total_0 = prefix_0[n];
26
27
        int min_cost = n;
28
29
        // Try all possible pairs of (left_removal = l, right_removal = r)
30
        // Keep substring from index l to r-1 inclusive
31
        for (int l = 0; l <= n; l++) {
32
            // Binary search on r (right removal count), so that l + r <= n
33
            for (int r = 0; r <= n - l; r++) {
34
                int start = l;
35
                int end = n - r;
36
37
                int kept_1 = prefix_1[end] - prefix_1[start];
38
                int kept_0 = prefix_0[end] - prefix_0[start];
39
40
                int removed_1 = total_1 - kept_1;
41
                int remaining_0 = kept_0;
42
43
                int cost = max(removed_1, remaining_0);
44
                min_cost = min(min_cost, cost);
45
            }
46
        }
47
48
        cout << min_cost << endl;
49
    }
50
    return 0;
51
}
52",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053388
1390053389,unknown,unknown,unknown,"1
def min_effort(arr, k):
2
    n = len(arr)
3
    total = sum(arr)
4
    # Consider not skipping any firewall as an option
5
    min_cost = total  
6
    # Try skipping every contiguous block of size k
7
    for i in range(n - k + 1):
8
        skipped_sum = sum(arr[i:i+k])
9
        penalty = n - (i + k)  # extra cost for each firewall after the skipped block
10
        cost = total - skipped_sum + penalty
11
        min_cost = min(min_cost, cost)
12
    return min_cost
13
14
# Input handling
15
t = int(input())
16
for _ in range(t):
17
    n, k = map(int, input().split())
18
    arr = list(map(int, input().split()))
19
    print(min_effort(arr, k))
20",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053389
1390053379,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}
41",139,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053379
