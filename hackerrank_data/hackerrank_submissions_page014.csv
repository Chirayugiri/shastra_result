submission_id,username,problem_name,language,code,page,url
1390055961,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_effort = float('inf')
6
7
    for i in range(1 << n):
8
        if bin(i).count('1') <= k:
9
            current_effort = 0
10
            current_a = a[:]
11
            for j in range(n):
12
                if (i >> j) & 1:
13
                    pass
14
                else:
15
                    current_effort += current_a[j]
16
                for l in range(j + 1, n):
17
                    if (i >> j) & 1:
18
                        current_a[l] += 1
19
            min_effort = min(min_effort, current_effort)
20
21
    return min_effort
22
23
t = int(input())
24
for _ in range(t):
25
    print(solve())",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055961
1390055964,unknown,unknown,unknown,"1
import sys
2
def solve():
3
    x = sys.stdin.buffer.read().split()
4
    if not x: return
5
    t = int(x[0])
6
    i = 1
7
    o = []
8
    for _ in range(t):
9
        s = x[i].decode()
10
        i += 1
11
        n = len(s)
12
        A = [0]*(n+1)
13
        B = [0]*(n+1)
14
        for j in range(n):
15
            B[j+1] = B[j] + (s[j]=='1')
16
            A[j+1] = A[j] + (s[j]=='0')
17
        T = A[n]
18
        C = [0]*(n+1)
19
        E = [0]*(n+1)
20
        for j in range(n):
21
            E[j+1] = E[j] + (s[n-1-j]=='1')
22
            C[j+1] = C[j] + (s[n-1-j]=='0')
23
        r = 10**9
24
        for x_ in range(n+1):
25
            m = n - x_
26
            y = T - A[x_] - B[x_]
27
            if y < 0: y = 0
28
            if y > m: y = m
29
            for z in (y, y-1, y+1):
30
                if z < 0 or z > m: continue
31
                v1 = B[x_] + E[z]
32
                v2 = T - (A[x_] + C[z])
33
                v = v1 if v1 >= v2 else v2
34
                if v < r: r = v
35
        o.append(str(r))
36
    sys.stdout.write(""\n"".join(o))
37
if __name__==""__main__"":
38
    solve()",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055964
1390055967,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055967
1390055955,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    firewalls.sort() 
3
    min_effort = float('inf')
4
5
   6
    for skips in range(min(k, n) + 1):
7
        remaining_firewalls = firewalls[skips:]
8
        effort = sum(remaining_firewalls) + skips * len(remaining_firewalls)
9
        min_effort = min(min_effort, effort)
10
11
    return min_effort
12
13
def main():
14
    import sys
15
    input = sys.stdin.read
16
    data = input().strip().split('\n')
17
18
    T = int(data[0].strip())  
19
    index = 1
20
    results = []
21
22
    for _ in range(T):
23
        n, k = map(int, data[index].strip().split())
24
        index += 1
25
        firewalls = list(map(int, data[index].strip().split()))
26
27
       28
        firewalls = [f for f in firewalls if isinstance(f, int)]
29
30
        index += 1
31
        results.append(min_effort_to_breach(n, k, firewalls))
32
33
    for result in results:
34
        print(result)
35
36
if __name__ == ""__main__"":
37
    main()",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055955
1390055958,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
# Input Handling
60
if _name_ == _""main""_:
61
    T = int(input())
62
    test_cases = [input().strip() for _ in range(T)]
63
    results = min_decommissioning_cost(test_cases)
64
    for result in results:
65
        print(result)",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055958
1390055959,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
using ll = long long;
5
6
int main() {
7
    // Optimize input/output
8
    ios::sync_with_stdio(false);
9
    cin.tie(0);
10
11
    int T;
12
    cin >> T;
13
    for (int t = 0; t < T; t++) {
14
        int n, k;
15
        cin >> n >> k;
16
        vector<ll> a(n);
17
        for (int i = 0; i < n; i++) {
18
            cin >> a[i];
19
        }
20
21
        // INF for impossible states , really tough one to solved actually 
22
        const ll INF = 1e18;
23
24
        vector<ll> prev(k + 1, INF);
25
        prev[0] = 0; 
26
27
    28
        for (int i = 0; i < n; i++) {
29
            vector<ll> curr(k + 1, INF);
30
            for (int s = 0; s <= k; s++) {
31
                // Don't skip i
32
                curr[s] = prev[s] + a[i] + s;
33
                // Skip i (if possible)
34
                if (s > 0) {
35
                    curr[s] = min(curr[s], prev[s - 1]);
36
                }
37
            }
38
            prev = curr; 
39
        }
40
41
42
        ll ans = *min_element(prev.begin(), prev.end());
43
        cout << ans << '\n';
44
    }
45
    return 0;
46
}",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055959
1390055938,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if __name__ == ""__main__"":
45
    main()",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055938
1390055953,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        7
        int T = scanner.nextInt();
8
        scanner.nextLine();
9
        10
        for (int t = 0; t < T; t++) {
11
            String s = scanner.nextLine();
12
            int n = s.length();
13
            14
            int[] prefixOnes = new int[n + 1];
15
            int[] prefixZeros = new int[n + 1];
16
            17
            for (int i = 0; i < n; i++) {
18
                prefixOnes[i + 1] = prefixOnes[i] + (s.charAt(i) == '1' ? 1 : 0);
19
                prefixZeros[i + 1] = prefixZeros[i] + (s.charAt(i) == '0' ? 1 : 0);
20
            }
21
            22
            int totalOnes = prefixOnes[n];
23
            int minCost = Integer.MAX_VALUE;
24
            25
            for (int i = 0; i <= n; i++) {
26
                for (int j = i; j <= n; j++) {
27
                    int removedPrefixOnes = prefixOnes[i];
28
                    int removedSuffixOnes = prefixOnes[n] - prefixOnes[j];
29
                    int totalRemovedOnes = removedPrefixOnes + removedSuffixOnes;
30
                    31
                    int keptZeros = prefixZeros[j] - prefixZeros[i];
32
                    33
                    int cost = Math.max(keptZeros, totalRemovedOnes);
34
                    minCost = Math.min(minCost, cost);
35
                }
36
            }
37
            38
            System.out.println(minCost);
39
        }
40
        41
        scanner.close();
42
    }
43
}",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055953
1390055944,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    /**
7
     * Checks if it's feasible to satisfy the condition with X operations.
8
     * @param X The number of operations allowed.
9
     * @param onesIndices Indices of '1's in the string.
10
     * @param total1 Total number of '1's.
11
     * @return True if feasible, false otherwise.
12
     */
13
    static boolean feasible(int X, int[] onesIndices, int total1) {
14
        if (X >= total1) return true;
15
        for (int i = 0; i < total1; i++) {
16
            int j = Math.max(i, 0); // Ensure j starts at or after i
17
            18
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
19
                j++;
20
            }
21
            int segmentLength = j - i; 
22
            if (segmentLength >= total1 - X) return true;
23
        }
24
        return false;
25
    }
26
    27
    public static void main(String[] args) {
28
        Scanner sc = new Scanner(System.in);
29
        int T = sc.nextInt();
30
        31
        while(T-- > 0) {
32
            String s = sc.next();
33
            int n = s.length();
34
            35
            // Collect indices of '1's
36
            ArrayList<Integer> onesList = new ArrayList<>();
37
            for (int i = 0; i < n; i++) {
38
                if (s.charAt(i) == '1') {
39
                    onesList.add(i);
40
                }
41
            }
42
            int total1 = onesList.size();
43
            44
            // Handle edge case: no '1's
45
            if (total1 == 0) {
46
                System.out.println(0);
47
                continue;
48
            }
49
            50
            // Convert list to array for easier manipulation
51
            int[] onesIndices = new int[total1];
52
            for (int i = 0; i < total1; i++) {
53
                onesIndices[i] = onesList.get(i);
54
            }
55
            56
            // Binary search for minimum operations
57
            int low = 0, high = total1, ans = high;
58
            while (low <= high) {
59
                int mid = low + (high - low) / 2;
60
                if (feasible(mid, onesIndices, total1)) {
61
                    ans = mid;
62
                    high = mid - 1;
63
                } else {
64
                    low = mid + 1;
65
                }
66
            }
67
            System.out.println(ans);
68
        }
69
        sc.close();
70
    }
71
}
72",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055944
1390055935,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if _name_ == ""_main_"":
45
    main()",14,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055935
