submission_id,username,problem_name,language,code,page,url
1390056380,unknown,unknown,unknown,"1
function minDecommissioningCost(rack) {
2
    let n = rack.length;
3
    let prefixZeros = new Array(n + 1).fill(0);
4
    let prefixOnes = new Array(n + 1).fill(0);
5
6
    for (let i = 0; i < n; i++) {
7
        prefixZeros[i + 1] = prefixZeros[i] + (rack[i] === '0' ? 1 : 0);
8
        prefixOnes[i + 1] = prefixOnes[i] + (rack[i] === '1' ? 1 : 0);
9
    }
10
11
    let totalZeros = prefixZeros[n];
12
    let totalOnes = prefixOnes[n];
13
    let minCost = Infinity;
14
15
    for (let i = 0; i <= n; i++) {
16
        for (let j = 0; j <= n - i; j++) {
17
            if (i + j === n) continue;
18
19
            let zerosRemovedStart = prefixZeros[i];
20
            let onesRemovedStart = prefixOnes[i];
21
            let zerosRemovedEnd = totalZeros - prefixZeros[n - j];
22
            let onesRemovedEnd = totalOnes - prefixOnes[n - j];
23
24
            let remainingZeros = totalZeros - zerosRemovedStart - zerosRemovedEnd;
25
            let removedOnes = onesRemovedStart + onesRemovedEnd;
26
            let cost = Math.max(remainingZeros, removedOnes);
27
28
            minCost = Math.min(minCost, cost);
29
        }
30
    }
31
    return minCost;
32
}
33
34
function solveTestCases(input) {
35
    let lines = input.trim().split(""\n"");
36
    let T = parseInt(lines[0], 10);
37
    let results = [];
38
39
    for (let i = 1; i <= T; i++) {
40
        let rack = lines[i].trim();
41
        results.push(minDecommissioningCost(rack));
42
    }
43
44
    console.log(results.join(""\n""));
45
}
46
47
process.stdin.resume();
48
process.stdin.setEncoding(""utf8"");
49
let _input = """";
50
51
process.stdin.on(""data"", function (input) {
52
    _input += input;
53
});
54
55
process.stdin.on(""end"", function () {
56
    solveTestCases(_input);
57
});
58",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056380
1390056434,unknown,unknown,unknown,"1
T = int(input())  
2
3
for _ in range(T):
4
    n, k = map(int, input().split())  
5
    a = list(map(int, input().split()))  
6
    if n ==k:
7
        print(0)
8
        continue
9
    reductions = []
10
    for i in range(n):
11
        reductions.append(a[i] - (n - i - 1))
12
13
    reductions.sort(reverse=True)
14
    total_reduction = sum(reductions[:k]) if k > 0 else 0
15
16
    total_effort = sum(a) - total_reduction + min(k, n) * (min(k, n) - 1) // 2
17
18
    print(total_effort)  ",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056434
1390056443,unknown,unknown,unknown,"1
def minimum_decommission_cost(servers):
2
    n = len(servers)
3
    4
    # Convert the string to a list of integers (0 or 1)
5
    server_list = [int(c) for c in servers]
6
7
    # Compute prefix sum of active servers (1s)
8
    prefix_sum = [0] * (n + 1)
9
    for i in range(n):
10
        prefix_sum[i + 1] = prefix_sum[i] + server_list[i]
11
12
    total_ones = prefix_sum[n]  # Total active servers
13
    min_cost = total_ones  # Worst case: decommission all active servers
14
15
    # Iterate over all possible windows to calculate the cost
16
    for i in range(n + 1):
17
        for j in range(i, n + 1):
18
            # Number of 0's in the window is the total number of characters minus active 1's in that window
19
            segment_zeros = (j - i) - (prefix_sum[j] - prefix_sum[i])
20
            # Active servers removed are total active servers - active servers in this window
21
            active_removed = total_ones - (prefix_sum[j] - prefix_sum[i])
22
            23
            cost = max(segment_zeros, active_removed)
24
            min_cost = min(min_cost, cost)
25
26
    return min_cost
27
28
def process_input():
29
    # Reading input
30
    t = int(input())
31
    for _ in range(t):
32
        servers = input().strip()
33
        # Calling the function to calculate the minimum decommission cost
34
        print(minimum_decommission_cost(servers))
35
36
# Call the process_input function when the script is run directly
37
if __name__ == ""__main__"":
38
    process_input()
39",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056443
1390056300,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if __name__ == ""__main__"":
45
    main()",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056300
1390056324,unknown,unknown,unknown,"1
t = int(input())
2
3
for _ in range(t):
4
    n, k = map(int, input().split())
5
    arr = list(map(int, input().split()))
6
7
    if n == k:
8
        print(0)
9
    else:
10
        result = 0
11
        for i in range(n - k + 1):
12
            13
            temp_arr = arr[:i] + arr[i + 1:]
14
            temp_arr[i % len(temp_arr)] = 0  
15
            akshu = sum(temp_arr) + (n - 1 - i)
16
            result = max(result, akshu)
17
18
        print(result)
19
20
                21
                    22
        ",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056324
1390056335,unknown,unknown,unknown,"1
def min_cost(s):
2
    total_ones = s.count('1')
3
    n = len(s)
4
    5
    scenario_empty = total_ones  # Cost when removing all '1's
6
    7
    # Scenario 1: Window lengths 1 to min(total_ones, n)
8
    scenario1_cost = float('inf')
9
    if total_ones == 0:
10
        scenario1_cost = 0  # If all are '0's, best is to remove all
11
    else:
12
        max_ones = 0
13
        L = min(total_ones, n)
14
        current_ones = sum(1 for c in s[:L] if c == '1')  # Initial window count
15
        16
        max_ones = current_ones  # First window
17
        for i in range(1, n - L + 1):
18
            current_ones -= (s[i-1] == '1')
19
            current_ones += (s[i + L - 1] == '1')
20
            max_ones = max(max_ones, current_ones)  # Keep track of max found
21
        22
        scenario1_cost = total_ones - max_ones  # Cost of transforming scenario 1
23
    24
    # Scenario 2: Window lengths > total_ones
25
    scenario2_cost = float('inf')
26
    if n > total_ones:
27
        min_zeros = float('inf')
28
        current_zeros = sum(1 for c in s[:total_ones + 1] if c == '0')  # Initial window count
29
        30
        min_zeros = current_zeros  # First window
31
        for i in range(1, n - (total_ones + 1) + 1):
32
            current_zeros -= (s[i-1] == '0')
33
            current_zeros += (s[i + total_ones] == '0')
34
            min_zeros = min(min_zeros, current_zeros)  # Keep track of min found
35
        36
        scenario2_cost = min_zeros  # Cost of transforming scenario 2
37
    38
    # Choose the best (minimum cost) option
39
    candidates = [scenario1_cost, scenario_empty]
40
    if n > total_ones:
41
        candidates.append(scenario2_cost)
42
    43
    return min(candidates)
44
45
# Read number of test cases
46
T = int(input())
47
for _ in range(T):
48
    s = input().strip()
49
    print(min_cost(s))",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056335
1390056268,unknown,unknown,unknown,"1
def min_cost(s: str) -> int:
2
3
    n = len(s)
4
5
    min_cost = float('inf')
6
7
    # Precompute the total number of 0's in the string
8
9
    total_zeros = s.count('0')
10
11
    # Iterate over all possible ways to decommission from the beginning and end
12
13
    for left in range(n + 1):
14
15
        for right in range(n + 1 - left):
16
17
            # Calculate the number of 0's remaining in the middle part
18
19
            middle = s[left : n - right]
20
21
            remaining_zeros = middle.count('0')
22
23
            # Calculate the number of 1's decommissioned from the left and right
24
25
            decommissioned_ones = s[:left].count('1') + s[n - right:].count('1')
26
27
            # Calculate the cost
28
29
            cost = max(remaining_zeros, decommissioned_ones)
30
31
            min_cost = min(min_cost, cost)
32
33
    return min_cost
34
35
def main():
36
37
    import sys
38
39
    input = sys.stdin.read
40
41
    data = input().split()
42
43
    T = int(data[0])
44
45
    for i in range(1, T + 1):
46
47
        s = data[i]
48
49
        print(min_cost(s))
50
51
if __name__ == ""__main__"":
52
53
    main()",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056268
1390056279,unknown,unknown,unknown,"1
def min_decommissioning_cost(rack):
2
    n = len(rack)
3
    prefix_zeros = [0] * (n + 1)
4
    prefix_ones = [0] * (n + 1)
5
6
    # Compute prefix sums for '0's and '1's
7
    for i in range(n):
8
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if rack[i] == '0' else 0)
9
        prefix_ones[i + 1] = prefix_ones[i] + (1 if rack[i] == '1' else 0)
10
11
    total_zeros = prefix_zeros[n]
12
    total_ones = prefix_ones[n]
13
    min_cost = float('inf')
14
15
    # Try different partition points
16
    for i in range(n + 1):
17
        for j in range(n + 1 - i):
18
            if i + j == n:
19
                continue
20
21
            zeros_removed_start = prefix_zeros[i]
22
            ones_removed_start = prefix_ones[i]
23
            zeros_removed_end = total_zeros - prefix_zeros[n - j]
24
            ones_removed_end = total_ones - prefix_ones[n - j]
25
26
            remaining_zeros = total_zeros - zeros_removed_start - zeros_removed_end
27
            removed_ones = ones_removed_start + ones_removed_end
28
            cost = max(remaining_zeros, removed_ones)
29
30
            min_cost = min(min_cost, cost)
31
32
    return min_cost
33
34
35
def solve_test_cases():
36
    t = int(input().strip())
37
    results = []
38
39
    for _ in range(t):
40
        rack = input().strip()
41
        result = min_decommissioning_cost(rack)
42
        results.append(str(result))
43
44
    print(""\n"".join(results))
45
46
47
if __name__ == ""__main__"":
48
    solve_test_cases()
49",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056279
1390056289,unknown,unknown,unknown,"1
def min_effort(n, k, strengths):
2
    total_effort = sum(strengths)  # Case where no firewalls are skipped
3
    4
    # Calculate the effort for each possible skipping position
5
    min_effort = total_effort
6
    7
    for i in range(n):
8
        if k > 0:
9
            skipped_effort = strengths[i]
10
            extra_penalty = (n - (i + 1)) * 1  # Each subsequent firewall gets +1 penalty per skip
11
            current_effort = total_effort - skipped_effort + extra_penalty
12
            min_effort = min(min_effort, current_effort)
13
    14
    return min_effort if k < n else 0  # If k == n, we can skip all firewalls
15
16
17
def main():
18
    T = int(input())  # Number of test cases
19
    20
    for _ in range(T):
21
        n, k = map(int, input().split())
22
        strengths = list(map(int, input().split()))
23
        print(min_effort(n, k, strengths))
24
25
26
if __name__ == ""__main__"":
27
    main()
28",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056289
1390056255,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])  # Number of test cases
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())  # Number of firewalls and skips allowed
13
        strengths = list(map(int, data[index + 1].split()))  # Firewall strengths
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
        # Calculate the impact of each firewall: strength + index
21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
        # Sort firewalls by impact (higher impact should be skipped first)
24
        impact.sort(reverse=True)
25
        26
        # Select the top k firewalls to skip
27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
        # Compute the minimal effort
30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
    # Print all results at once (faster output handling)
42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if __name__ == ""__main__"":
45
    main()",5,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056255
