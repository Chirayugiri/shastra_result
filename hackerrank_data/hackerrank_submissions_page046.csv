submission_id,username,problem_name,language,code,page,url
1390055193,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
    5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):
8
        skipped = []
9
        efforts = []
10
        11
        for j in range(n):
12
            if (i >> j) & 1:
13
                skipped.append(j)
14
            else:
15
                efforts.append(j)
16
        17
        if len(skipped) <= k:
18
            effort = 0
19
            skipped_count = 0
20
            for j in range(n):
21
                if j in skipped:
22
                    skipped_count += 1
23
                else:
24
                    effort += a[j] + skipped_count
25
            min_effort = min(min_effort, effort)
26
    27
    print(min_effort)
28
    29
t = int(input())
30
for _ in range(t):
31
    solve()",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055193
1390055195,unknown,unknown,unknown,"1
import sys
2
3
def minimize_server_shutdown_cost():
4
    num_cases = int(sys.stdin.readline().strip())
5
    6
    for _ in range(num_cases):
7
        server_status = sys.stdin.readline().strip()
8
        9
        active_servers = [index for index, state in enumerate(server_status) if state == '1']
10
        total_active = len(active_servers)
11
        12
        # If no active servers or already consecutive, no operations needed
13
        if total_active == 0 or active_servers[-1] - active_servers[0] == total_active - 1:
14
            print(0)
15
            continue
16
        17
        low, high = 0, total_active
18
        19
        while high - low > 1:
20
            mid_point = (low + high) // 2
21
            servers_to_keep = total_active - mid_point
22
            23
            is_possible = False
24
            for i in range(mid_point + 1):
25
                first, last = active_servers[i], active_servers[i + servers_to_keep - 1]
26
                if (last - first + 1) - servers_to_keep <= mid_point:
27
                    is_possible = True
28
                    break
29
            30
            if is_possible:
31
                high = mid_point
32
            else:
33
                low = mid_point
34
        35
        print(high)
36
37
if __name__ == ""__main__"":
38
    minimize_server_shutdown_cost()",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055195
1390055197,unknown,unknown,unknown,"1
import sys, bisect
2
def solve():
3
    d = sys.stdin.buffer.read().split()
4
    if not d: return
5
    t = int(d[0])
6
    i_d = 1
7
    res = []
8
    for _ in range(t):
9
        s = d[i_d].decode()
10
        i_d += 1
11
        n = len(s)
12
        p1 = [0]*(n+1)
13
        p0 = [0]*(n+1)
14
        for i in range(n):
15
            p1[i+1] = p1[i] + (s[i]=='1')
16
            p0[i+1] = p0[i] + (s[i]=='0')
17
        z = p0[n]
18
        s1 = [0]*(n+1)
19
        s0 = [0]*(n+1)
20
        for j in range(n):
21
            s1[j+1] = s1[j] + (s[n-1-j]=='1')
22
            s0[j+1] = s0[j] + (s[n-1-j]=='0')
23
        best = 10**9
24
        for i in range(n+1):
25
            lo = 0
26
            hi = n - i
27
            cand = 10**9
28
            while lo <= hi:
29
                m = (lo+hi)//2
30
                a = p1[i] + s1[m]
31
                b = (z - p0[i]) - s0[m]
32
                c = a if a>=b else b
33
                if a < b:
34
                    lo = m+1
35
                else:
36
                    hi = m-1
37
                if c < cand: cand = c
38
            if cand < best: best = cand
39
        res.append(str(best))
40
    sys.stdout.write(""\n"".join(res))
41
if __name__==""__main__"":
42
    solve()
43",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055197
1390055189,unknown,unknown,unknown,"1
def faulty_sensor_readings(arr, k):
2
3
    n = len(arr)
4
    results = []
5
6
    for i in range(n - k + 1):
7
        batch = arr[i:i + k]
8
        found_fault = False
9
        for j in range(len(batch)):
10
            if batch[j] < 0:
11
                results.append(batch[j])
12
                found_fault = True
13
                break  
14
        if not found_fault:
15
            results.append(0)
16
17
    return results
18
19
20
21
t = int(input())
22
for _ in range(t):
23
    n, k = map(int, input().split())
24
    arr = list(map(int, input().split()))
25
    result = faulty_sensor_readings(arr, k)
26
    print(*result)
27",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055189
1390055192,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
vector<int> helper(vector<int>&arr,int k){
8
    vector<int> result;
9
    for(int i = 0; i <= arr.size() - k; i++){
10
        int f = 0;
11
        for(int j = i; j < i + k; j++){
12
            if(arr[j] < 0){
13
                f = arr[j];
14
                break;
15
            }
16
        }
17
        result.push_back(f);
18
    }
19
    return result;
20
}
21
22
23
int main() {
24
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
25
    int a;
26
    cin>>a;
27
    while(a--){
28
        int n,k;
29
        cin>>n>>k;
30
        vector<int> arr(n);
31
        for(int i = 0; i < n; i++){
32
            cin>>arr[i];
33
        }
34
        vector<int>result = helper(arr,k);
35
        for(int i = 0; i < result.size(); i++){
36
            cout<<result[i]<<(i == result.size() - 1 ? """":"" "");
37
        }
38
        cout<<endl;
39
    }
40
    return 0;
41
}",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055192
1390055190,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array initialized with infinity
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: no firewalls, no effort
5
6
    for i in range(1, n + 1):
7
        for j in range(k + 1):
8
            # Case 1: Do not skip the i-th firewall
9
            dp[i][j] = dp[i-1][j] + firewalls[i-1] + j
10
11
            # Case 2: Skip the i-th firewall if possible
12
            if j > 0:
13
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
14
15
    # The answer is the minimum value in the last row
16
    return min(dp[n])
17
18
# Read input
19
T = int(input())
20
for _ in range(T):
21
    n, k = map(int, input().split())
22
    firewalls = list(map(int, input().split()))
23
    print(min_effort(n, k, firewalls))",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055190
1390055182,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_earliest_faulty_readings(t, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        n, k = case[0], case[1]
8
        arr = case[2]
9
        10
        # This will store the result for this test case
11
        result = []
12
        13
        # Deque to store indices of faulty readings (negative values)
14
        dq = deque()
15
        16
        # Process the first batch
17
        for i in range(k):
18
            if arr[i] < 0:
19
                dq.append(i)
20
        21
        # For the first window, check the earliest faulty reading
22
        if dq:
23
            result.append(arr[dq[0]])
24
        else:
25
            result.append(0)
26
        27
        # Slide the window across the rest of the array
28
        for i in range(k, n):
29
            # Remove elements out of the current window
30
            while dq and dq[0] <= i - k:
31
                dq.popleft()
32
            33
            # Add the new element if it's a fault (negative)
34
            if arr[i] < 0:
35
                dq.append(i)
36
            37
            # Get the earliest faulty reading for this window
38
            if dq:
39
                result.append(arr[dq[0]])
40
            else:
41
                result.append(0)
42
        43
        results.append(result)
44
    45
    return results
46
47
48
# Input Reading
49
t = int(input())  # Number of test cases
50
test_cases = []
51
52
for _ in range(t):
53
    n, k = map(int, input().split())
54
    arr = list(map(int, input().split()))
55
    test_cases.append((n, k, arr))
56
57
# Processing
58
results = find_earliest_faulty_readings(t, test_cases)
59
60
# Output
61
for result in results:
62
    print("" "".join(map(str, result)))
63",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055182
1390055187,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_earliest_faults(arr, k):
4
    result = []
5
    dq = deque()
6
7
    for i in range(len(arr)):
8
        # Remove indices that are out of the current window
9
        if dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
12
        # Add index of negative number to the deque
13
        if arr[i] < 0:
14
            dq.append(i)
15
16
        # Start collecting results when we have a full window
17
        if i >= k - 1:
18
            result.append(arr[dq[0]] if dq else 0)
19
20
    return result
21
22
23
# ------------------------
24
# MAIN DRIVER CODE
25
# ------------------------
26
27
t = int(input())  # Number of test cases
28
29
for _ in range(t):
30
    n, k = map(int, input().split())  # Size of array and window size
31
    arr = list(map(int, input().split()))  # Input array
32
33
    result = find_earliest_faults(arr, k)
34
    print(*result)
35",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055187
1390055188,unknown,unknown,unknown,"1
def min_cost(server_rack):
2
    n = len(server_rack)
3
    min_cost = float('inf')
4
    5
    # Precompute the prefix sums for 0's and 1's
6
    prefix_zeros = [0] * (n + 1)
7
    prefix_ones = [0] * (n + 1)
8
    9
    for i in range(n):
10
        prefix_zeros[i+1] = prefix_zeros[i] + (1 if server_rack[i] == '0' else 0)
11
        prefix_ones[i+1] = prefix_ones[i] + (1 if server_rack[i] == '1' else 0)
12
    13
    # Iterate over all possible windows
14
    for left in range(n + 1):
15
        for right in range(left, n + 1):
16
            # Calculate the number of 0's remaining in the window
17
            zeros_remaining = prefix_zeros[right] - prefix_zeros[left]
18
            # Calculate the number of 1's removed outside the window
19
            ones_removed = prefix_ones[left] + (prefix_ones[n] - prefix_ones[right])
20
            # Calculate the cost
21
            cost = max(zeros_remaining, ones_removed)
22
            # Update the minimum cost
23
            if cost < min_cost:
24
                min_cost = cost
25
    26
    return min_cost
27
28
# Read the number of test cases
29
T = int(input())
30
for _ in range(T):
31
    server_rack = input().strip()
32
    print(min_cost(server_rack))",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055188
1390055181,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",46,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055181
