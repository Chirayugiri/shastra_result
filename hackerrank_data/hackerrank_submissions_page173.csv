submission_id,username,problem_name,language,code,page,url
1390052609,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Initialize array to store minimum effort for each possible combination
3
    # dp[i][j] = min effort to process first i firewalls using j skips
4
    dp = [[float('inf') for _ in range(k+1)] for _ in range(n+1)]
5
    dp[0][0] = 0  # Base case: no firewalls, no skips, no effort
6
    7
    for i in range(1, n+1):
8
        firewall_idx = i-1  # Convert to 0-indexed for strengths array
9
        10
        for j in range(k+1):
11
            # Option 1: Don't skip current firewall
12
            if j <= i-1:  # Can only have used j skips on previous i-1 firewalls
13
                # Current strength + penalty of j for j previously skipped firewalls
14
                dp[i][j] = min(dp[i][j], dp[i-1][j] + strengths[firewall_idx] + j)
15
            16
            # Option 2: Skip current firewall (if we have skips left)
17
            if j > 0:
18
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
19
    20
    # Return minimum effort after processing all firewalls with any number of skips
21
    return min(dp[n])
22
23
def main():
24
    t = int(input().strip())
25
    26
    for _ in range(t):
27
        n, k = map(int, input().strip().split())
28
        strengths = list(map(int, input().strip().split()))
29
        30
        result = min_effort_to_breach(n, k, strengths)
31
        print(result)
32
33
if __name__ == ""__main__"":
34
    main()",173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052609
1390052611,unknown,unknown,unknown,"1
def min_effort_to_breach(count, max_skip, values):
2
    if max_skip >= count:
3
        return 0
4
    5
    effort = [[float('inf')] * (max_skip + 1) for _ in range(count + 1)]
6
    effort[0][0] = 0
7
    8
    for i in range(1, count + 1):
9
        for j in range(max_skip + 1):
10
            if j > 0:
11
                current_value = values[i-1] + j
12
            else:
13
                current_value = values[i-1]
14
            15
            if effort[i-1][j] != float('inf'):
16
                effort[i][j] = min(effort[i][j], effort[i-1][j] + current_value)
17
            18
            if j < max_skip:
19
                effort[i][j+1] = min(effort[i][j+1], effort[i-1][j])
20
    21
    return min(effort[count])
22
23
def solve():
24
    test_cases = int(input().strip())
25
    results = []
26
    27
    for _ in range(test_cases):
28
        count, max_skip = map(int, input().strip().split())
29
        values = list(map(int, input().strip().split()))
30
        results.append(min_effort_to_breach(count, max_skip, values))
31
    32
    for result in results:
33
        print(result)
34
35
if __name__ == ""__main__"":
36
    solve()",173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052611
1390052613,unknown,unknown,unknown,1,173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052613
1390052601,unknown,unknown,unknown,1,173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052601
1390052605,unknown,unknown,unknown,"1
def min_effort_to_breach(T, test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        if k == n:
6
            results.append(""0"")  # If all firewalls can be skipped, effort is 0
7
            continue
8
9
        total_effort = sum(firewalls)
10
        min_effort = total_effort
11
12
        # Compute the initial window sum (sum of first k firewalls)
13
        window_sum = sum(firewalls[:k])
14
15
        # Iterate through possible skip windows
16
        for i in range(n - k + 1):
17
            skipped_firewalls = k
18
            increased_security = sum(range(1, skipped_firewalls + 1))  # Penalty for skipping
19
            20
            new_effort = total_effort - window_sum + increased_security
21
            min_effort = min(min_effort, new_effort)
22
23
            # Move the sliding window
24
            if i + k < n:
25
                window_sum = window_sum - firewalls[i] + firewalls[i + k]
26
27
        results.append(str(min_effort))
28
29
    return ""\n"".join(results)
30
31
# Read input
32
T = int(input())
33
test_cases = []
34
35
for _ in range(T):
36
    n, k = map(int, input().split())
37
    firewalls = list(map(int, input().split()))
38
    test_cases.append((n, k, firewalls))
39
40
# Compute and print results
41
print(min_effort_to_breach(T, test_cases))
42",173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052605
1390052607,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    4
    # Count total active and idle servers
5
    total_active = server_string.count('1')
6
    total_idle = server_string.count('0')
7
    8
    min_cost = float('inf')
9
    10
    # Try all possible combinations of removing servers from beginning and end
11
    for left in range(n + 1):  # Servers to remove from left (including 0)
12
        for right in range(n + 1 - left):  # Servers to remove from right (including 0)
13
            # Skip if we're removing all servers
14
            if left + right == n:
15
                continue
16
                17
            # Calculate remaining substring
18
            remaining = server_string[left:n-right]
19
            20
            # Count remaining idle servers
21
            remaining_idle = remaining.count('0')
22
            23
            # Count active servers removed
24
            active_removed = total_active - remaining.count('1')
25
            26
            # Calculate cost
27
            cost = max(remaining_idle, active_removed)
28
            29
            # Update minimum cost
30
            min_cost = min(min_cost, cost)
31
    32
    return min_cost
33
34
def solve():
35
    t = int(input())
36
    37
    for _ in range(t):
38
        server_string = input().strip()
39
        result = min_decommission_cost(server_string)
40
        print(result)
41
42
# Execute the solution
43
solve()",173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052607
1390052590,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
vector<int> earliest_faulty_readings(vector<int>& arr, int k) {
5
    int n = arr.size();
6
    vector<int> result;
7
    deque<int> dq;  // Stores indices of negative numbers
8
9
    // Process first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) dq.push_back(i);
12
    }
13
14
    // Process the sliding window
15
    for (int i = k; i <= n; i++) {
16
        // Append first negative number in the window
17
        if (!dq.empty()) 
18
            result.push_back(arr[dq.front()]);  // First negative in the deque
19
        else 
20
            result.push_back(0);  // No negative number
21
22
        // Remove elements that are out of the current window
23
        while (!dq.empty() && dq.front() < i - k + 1) {
24
            dq.pop_front();
25
        }
26
27
        // Add the next element if negative
28
        if (i < n && arr[i] < 0) {
29
            dq.push_back(i);
30
        }
31
    }
32
33
    return result;
34
}
35
36
int main() {
37
    int t;
38
    cin >> t;  // Number of test cases
39
    while (t--) {
40
        int n, k;
41
        cin >> n >> k;  // Size of array and batch size
42
        vector<int> arr(n);
43
        for (int i = 0; i < n; i++) {
44
            cin >> arr[i];
45
        }
46
        47
        vector<int> result = earliest_faulty_readings(arr, k);
48
        for (int num : result) {
49
            cout << num << "" "";
50
        }
51
        cout << endl;
52
    }
53
    return 0;
54
}",173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052590
1390052592,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        dq = deque()
8
        res = []
9
        10
 11
        for i in range(k):
12
            if arr[i] < 0:
13
                dq.append(i)
14
        15
        16
        res.append(arr[dq[0]] if dq else 0)
17
        18
 19
        for i in range(k, n):
20
     21
            if dq and dq[0] < i - k + 1:
22
                dq.popleft()
23
            24
          25
            if arr[i] < 0:
26
                dq.append(i)
27
            28
           29
            res.append(arr[dq[0]] if dq else 0)
30
        31
        results.append(res)
32
    33
    return results
34
35
36
t = int(input())
37
test_cases = []
38
for _ in range(t):
39
    n, k = map(int, input().split())
40
    arr = list(map(int, input().split()))
41
    test_cases.append((n, k, arr))
42
43
44
output = earliest_faulty_readings(test_cases)
45
for res in output:
46
    print(*res)
47",173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052592
1390052596,unknown,unknown,unknown,"1
def minimize_effort(test_cases):
2
    results = []
3
    4
    for n, k, strengths in test_cases:
5
        # Sort the strengths array to prioritize skipping the most costly firewalls
6
        strengths.sort()
7
        8
        # Skip up to k strongest firewalls, which are now the last k elements in the sorted list
9
        total_effort = sum(strengths[:-k]) if k < n else 0
10
        11
        results.append(total_effort)
12
    13
    return results
14
15
# Input reading
16
T = int(input())
17
test_cases = []
18
19
for _ in range(T):
20
    n, k = map(int, input().split())
21
    strengths = list(map(int, input().split()))
22
    test_cases.append((n, k, strengths))
23
24
# Get results
25
results = minimize_effort(test_cases)
26
27
# Output results
28
for res in results:
29
    print(res)",173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052596
1390052588,unknown,unknown,unknown,1,173,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052588
