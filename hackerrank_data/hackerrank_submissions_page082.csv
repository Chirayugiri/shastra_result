submission_id,username,problem_name,language,code,page,url
1390054443,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
            12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))
27",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054443
1390054445,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    min_cost = float('inf')
5
6
    for i in range(n + 1):
7
        for j in range(n - i + 1):
8
            remaining_s = s[i:n - j]
9
            10
        cost = max(idle_count, active_removed)
11
            min_cost = min(min_cost, cost)
12
            13
    print(min_cost)
14
15",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054445
1390054447,unknown,unknown,unknown,"1
def is_possible(s, k):
2
    n = len(s)
3
    4
    pref_0 = [0] * (n + 1)
5
    pref_1 = [0] * (n + 1)
6
    for i in range(n):
7
        pref_0[i + 1] = pref_0[i] + (s[i] == '0')
8
        pref_1[i + 1] = pref_1[i] + (s[i] == '1')
9
    10
    11
    j = 0
12
    for i in range(n):
13
        while j < n and pref_0[j + 1] - pref_0[i] <= k:
14
            j += 1
15
        if j > i:
16
            ones_removed = pref_1[i] + (pref_1[n] - pref_1[j])
17
            if ones_removed <= k:
18
                return True
19
    return False
20
21
def min_cost(s):
22
    n = len(s)
23
    low, high = 0, n
24
    while low < high:
25
        mid = (low + high) // 2
26
        if is_possible(s, mid):
27
            high = mid
28
        else:
29
            low = mid + 1
30
    return low
31
32
33
T = int(input())
34
for _ in range(T):
35
    s = input().strip()
36
    print(min_cost(s))",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054447
1390054436,unknown,unknown,unknown,"1
import bisect
2
3
t = int(input())
4
for _ in range(t):
5
    s = input().strip()
6
    n = len(s)
7
    8
    if n == 0:
9
        print(0)
10
        continue
11
    if n == 1:
12
        print(0)
13
        continue
14
    if n == 2:
15
        print(1 if s[0] == s[1] else 0)
16
        continue
17
    if not all(c in '01' for c in s):
18
        print(0)
19
        continue
20
    21
    prefix_0 = [0] * (n + 1)
22
    prefix_1 = [0] * (n + 1)
23
    for i in range(n):
24
        prefix_0[i + 1] = prefix_0[i] + (1 if s[i] == '0' else 0)
25
        prefix_1[i + 1] = prefix_1[i] + (1 if s[i] == '1' else 0)
26
    total_1 = prefix_1[n]
27
    28
    low, high = 0, n
29
    while low < high:
30
        m = (low + high) // 2
31
        possible = False
32
        for j in range(n + 1):
33
            target = prefix_0[j] - m
34
            i = bisect.bisect_left(prefix_0, target, 0, j + 1)
35
            if i <= j:
36
                ones_removed = prefix_1[i] + (total_1 - prefix_1[j])
37
                remaining_zeros = prefix_0[j] - prefix_0[i]
38
                if max(remaining_zeros, ones_removed) <= m:
39
                    possible = True
40
                    break
41
        if possible:
42
            high = m
43
        else:
44
            low = m + 1
45
    print(low)",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054436
1390054442,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <algorithm>
4
5
using namespace std;
6
7
void solve() {
8
    int n, k;
9
    cin >> n >> k;
10
    11
vector<int> arr(n);
12
     int totalSum = 0;
13
     for (int i = 0; i < n; i++) {
14
         cin >> arr[i];
15
        totalSum += arr[i];
16
    }
17
    18
    vector<int> ansArr;
19
     for(int i = 0; i < n; i++) {
20
         ansArr.push_back(arr[i] - (n - i - 1));
21
    }
22
    23
    sort(ansArr.rbegin(), ansArr.rend());
24
    25
    int randomVar = 0, prefixSum = 0;
26
    27
      for (int t = 0; t <= min(k, n); t++) {
28
        if (t > 0) prefixSum += ansArr[t - 1];
29
    int currentValue = prefixSum + t * (t - 1) / 2;
30
        randomVar = max(randomVar, currentValue);
31
    }
32
    33
    cout << totalSum - randomVar << endl;
34
}
35
36
int main() {
37
    ios::sync_with_stdio(false);
38
    cin.tie(nullptr);
39
    40
    int testCases;
41
    cin >> testCases;
42
      while (testCases--) {
43
        solve();
44
    }
45
    46
    return 0;
47
}
48",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054442
1390054435,unknown,unknown,unknown,"1
def min_firewall_effort(n, k, firewalls):
2
3
    min_effort = float('inf')
4
5
    for i in range(1 << n):  # Iterate through all possible combinations of skipped firewalls
6
        skipped_count = bin(i).count('1')
7
        if skipped_count <= k:
8
            current_effort = 0
9
            skipped = 0
10
            for j in range(n):
11
                if (i >> j) & 1:  # Check if the j-th firewall is skipped
12
                    skipped += 1
13
                else:
14
                    current_effort += firewalls[j] + skipped
15
            min_effort = min(min_effort, current_effort)
16
17
    return min_effort
18
19
if __name__ == ""__main__"":
20
    t = int(input())
21
    for _ in range(t):
22
        n, k = map(int, input().split())
23
        firewalls = list(map(int, input().split()))
24
        result = min_firewall_effort(n, k, firewalls)
25
        print(result)
26",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054435
1390054431,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        # Case 1: Remove all 0s. Find the longest contiguous 1s substring.
10
        max_ones = 0
11
        current = 0
12
        for c in servers:
13
            if c == '1':
14
                current += 1
15
                max_ones = max(max_ones, current)
16
            else:
17
                current = 0
18
        cost_a = total_1 - max_ones if total_0 > 0 else 0
19
        20
        # Case 2: Allow remaining 0s. Use sliding window to find optimal balance.
21
        cost_b = float('inf')
22
        if total_0 == 0:
23
            # All are 1s, cost is 0
24
            results.append(0)
25
            continue
26
        27
        left = 0
28
        zeros = 0
29
        ones_in_window = 0
30
        31
        for right in range(n):
32
            if servers[right] == '0':
33
                zeros += 1
34
            else:
35
                ones_in_window += 1
36
            37
            # Ensure window has at least one 0
38
            while zeros == 0:
39
                if servers[left] == '1':
40
                    ones_in_window -= 1
41
                left += 1
42
            43
            # Calculate cost for current window
44
            removed_ones = total_1 - ones_in_window
45
            remaining_zeros = zeros
46
            current_cost = max(remaining_zeros, removed_ones)
47
            cost_b = min(cost_b, current_cost)
48
            49
            # Try to minimize the cost by shrinking the window from the left
50
            while left <= right and zeros >= 1:
51
                if servers[left] == '0':
52
                    zeros -= 1
53
                else:
54
                    ones_in_window -= 1
55
                left += 1
56
                57
                if zeros >= 1:
58
                    removed_ones = total_1 - ones_in_window
59
                    remaining_zeros = zeros
60
                    current_cost = max(remaining_zeros, removed_ones)
61
                    cost_b = min(cost_b, current_cost)
62
        63
        # The minimal cost is the minimum of both cases
64
        min_cost = min(cost_a, cost_b)
65
        results.append(min_cost)
66
    67
    return results
68
69
# Input reading
70
T = int(input())
71
test_cases = [input().strip() for _ in range(T)]
72
73
# Get results
74
results = min_decommissioning_cost(test_cases)
75
76
# Output results
77
for result in results:
78
    print(result)",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054431
1390054432,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); 
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054432
1390054433,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <queue>
4
#include <algorithm>
5
6
using namespace std;
7
8
long long calculateMinEffort(vector<int>& a, int k) {
9
    int n = a.size();
10
    if (k >= n) {
11
        return 0; // Skip all firewalls
12
    }
13
14
    // Use a min-heap to keep track of the k largest elements
15
    priority_queue<int, vector<int>, greater<int>> minHeap;
16
17
    for (int i = 0; i < n; ++i) {
18
        minHeap.push(a[i]);
19
        if (minHeap.size() > k) {
20
            minHeap.pop(); // Keep only the k largest elements
21
        }
22
    }
23
24
    // Extract the k largest elements
25
    vector<int> skipped;
26
    while (!minHeap.empty()) {
27
        skipped.push_back(minHeap.top());
28
        minHeap.pop();
29
    }
30
31
    // Sort the skipped elements in descending order
32
    sort(skipped.rbegin(), skipped.rend());
33
34
    // Calculate the total effort
35
    long long totalEffort = 0;
36
    int increase = 0; // Tracks the number of skipped firewalls so far
37
    for (int i = 0; i < n; ++i) {
38
        if (increase < k && a[i] == skipped[increase]) {
39
            // Skip this firewall
40
            increase++;
41
        } else {
42
            // Add the effort, considering the increase due to skipped firewalls
43
            totalEffort += a[i] + increase;
44
        }
45
    }
46
47
    return totalEffort;
48
}
49
50
int main() {
51
    int T;
52
    cin >> T;
53
    while (T--) {
54
        int n, k;
55
        cin >> n >> k;
56
        vector<int> a(n);
57
        for (int i = 0; i < n; ++i) {
58
            cin >> a[i];
59
        }
60
61
        long long minEffort = calculateMinEffort(a, k);
62
        cout << minEffort << endl;
63
    }
64
    return 0;
65
}",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054433
1390054430,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input().strip())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().strip().split())
59
        strengths = list(map(int, input().strip().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()
74
75
76",82,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054430
