submission_id,username,problem_name,language,code,page,url
1390054275,unknown,unknown,unknown,"1
import sys
2
from itertools import accumulate
3
4
def min_effort(arr, k):
5
    n = len(arr)
6
    T = sum(arr)
7
    A = [arr[i] + (i+1) for i in range(n)]
8
    A.sort(reverse=True)
9
    P = [0] + list(accumulate(A))
10
    m_max = min(k, n)
11
    best = float('inf')
12
    for m in range(m_max + 1):
13
        cost = T + m * n - (m * m - m) // 2 - P[m]
14
        if cost < best:
15
            best = cost
16
    return best
17
18
def solve():
19
    data = sys.stdin.read().strip().split()
20
    if not data:
21
        return
22
    t = int(data[0])
23
    index = 1
24
    res = []
25
    for _ in range(t):
26
        n = int(data[index]); index += 1
27
        k = int(data[index]); index += 1
28
        arr = list(map(int, data[index:index+n])); index += n
29
        res.append(str(min_effort(arr, k)))
30
    sys.stdout.write(""\n"".join(res))
31
32
if __name__ == ""__main__"":
33
    solve()",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054275
1390054277,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
3
    4
    for j in range(k + 1):
5
        dp[0][j] = 0
6
    7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            if j > 0:
10
                dp[i][j] = dp[i-1][j-1]
11
            12
            current_strength = strengths[i-1] + j
13
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
14
    15
    return min(dp[n])
16
17
def solve():
18
    t = int(input())
19
    results = []
20
    21
    for _ in range(t):
22
        n, k = map(int, input().split())
23
        strengths = list(map(int, input().split()))
24
        results.append(min_effort_to_breach(n, k, strengths))
25
    26
    for result in results:
27
        print(result)
28
29
solve()
30",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054277
1390054276,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054276
1390054273,unknown,unknown,unknown,"1
import bisect
2
3
t = int(input())
4
for _ in range(t):
5
    s = input().strip()
6
    n = len(s)
7
    8
    if n == 0:
9
        print(0)
10
        continue
11
    if n == 1:
12
        print(0)
13
        continue
14
    if n == 2:
15
        print(1 if s[0] == s[1] else 0)
16
        continue
17
    18
    prefix_0 = [0] * (n + 1)
19
    prefix_1 = [0] * (n + 1)
20
    for i in range(n):
21
        prefix_0[i + 1] = prefix_0[i] + (1 if s[i] == '0' else 0)
22
        prefix_1[i + 1] = prefix_1[i] + (1 if s[i] == '1' else 0)
23
    total_1 = prefix_1[n]
24
    25
    low, high = 0, n
26
    while low < high:
27
        m = (low + high) // 2
28
        possible = False
29
        for j in range(n + 1):
30
            target = prefix_0[j] - m
31
            i = bisect.bisect_left(prefix_0, target, 0, j + 1)
32
            if i <= j:
33
                ones_removed = prefix_1[i] + (total_1 - prefix_1[j])
34
                remaining_zeros = prefix_0[j] - prefix_0[i]
35
                if max(remaining_zeros, ones_removed) <= m:
36
                    possible = True
37
                    break
38
        if possible:
39
            high = m
40
        else:
41
            low = m + 1
42
    print(low)",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054273
1390054271,unknown,unknown,unknown,"1
def min_decommissioning_cost(s):
2
    n = len(s)
3
    4
    prefix_ones = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_ones[i + 1] = prefix_ones[i] + (s[i] == '1')
7
    8
    total_ones = prefix_ones[n]
9
    10
    min_cost = n
11
    12
    for length in range(n + 1):
13
        if length == 0:
14
            min_cost = min(min_cost, total_ones)
15
            continue
16
        17
        best_pos_cost = n
18
        19
20
        for start in range(n - length + 1):
21
            end = start + length
22
            23
            ones_remaining = prefix_ones[end] - prefix_ones[start]
24
            25
            ones_removed = total_ones - ones_remaining
26
            27
            zeros_remaining = length - ones_remaining
28
            29
            cost = max(zeros_remaining, ones_removed)
30
            best_pos_cost = min(best_pos_cost, cost)
31
        32
        min_cost = min(min_cost, best_pos_cost)
33
    34
    return min_cost
35
36
import sys
37
input = sys.stdin.readline
38
39
t = int(input())
40
for _ in range(t):
41
    server_rack = input().strip()
42
    print(min_decommissioning_cost(server_rack))",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054271
1390054274,unknown,unknown,unknown,"1
from collections import deque
2
def FSR(arr,k):
3
    dq,result=deque(),[]
4
    for i in range(len(arr)):
5
        if dq and dq[0]<i-k+1:
6
            dq.popleft()
7
        if arr[i]<0:
8
            dq.append(i)
9
        if i>=k-1:
10
            result.append(arr[dq[0]]if dq else 0)
11
    return result
12
t=int(input())
13
for _ in range(t):
14
    n,k=map(int,input().split())
15
    arr=list(map(int,input().split()))
16
    print(*FSR(arr,k))
17
    18
        ",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054274
1390054265,unknown,unknown,unknown,"1
def find_earliest_faults(arr, k):
2
    result = []
3
    for i in range(len(arr) - k + 1):
4
        batch = arr[i:i + k]
5
        fault_found = False
6
        for reading in batch:
7
            if reading < 0:
8
                result.append(reading)
9
                fault_found = True
10
                break
11
        if not fault_found:
12
            result.append(0)
13
    return result
14
15
if __name__ ==""__main__"" :
16
    t = int(input())
17
    for _ in range(t):
18
        n, k = map(int, input().split())
19
        arr = list(map(int, input().split()))
20
        output = find_earliest_faults(arr, k)
21
        print(*output)
22
23",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054265
1390054269,unknown,unknown,unknown,"1
2
import sys
3
4
def main():
5
    input = sys.stdin.read().split()
6
    idx = 0
7
    T = int(input[idx])
8
    idx += 1
9
    for _ in range(T):
10
        n, k = int(input[idx]), int(input[idx + 1])
11
        idx += 2
12
        a = list(map(int, input[idx:idx + n]))
13
        idx += n
14
        15
        sum_S = sum(a)
16
        # Compute a[i] + i (0-based)
17
        values = [a[i] + i for i in range(n)]
18
        # Sort in descending order
19
        values.sort(reverse=True)
20
        sum_aj_plus_j = sum(values[:k])
21
        # Compute the result
22
        res = sum_S - sum_aj_plus_j - (k * (k + 1)) // 2 + k * n
23
        print(res)
24
25
if __name__ == ""__main__"":
26
    main()",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054269
1390054270,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommissioningCorrected {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
        scanner.nextLine(); // Consume newline
9
10
        while (t-- > 0) {
11
            String servers = scanner.nextLine();
12
            int minCost = solveCorrected(servers);
13
            System.out.println(minCost);
14
        }
15
        scanner.close();
16
    }
17
18
    private static int solveCorrected(String servers) {
19
        int n = servers.length();
20
        int minCost = Integer.MAX_VALUE;
21
22
        for (int i = 0; i <= n; i++) { // Decommission from the beginning
23
            for (int j = 0; j <= n - i; j++) { // Decommission from the end
24
                String remaining = servers.substring(i, n - j);
25
                int idleCount = 0;
26
                int activeDecommissioned = 0;
27
28
                // Count idle servers in the remaining string
29
                for (int k = 0; k < remaining.length(); k++) {
30
                    if (remaining.charAt(k) == '0') {
31
                        idleCount++;
32
                    }
33
                }
34
35
                // Count active servers decommissioned from the beginning
36
                for (int k = 0; k < i; k++) {
37
                    if (servers.charAt(k) == '1') {
38
                        activeDecommissioned++;
39
                    }
40
                }
41
42
                // Count active servers decommissioned from the end
43
                for (int k = 0; k < j; k++) {
44
                    if (servers.charAt(n - 1 - k) == '1') {
45
                        activeDecommissioned++;
46
                    }
47
                }
48
49
                minCost = Math.min(minCost, Math.max(idleCount, activeDecommissioned));
50
            }
51
        }
52
53
        return minCost;
54
    }
55
}",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054270
1390054264,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        output = []
8
        dq = deque()
9
        for i in range(k):
10
            if arr[i] < 0:
11
                dq.append(i)
12
        output.append(arr[dq[0]] if dq else 0)
13
        for i in range(k, n):
14
            if dq and dq[0] <= i - k:
15
                dq.popleft()
16
            if arr[i] < 0:
17
                dq.append(i)
18
            output.append(arr[dq[0]] if dq else 0)
19
        20
        results.append("" "".join(map(str, output)))
21
    22
    return ""\n"".join(results)
23
t = int(input())
24
test_cases = []
25
for _ in range(t):
26
    n, k = map(int, input().split())
27
    arr = list(map(int, input().split()))
28
    test_cases.append((n, k, arr))
29
print(earliest_faulty_readings(test_cases))",91,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390054264
