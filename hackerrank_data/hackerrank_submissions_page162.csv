submission_id,username,problem_name,language,code,page,url
1390052899,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store result for first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process remaining windows
17
    for i in range(k, n):
18
        # Remove out-of-window elements
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add new element if it's negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Append the earliest fault or 0 if none
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())
35
    arr = list(map(int, input().split()))
36
    print(*earliest_faulty_readings(arr, k))",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052899
1390052902,unknown,unknown,unknown,"1
from collections import deque
2
def faul_read(arr, k):
3
    n = len(arr)
4
    res = []
5
    dq = deque()
6
7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
11
    res.append(arr[dq[0]] if dq else 0)
12
    13
    for i in range(k, n):
14
        if dq and dq[0] < i - k + 1:
15
            dq.popleft()
16
        if arr[i] < 0:
17
            dq.append(i)
18
        res.append(arr[dq[0]] if dq else 0)
19
    20
    return res
21
22
t = int(input())
23
24
for _ in range(t):
25
    n, k = map(int, input().split()) 
26
    arr = list(map(int, input().split())) 
27
28
    print(*faul_read(arr, k))",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052902
1390052904,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    result.append(arr[dq[0]] if dq else 0)
12
    13
    for i in range(k, len(arr)):
14
        15
        if dq and dq[0] <= i - k:
16
            dq.popleft()
17
        18
        if arr[i] < 0:
19
            dq.append(i)
20
        21
        22
        result.append(arr[dq[0]] if dq else 0)
23
    24
    print(*result)
25
26
27
t = int(input())
28
for _ in range(t):
29
    n, k = map(int, input().split())
30
    arr = list(map(int, input().split()))
31
    earliest_faulty_readings(arr, k)
32",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052904
1390052898,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include<bits/stdc++.h>
7
using namespace std;
8
9
vector<int> solve(vector<int>& arr, int k){
10
    int n = arr.size();
11
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
12
    13
    for(int i=0; i<n; i++){
14
        if(arr[i]<0) pq.push({i,arr[i]});
15
    }
16
    17
    vector<int> ans;
18
    for(int i=k-1; i<n; i++){
19
        int idx=-1,val=INT_MAX;
20
        if(!pq.empty()){
21
            idx=pq.top().first;
22
            val=pq.top().second;
23
        }
24
        if(idx<=i && val<0) ans.push_back(val);
25
        else ans.push_back(0);
26
        27
        while(!pq.empty() && pq.top().first<=i-k+1){
28
            pq.pop();
29
        }
30
    }
31
    32
    return ans;
33
}
34
35
int main() {
36
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
37
    int t;
38
    cin>>t;
39
    while(t--){
40
        int n,k;
41
        cin>>n>>k;
42
        vector<int> arr(n);
43
        for(int i=0; i<n; i++) cin>>arr[i];
44
        45
        vector<int> ans = solve(arr,k);
46
        47
        for(auto &i : ans) cout<<i<<"" "";
48
        cout<<endl;
49
    }
50
    return 0;
51
}",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052898
1390052893,unknown,unknown,unknown,"1
def minimum_effort(n, k, arr):
2
    total_sum = sum(arr)
3
    4
    if k == n:
5
        return 0
6
    7
    prefix_sum = [0] * (n + 1)
8
    9
    for i in range(1, n + 1):
10
        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]
11
12
    min_effort = total_sum
13
    14
    for start in range(n - k + 1):
15
        skip_sum = prefix_sum[start + k] - prefix_sum[start]
16
        remaining_effort = total_sum - skip_sum + (n - (start + k))
17
        min_effort = min(min_effort, remaining_effort)
18
    19
    return min_effort
20
21
t = int(input())
22
for _ in range(t):
23
    n, k = map(int, input().split())
24
    arr = list(map(int, input().split()))
25
    result = minimum_effort(n, k, arr)
26
    print(result)",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052893
1390052884,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  
7
    8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    result.append(arr[dq[0]] if dq else 0)
13
    14
    for i in range(k, n):
15
        if dq and dq[0] < i - k + 1:
16
            dq.popleft()
17
        18
        if arr[i] < 0:
19
            dq.append(i)
20
        21
        result.append(arr[dq[0]] if dq else 0)
22
    23
    return result
24
25
t = int(input())  
26
for _ in range(t):
27
    n, k = map(int, input().split())  
28
    arr = list(map(int, input().split()))  
29
    30
    print(*earliest_faulty_readings(arr, k))",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052884
1390052885,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
3
    total_effort = sum(firewalls)
4
    5
 6
    if k == n:
7
        return 0
8
9
   10
    min_effort = total_effort  
11
    12
    for i in range(n):
13
        14
        skipped_effort = total_effort - firewalls[i] 
15
        increased_security = (n - i - 1) 
16
        skipped_effort += increased_security  
17
        18
        min_effort = min(min_effort, skipped_effort)
19
    20
    return min_effort
21
22
# Read input
23
T = int(input())
24
for _ in range(T):
25
    n, k = map(int, input().split())
26
    firewalls = list(map(int, input().split()))
27
    print(min_effort_to_breach(n, k, firewalls))
28",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052885
1390052887,unknown,unknown,unknown,"1
def ans(x):
2
    n = len(x)
3
    min_cost = float('inf')
4
    for left in range(n + 1):
5
        for right in range(n + 1):
6
            if left + right > n:
7
                continue
8
            rem = x[left:n - right]
9
            idle_rem = rem.count('0')
10
            act_dec = x[:left].count('1') + x[n - right:].count('1')
11
            cost = max(idle_rem, act_dec)
12
            if cost < min_cost:
13
                min_cost = cost
14
    return min_cost
15
T = int(input())
16
for _ in range(T):
17
    x = input().strip()
18
    print(ans(x))",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052887
1390052883,unknown,unknown,unknown,"1
def earliest_faulty_in_batches(arr, n, k):
2
    result = []
3
    for i in range(n - k + 1):
4
        batch = arr[i:i + k]
5
        found_fault = False
6
        for num in batch:
7
            if num < 0:
8
                result.append(num)
9
                found_fault = True
10
                break
11
12
        if not found_fault:
13
            result.append(0)
14
    15
    return result
16
17
t = int(input().strip())
18
outputs = []
19
20
for _ in range(t):
21
    n, k = map(int, input().strip().split())
22
    arr = list(map(int, input().strip().split()))
23
    outputs.append(earliest_faulty_in_batches(arr, n, k))
24
25
for output in outputs:
26
    print("" "".join(map(str, output)))",162,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052883
