submission_id,username,problem_name,language,code,page,url
1390052579,unknown,unknown,unknown,"1
def minimize_effort(test_cases):
2
    results = []
3
    4
    for case in test_cases:
5
        n, k, firewalls = case
6
        7
        min_effort = float('inf')
8
        9
        for i in range(1 << n):
10
            skipped_count = 0
11
            current_effort = 0
12
            13
            skipped = []
14
            for j in range(n):
15
                if (i >> j) & 1:
16
                    skipped_count += 1
17
                    skipped.append(j)
18
                    19
            if skipped_count <= k:
20
                effort = 0
21
                increase = 0
22
                23
                for j in range(n):
24
                    if j in skipped:
25
                        increase += 1
26
                    else:
27
                        effort += firewalls[j]
28
                        29
                min_effort = min(min_effort, effort + increase * k)  # Correct effort calculation
30
        31
        results.append(min_effort)
32
    33
    return results
34
35
# Input reading and processing
36
def main():
37
    t = int(input())  # Number of test cases
38
    test_cases = []
39
    40
    for _ in range(t):
41
        n, k = map(int, input().split())  # Number of firewalls and max skips
42
        firewalls = list(map(int, input().split()))  # Strength of each firewall
43
        test_cases.append((n, k, firewalls))
44
    45
    results = minimize_effort(test_cases)
46
    47
    for result in results:
48
        print(result)
49
50
# Run the program
51
if __name__ == ""__main__"":
52
    main()
53",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052579
1390052580,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int t = sc.nextInt();
7
8
        while (t-- > 0) {
9
            int n = sc.nextInt();
10
            int k = sc.nextInt();
11
            int[] arr = new int[n];
12
13
            for (int i = 0; i < n; i++) {
14
                arr[i] = sc.nextInt();
15
            }
16
17
            List<Integer> result = new ArrayList<>();
18
            19
            for (int i = 0; i <= n - k; i++) {
20
                boolean foundFault = false;
21
                for (int j = i; j < i + k; j++) {
22
                    if (arr[j] < 0) {
23
                        result.add(arr[j]);
24
                        foundFault = true;
25
                        break;
26
                    }
27
                }
28
                if (!foundFault) {
29
                    result.add(0);
30
                }
31
            }
32
33
            for (int num : result) {
34
                System.out.print(num + "" "");
35
            }
36
            System.out.println();
37
        }
38
39
        sc.close();
40
    }
41
}",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052580
1390052586,unknown,unknown,unknown,"1
def earliest_faulty_reading(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, arr = case
5
        result = []
6
        for i in range(n - k + 1):
7
            batch = arr[i:i + k]
8
            faulty = next((x for x in batch if x < 0), 0)
9
            result.append(faulty)
10
        results.append(result)
11
    return results
12
13
# Example usage
14
test_cases = [
15
    (5, 2, [-8, 2, 3, -6, 10]),
16
    (8, 3, [12, -1, -7, 8, -15, 30, 16, 28])
17
]
18
19
output = earliest_faulty_reading(test_cases)
20
for res in output:
21
    print("" "".join(map(str, res)))
22",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052586
1390052574,unknown,unknown,unknown,"1
def earliest_fault_in_batches(arr, k):
2
    results = []
3
    n = len(arr)
4
    5
    6
    for i in range(n - k + 1):
7
        batch = arr[i:i+k]
8
        9
        10
        fault_found = False
11
        for val in batch:
12
            if val < 0:
13
                results.append(val)
14
                fault_found = True
15
                break
16
        17
        18
        if not fault_found:
19
            results.append(0)
20
    21
    return results
22
23
24
def solve_test_cases():
25
    t = int(input())  
26
    results = []
27
    28
    for _ in range(t):
29
        n, k = map(int, input().split())
30
        arr = list(map(int, input().split()))
31
        32
        batch_results = earliest_fault_in_batches(arr, k)
33
        results.append(batch_results)
34
    35
    36
    for batch_result in results:
37
        print(*batch_result)
38
39
40
if __name__ == ""__main__"":
41
    solve_test_cases()",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052574
1390052577,unknown,unknown,unknown,"1
def minimum_effort(n, k, arr):
2
    total_sum = sum(arr)
3
    4
    if k == n:
5
        return 0
6
    7
    current_window_sum = sum(arr[:k])
8
    min_effort = total_sum - current_window_sum + (n - k)
9
    10
    for i in range(1, n - k + 1):
11
        current_window_sum += arr[i + k - 1] - arr[i - 1]
12
        effort = total_sum - current_window_sum + (n - (i + k))
13
        min_effort = min(min_effort, effort)
14
    15
    return min_effort
16
17
t = int(input())
18
for _ in range(t):
19
    n, k = map(int, input().split())
20
    arr = list(map(int, input().split()))
21
    result = minimum_effort(n, k, arr)
22
    print(result)",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052577
1390052573,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string) 
3
    total_active = server_string.count('1')
4
    total_idle = server_string.count('0')
5
    min_cost = float('inf')
6
    for left in range(n + 1):  
7
        for right in range(n + 1 - left):  
8
            if left + right == n:
9
                continue
10
            remaining = server_string[left:n-right]
11
            remaining_idle = remaining.count('0')
12
            active_removed = total_active - remaining.count('1')
13
            cost = max(remaining_idle, active_removed)
14
            min_cost = min(min_cost, cost)
15
    return min_cost
16
17
def solve():
18
    t = int(input())
19
    for _ in range(t):
20
        server_string = input().strip()
21
        result = min_decommission_cost(server_string)
22
        print(result)
23
24
solve()",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052573
1390052566,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)  # Case where no firewall is skipped
3
    4
    if k == n:
5
        return 0  # If we can skip all firewalls, effort is zero
6
    7
    min_effort = total_effort  # Initialize min_effort with total sum
8
    9
    for i in range(n):
10
        skipped_effort = total_effort - firewalls[i] + k  # Skip firewall i
11
        min_effort = min(min_effort, skipped_effort)
12
    13
    return min_effort
14
15
def main():
16
    t = int(input())
17
    for _ in range(t):
18
        n, k = map(int, input().split())
19
        firewalls = list(map(int, input().split()))
20
        print(min_effort(n, k, firewalls))
21
22
if __name__ == ""__main__"":
23
    main()
24",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052566
1390052565,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
12
    for i in range(n - k + 1):
13
        if dq:
14
            result.append(arr[dq[0]])
15
        else:
16
            result.append(0)
17
18
        while dq and dq[0] < i + 1:
19
            dq.popleft()
20
21
        if i + k < n and arr[i + k] < 0:
22
            dq.append(i + k)
23
24
    print(*result)
25
26
27
t = int(input())
28
for _ in range(t):
29
    n, k = map(int, input().split())
30
    arr = list(map(int, input().split()))
31
    earliest_faulty_readings(arr, k)",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052565
1390052571,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the first result
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process remaining windows
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of this window
18
        if dq and dq[0] < i - k + 1:
19
            dq.popleft()
20
        21
        # Add new element if it's negative
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store result for the current window
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
# Reading input
31
t = int(input())
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    36
    print(*earliest_faulty_readings(arr, k))",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052571
1390052561,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner sc = new Scanner(System.in);
9
        int T = sc.nextInt();
10
        while (T-- > 0) {
11
            int n = sc.nextInt();
12
            int k = sc.nextInt();
13
            int[] a = new int[n];
14
            for (int i = 0; i < n; i++) a[i] = sc.nextInt();
15
            16
            long[][] dp = new long[n + 1][k + 1];
17
            for (int i = 0; i <= n; i++) {
18
                for (int j = 0; j <= k; j++) {
19
                    dp[i][j] = Long.MAX_VALUE;
20
                }
21
            }
22
            dp[0][0] = 0;
23
            24
            for (int i = 0; i < n; i++) {
25
                for (int j = 0; j <= k; j++) {
26
                    if (dp[i][j] == Long.MAX_VALUE) continue;
27
                    dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j] + a[i] + j);
28
                    if (j + 1 <= k) {
29
                        dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i][j]);
30
                    }
31
                }
32
            }
33
            34
            long minEffort = Long.MAX_VALUE;
35
            for (int j = 0; j <= k; j++) {
36
                minEffort = Math.min(minEffort, dp[n][j]);
37
            }
38
            System.out.println(minEffort);
39
        }
40
        sc.close();
41
    }
42
}",174,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052561
