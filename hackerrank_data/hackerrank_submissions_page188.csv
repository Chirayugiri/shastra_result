submission_id,username,problem_name,language,code,page,url
1390052102,unknown,unknown,unknown,"1
def find_earliest_faults(arr, k):
2
   3
    result = []
4
    for i in range(len(arr) - k + 1):
5
        batch = arr[i:i + k]
6
        earliest_fault = 0
7
        for j, reading in enumerate(batch):
8
            if reading < 0:
9
                earliest_fault = reading
10
                break
11
        result.append(earliest_fault)
12
    return result
13
14
def solve():
15
    t = int(input())
16
    for _ in range(t):
17
        n, k = map(int, input().split())
18
        arr = list(map(int, input().split()))
19
        result = find_earliest_faults(arr, k)
20
        print(*result)
21
22
solve()",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052102
1390052105,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
3
    results = []
4
5
    6
7
    # Loop through each possible batch
8
9
    for i in range(len(arr) - k + 1):
10
11
        fault_found = False
12
13
        14
15
        # Find earliest fault in current batch
16
17
        for j in range(i, i + k):
18
19
            if arr[j] < 0:
20
21
                results.append(arr[j])
22
23
                fault_found = True
24
25
                break
26
27
                28
29
        # If no fault found in batch, append 0
30
31
        if not fault_found:
32
33
            results.append(0)
34
35
    36
37
    return results
38
39
# Process test cases
40
41
t = int(input())
42
43
for _ in range(t):
44
45
    n, k = map(int, input().split())
46
47
    arr = list(map(int, input().split()))
48
49
    50
51
    result = earliest_fault(arr, k)
52
53
    print(*result)",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052105
1390052112,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
    result = []
3
    4
    for i in range(len(arr) - k + 1):
5
        # Check each batch of size k
6
        batch = arr[i:i+k]
7
        fault_found = False
8
        9
        # Find the earliest fault in the current batch
10
        for num in batch:
11
            if num < 0:
12
                result.append(num)
13
                fault_found = True
14
                break
15
        16
        # If no fault is found in the batch, append 0
17
        if not fault_found:
18
            result.append(0)
19
    20
    return result
21
22
# Process the input
23
t = int(input())  # Number of test cases
24
25
for _ in range(t):
26
    n, k = map(int, input().split())  # Array size and batch size
27
    arr = list(map(int, input().split()))  # Array elements
28
    29
    result = earliest_fault(arr, k)
30
    print(*result)  # Print the result",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052112
1390052084,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_fault_in_batches(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    for i in range(len(arr) - k + 1):
12
        if dq:
13
            result.append(arr[dq[0]])
14
        else:
15
            result.append(0)
16
        17
        while dq and dq[0] < i + 1:
18
            dq.popleft()
19
        20
        if i + k < len(arr) and arr[i + k] < 0:
21
            dq.append(i + k)
22
    23
    return result
24
25
# Read input
26
t = int(input())
27
for _ in range(t):
28
    n, k = map(int, input().split())
29
    arr = list(map(int, input().split()))
30
    print(*earliest_fault_in_batches(arr, k))
31",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052084
1390052086,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_reading(n, k, arr):
4
    result = []
5
    window = deque()
6
7
    for i in range(n):
8
        if window and window[0] <= i - k:
9
            window.popleft()
10
        11
        if arr[i] < 0:
12
            window.append(i)
13
        14
        if i >= k - 1:
15
            if window:
16
                result.append(arr[window[0]])
17
            else:
18
                result.append(0)
19
    20
    return result
21
22
t = int(input())
23
for _ in range(t):
24
    n, k = map(int, input().split())
25
    arr = list(map(int, input().split()))
26
    result = earliest_faulty_reading(n, k, arr)
27
    print("" "".join(map(str, result)))",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052086
1390052095,unknown,unknown,unknown,"1
from collections import deque
2
3
def find_earliest_faults(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        fault_indices = deque()
8
        batch_results = []
9
        10
        for i in range(k):
11
            if arr[i] < 0:
12
                fault_indices.append(i)
13
        14
        batch_results.append(arr[fault_indices[0]] if fault_indices else 0)
15
        16
        for i in range(k, n):
17
            if fault_indices and fault_indices[0] <= i - k:
18
                fault_indices.popleft()
19
            20
            if arr[i] < 0:
21
                fault_indices.append(i)
22
            23
            batch_results.append(arr[fault_indices[0]] if fault_indices else 0)
24
        25
        results.append("" "".join(map(str, batch_results)))
26
    27
    return ""\n"".join(results)
28
29
test_count = int(input())
30
test_cases = []
31
32
for _ in range(test_count):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    test_cases.append((n, k, arr))
36
37
print(find_earliest_faults(test_cases))
38",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052095
1390052064,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process first k elements
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the first result
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process rest of the elements
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of the window
18
        while dq and dq[0] <= i - k:
19
            dq.popleft()
20
        21
        # Add new element if it's negative
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store the result
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
def process_test_cases():
31
    t = int(input())
32
    for _ in range(t):
33
        n, k = map(int, input().split())
34
        arr = list(map(int, input().split()))
35
        print(*earliest_faulty_readings(arr, k))
36
37
if __name__ == ""__main__"":
38
    process_test_cases()",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052064
1390052073,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
void find_earliest_faulty(int arr[], int n, int k) {
5
    for (int i = 0; i <= n - k; i++) {
6
        int found = 0;
7
        for (int j = i; j < i + k; j++) {
8
            if (arr[j] < 0) {
9
                printf(""%d "", arr[j]);
10
                found = 1;
11
                break;
12
            }
13
        }
14
        if (!found) {
15
            printf(""0 "");
16
        }
17
    }
18
    printf(""\n"");
19
}
20
21
int main() {
22
    int t;
23
    scanf(""%d"", &t); // Read number of test cases
24
25
    while (t--) {
26
        int n, k;
27
        scanf(""%d %d"", &n, &k); // Read array size and batch size
28
        29
        int *arr = (int *)malloc(n * sizeof(int)); // Allocate memory for array
30
        for (int i = 0; i < n; i++) {
31
            scanf(""%d"", &arr[i]); // Read array elements
32
        }
33
34
        find_earliest_faulty(arr, n, k); // Process the array
35
36
        free(arr); // Free allocated memory
37
    }
38
39
    return 0;
40
}
41",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052073
1390052079,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
vector<int> earliest_faulty_readings(vector<int>& arr, int k) {
5
    int n = arr.size();
6
    vector<int> result;
7
    deque<int> dq;  // Stores indices of negative numbers
8
9
    // Process first window
10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) dq.push_back(i);
12
    }
13
14
    // Process the sliding window
15
    for (int i = k; i <= n; i++) {
16
        // Append first negative number in the window
17
        if (!dq.empty()) 
18
            result.push_back(arr[dq.front()]);  // First negative in the deque
19
        else 
20
            result.push_back(0);  // No negative number
21
22
        // Remove elements that are out of the current window
23
        while (!dq.empty() && dq.front() < i - k + 1) {
24
            dq.pop_front();
25
        }
26
27
        // Add the next element if negative
28
        if (i < n && arr[i] < 0) {
29
            dq.push_back(i);
30
        }
31
    }
32
33
    return result;
34
}
35
36
int main() {
37
    int t;
38
    cin >> t;  // Number of test cases
39
    while (t--) {
40
        int n, k;
41
        cin >> n >> k;  // Size of array and batch size
42
        vector<int> arr(n);
43
        for (int i = 0; i < n; i++) {
44
            cin >> arr[i];
45
        }
46
        47
        vector<int> result = earliest_faulty_readings(arr, k);
48
        for (int num : result) {
49
            cout << num << "" "";
50
        }
51
        cout << endl;
52
    }
53
    return 0;
54
}
55",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052079
1390052061,unknown,unknown,unknown,"1
def earliest_fault(arr, k):
2
    results = []
3
    4
    # Loop through each possible batch
5
    for i in range(len(arr) - k + 1):
6
        fault_found = False
7
        8
        # Find earliest fault in current batch
9
        for j in range(i, i + k):
10
            if arr[j] < 0:
11
                results.append(arr[j])
12
                fault_found = True
13
                break
14
                15
        # If no fault found in batch, append 0
16
        if not fault_found:
17
            results.append(0)
18
    19
    return results
20
21
# Process test cases
22
t = int(input())
23
for _ in range(t):
24
    n, k = map(int, input().split())
25
    arr = list(map(int, input().split()))
26
    27
    result = earliest_fault(arr, k)
28
    print(*result)",188,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052061
