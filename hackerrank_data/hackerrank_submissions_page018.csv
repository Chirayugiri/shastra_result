submission_id,username,problem_name,language,code,page,url
1390055863,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):
8
        if bin(i).count('1') > k:
9
            continue
10
        11
        current_effort = 0
12
        current_a = a[:] 
13
        14
        for j in range(n):
15
            if (i >> j) & 1:
16
                pass  
17
            else:
18
                current_effort += current_a[j]
19
            20
            for l in range(j + 1, n):
21
                if (i >> j) & 1:
22
                    current_a[l] += 1
23
        24
        min_effort = min(min_effort, current_effort)
25
    26
    return min_effort
27
28
t = int(input())
29
for _ in range(t):
30
    print(solve())",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055863
1390055864,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
#include <string.h>
4
5
int bigger(int x, int y) {
6
    return x > y ? x : y;
7
}
8
9
int smaller(int x, int y) {
10
    return x < y ? x : y;
11
}
12
13
int main() {
14
    int testCount;
15
    scanf(""%d"", &testCount);
16
    17
    for (int test = 0; test < testCount; test++) {
18
        char rack[100001];
19
        scanf(""%s"", rack);
20
        21
        int length = strlen(rack);
22
        23
        int *ones = (int*)calloc(length + 1, sizeof(int));
24
        int *zeros = (int*)calloc(length + 1, sizeof(int));
25
        26
        for (int i = 0; i < length; i++) {
27
            ones[i + 1] = ones[i] + (rack[i] == '1' ? 1 : 0);
28
            zeros[i + 1] = zeros[i] + (rack[i] == '0' ? 1 : 0);
29
        }
30
        31
        int bestResult = length;
32
        33
        for (int front = 0; front <= length; front++) {
34
            for (int back = 0; back <= length - front; back++) {
35
                int removedOnes = ones[front] + (ones[length] - ones[length - back]);
36
                int remainingZeros = zeros[length - back] - zeros[front];
37
                38
                int currentCost = bigger(removedOnes, remainingZeros);
39
                bestResult = smaller(bestResult, currentCost);
40
            }
41
        }
42
        43
        printf(""%d\n"", bestResult);
44
        45
        free(ones);
46
        free(zeros);
47
    }
48
    49
    return 0;
50
}",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055864
1390055861,unknown,unknown,unknown,"1
def solve():
2
    import sys
3
    input_data = sys.stdin.read().splitlines()
4
    t = int(input_data[0].strip())
5
    line = 1
6
    out_lines = []
7
    for _ in range(t):
8
        s = input_data[line].strip()
9
        line += 1
10
        n = len(s)
11
        # get indices for active servers ('1')
12
        positions = [i for i, ch in enumerate(s) if ch == '1']
13
        m = len(positions)
14
        if m == 0:
15
            out_lines.append(""0"")
16
            continue
17
        # Precompute A: A[i] = positions[i] - i
18
        A = [positions[i] - i for i in range(m)]
19
        20
        # check(X) returns True if there exists a window in A
21
        # such that:
22
        #    window length >= m - X   (i.e. j - i + 1 >= m - X)
23
        # and A[j] - A[i] <= X.
24
        def check(X):
25
            # if m - X <= 0, we can keep fewer than 1 one (so automatically ok)
26
            if m - X <= 0:
27
                return True
28
            j = 0
29
            for i in range(m):
30
                if j < i:
31
                    j = i
32
                # slide j as far as possible while A[j]-A[i] <= X
33
                while j < m and A[j] - A[i] <= X:
34
                    j += 1
35
                # j now is one past the last index satisfying condition, so the window has length (j - i)
36
                if j - i >= m - X:
37
                    return True
38
            return False
39
40
        # Binary search for the minimum X
41
        lo, hi, ans = 0, n, n
42
        while lo <= hi:
43
            mid = (lo + hi) // 2
44
            if check(mid):
45
                ans = mid
46
                hi = mid - 1
47
            else:
48
                lo = mid + 1
49
        out_lines.append(str(ans))
50
    51
    sys.stdout.write(""\n"".join(out_lines))
52
    53
if __name__ == '__main__':
54
    solve()",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055861
1390055850,unknown,unknown,unknown,"1
def min_effort_to_breach(firewall_strengths, k):
2
    n = len(firewall_strengths)
3
    if k >= n:
4
        return 0
5
    indexed_strengths = [(i, strength) for i, strength in enumerate(firewall_strengths)]
6
    memo = {}
7
    8
    def solve(idx, skips_left, skipped_so_far):
9
        if idx == n:
10
            return 0
11
        12
        key = (idx, skips_left, skipped_so_far)
13
        if key in memo:
14
            return memo[key]
15
        16
        current_strength = firewall_strengths[idx] + skipped_so_far
17
        18
        effort_breach = current_strength + solve(idx + 1, skips_left, skipped_so_far)
19
        effort_skip = float('inf')
20
        if skips_left > 0:
21
            effort_skip = solve(idx + 1, skips_left - 1, skipped_so_far + 1)
22
        23
        result = min(effort_breach, effort_skip)
24
        memo[key] = result
25
        return result
26
    27
    return solve(0, k, 0)
28
test_case = int(input())
29
for _ in range(test_case):
30
    a,b = list(map(int,input().split("" "")))
31
    arr = list(map(int,input().split("" "")))
32
    print(min_effort_to_breach(arr,b))
33
    ",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055850
1390055852,unknown,unknown,unknown,"1
def findEarliest(n, k, arr):
2
    res = []
3
    dq = deque()
4
    5
    for i in range(n):
6
        while dq and dq[0] < i - k + 1:
7
            dq.popleft()
8
        9
        if arr[i] < 0:
10
            dq.append(i)
11
        12
        if i >= k - 1:
13
            if dq:
14
                res.append(arr[dq[0]])
15
            else:
16
                res.append(0)
17
    18
    return res
19
20
from collections import deque
21
22
t = int(input())
23
while t > 0:
24
    n, k = map(int, input().split())
25
    arr = list(map(int, input().split()))
26
    27
    result = findEarliest(n, k, arr)
28
    print("" "".join(map(str, result)))
29
    30
    t -= 1
31
    ",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055852
1390055857,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    6
    for n, k, arr in test_cases:
7
        result = []
8
        dq = deque()
9
        10
        # Process first window
11
        for i in range(k):
12
            if arr[i] < 0:
13
                dq.append(i)
14
        15
        # Store the first result
16
        result.append(arr[dq[0]] if dq else 0)
17
        18
        # Process remaining windows
19
        for i in range(k, n):
20
            # Remove elements no longer in window
21
            if dq and dq[0] <= i - k:
22
                dq.popleft()
23
            24
            # Add new element if it's faulty
25
            if arr[i] < 0:
26
                dq.append(i)
27
            28
            # Store result for current window
29
            result.append(arr[dq[0]] if dq else 0)
30
        31
        results.append("" "".join(map(str, result)))
32
    33
    return results
34
35
# Read input
36
t = int(input())
37
test_cases = []
38
for _ in range(t):
39
    n, k = map(int, input().split())
40
    arr = list(map(int, input().split()))
41
    test_cases.append((n, k, arr))
42
43
# Compute and print output
44
for res in earliest_faulty_readings(test_cases):
45
    print(res)",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055857
1390055845,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    4
    if k == 0:
5
        return total_effort  
6
7
    firewalls.sort()  
8
    min_skipped = sum(firewalls[:k])  
9
10
    return total_effort - min_skipped  
11
12
t = int(input())
13
for _ in range(t):
14
    n, k = map(int, input().split())
15
    firewalls = list(map(int, input().split()))
16
    print(min_effort(n, k, firewalls))
17
18",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055845
1390055844,unknown,unknown,unknown,"1
def find_earliest_faults(arr, k):
2
    result = []
3
    for i in range(len(arr) - k + 1):
4
        batch = arr[i:i + k]
5
        earliest_fault = 0
6
        for j, reading in enumerate(batch):
7
            if reading < 0:
8
                earliest_fault = reading
9
                break
10
        result.append(earliest_fault)
11
    return result
12
13
if __name__ == ""__main__"":
14
    num_test_cases = int(input())  # Read the number of test cases
15
16
    for _ in range(num_test_cases):  # Iterate through test cases
17
        input_line = input().split()
18
        n = int(input_line[0])
19
        k = int(input_line[1])
20
        arr = list(map(int, input().split()))
21
22
        faults = find_earliest_faults(arr, k)
23
        print(*faults)",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055844
1390055848,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
12
    for i in range(k, n + 1):
13
        if dq:
14
            result.append(arr[dq[0]])
15
        else:
16
            result.append(0)
17
18
        while dq and dq[0] < i - k + 1:
19
            dq.popleft()
20
21
        if i < n and arr[i] < 0:
22
            dq.append(i)
23
24
    return result
25
26
def solve():
27
    t = int(input())
28
    for _ in range(t):
29
        n, k = map(int, input().split())
30
        arr = list(map(int, input().split()))
31
        result = earliest_faulty_readings(arr, k)
32
        print(*result)
33
34
solve()
35",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055848
1390055843,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",18,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055843
