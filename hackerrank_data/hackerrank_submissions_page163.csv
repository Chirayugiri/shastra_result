submission_id,username,problem_name,language,code,page,url
1390052871,unknown,unknown,unknown,"1
def minimize_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    4
    # Create list of (value + index) for each firewall
5
    skip_value = []
6
    for i in range(n):
7
        skip_value.append((firewalls[i] + i, i))
8
9
    # Sort by descending benefit to skip
10
    skip_value.sort(reverse=True)
11
12
    # Mark which firewalls to skip
13
    skipped = [0] * n
14
    for i in range(k):
15
        _, idx = skip_value[i]
16
        skipped[idx] = 1
17
18
    # Now calculate final effort
19
    effort = 0
20
    penalty = 0
21
    for i in range(n):
22
        if skipped[i]:
23
            penalty += 1
24
        else:
25
            effort += firewalls[i] + penalty
26
27
    return effort
28
29
# Main driver
30
T = int(input())
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    firewalls = list(map(int, input().split()))
34
    print(minimize_effort(n, k, firewalls))
35
36
    ",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052871
1390052875,unknown,unknown,unknown,"1
def min_firewall_effort(n, k, firewalls):
2
    min_effort = float('inf')
3
4
    for i in range(1 << n):  
5
        skipped_count = bin(i).count('1')
6
        if skipped_count <= k:
7
            current_effort = 0
8
            current_firewalls = firewalls[:]  
9
            skipped_indices = []
10
11
            for j in range(n):
12
                if (i >> j) & 1:
13
                    skipped_indices.append(j)
14
15
            skipped_indices.sort()
16
            17
            for index in skipped_indices:
18
                for l in range(index + 1, n):
19
                    current_firewalls[l] += 1
20
21
            for j in range(n):
22
                if not (i >> j) & 1:
23
                    current_effort += current_firewalls[j]
24
25
            min_effort = min(min_effort, current_effort)
26
27
    return min_effort
28
29
if __name__ == ""__main__"":
30
    t = int(input())
31
    for _ in range(t):
32
        n, k = map(int, input().split())
33
        firewalls = list(map(int, input().split()))
34
        result = min_firewall_effort(n, k, firewalls)
35
        print(result)
36",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052875
1390052880,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        first, last = s.find('1'), s.rfind('1')
5
        if first == -1: 
6
            results.append(0)
7
            continue
8
9
        # Count 0's between the first and last '1'
10
        idle_servers = s[first:last + 1].count('0')
11
12
        # Count 1's outside the range [first, last]
13
        active_removed = s[:first].count('1') + s[last + 1:].count('1')
14
15
        results.append(max(idle_servers, active_removed))
16
17
    return results
18
19
t = int(input())
20
test_cases = [input().strip() for _ in range(t)]
21
22
for output in min_decommission_cost(test_cases):
23
    print(output)
24",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052880
1390052865,unknown,unknown,unknown,"1
def calculate_minimum_cost(rack):
2
    n = len(rack)
3
    min_cost = float('inf')
4
    5
    for i in range(n+1):
6
        for j in range(n+1):
7
            if i + j <= n:
8
                remaining_rack = rack[i:n-j]
9
                idle_servers = remaining_rack.count('0')
10
                active_servers_removed = rack[:i].count('1') + rack[n-j:].count('1')
11
                cost = max(idle_servers, active_servers_removed)
12
                min_cost = min(min_cost, cost)
13
    14
    return min_cost
15
16
def process_test_cases():
17
    t = int(input())  
18
    for _ in range(t):
19
        rack = input().strip()  
20
        print(calculate_minimum_cost(rack))
21
22
23
process_test_cases()
24",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052865
1390052869,unknown,unknown,unknown,"1
def min_effort_to_breach(T, test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        if k == n:
6
            results.append(""0"")  # If we can skip all firewalls, effort is 0
7
            continue
8
9
        total_effort = sum(firewalls)
10
        min_effort = total_effort
11
12
        # Compute initial window sum of the first k firewalls
13
        window_sum = sum(firewalls[:k])
14
        15
        # Calculate the increasing penalty sum dynamically
16
        penalty_sum = k * (k + 1) // 2  # Sum of first k natural numbers
17
18
        for i in range(n - k + 1):
19
            new_effort = total_effort - window_sum + penalty_sum
20
            min_effort = min(min_effort, new_effort)
21
22
            # Move the sliding window
23
            if i + k < n:
24
                window_sum = window_sum - firewalls[i] + firewalls[i + k]
25
26
        results.append(str(min_effort))
27
28
    return ""\n"".join(results)
29
30
# Read input
31
T = int(input())
32
test_cases = []
33
34
for _ in range(T):
35
    n, k = map(int, input().split())
36
    firewalls = list(map(int, input().split()))
37
    test_cases.append((n, k, firewalls))
38
39
# Compute and print results
40
print(min_effort_to_breach(T, test_cases))
41",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052869
1390052867,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
8
        Scanner sc = new Scanner(System.in);
9
        int T = sc.nextInt();
10
        while (T-- > 0) {
11
            String rack = sc.next();
12
            int n = rack.length();
13
            int[] prefixZero = new int[n + 1];
14
            int[] prefixOne = new int[n + 1];
15
            for (int i = 0; i < n; i++) {
16
                prefixZero[i + 1] = prefixZero[i] + (rack.charAt(i) == '0' ? 1 : 0);
17
                prefixOne[i + 1] = prefixOne[i] + (rack.charAt(i) == '1' ? 1 : 0);
18
            }
19
20
            int minCost = n;
21
            for (int i = 0; i <= n; i++) {
22
                int onesInPrefix = prefixOne[i];
23
                int zerosBefore = prefixZero[i];
24
                for (int j = 0; j <= n - i; j++) {
25
                    // Remaining segment: from index i to (n-1-j)
26
                    int onesInSuffix = prefixOne[n] - prefixOne[n - j];
27
                    int zerosInSuffix = prefixZero[n] - prefixZero[n - j];
28
                    int idleRemaining = (prefixZero[n] - zerosBefore - zerosInSuffix);
29
                    int activeDecommissioned = onesInPrefix + onesInSuffix;
30
                    int cost = Math.max(idleRemaining, activeDecommissioned);
31
                    minCost = Math.min(minCost, cost);
32
                }
33
            }
34
            // Special case: must decommission at least from the beginning
35
            if (minCost == prefixOne[n] && prefixOne[n] > 0) {
36
                minCost = Math.min(minCost, Math.max(prefixZero[n], prefixOne[n] - prefixOne[1]));
37
            }
38
            System.out.println(minCost);
39
        }
40
        sc.close();
41
    }
42
}",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052867
1390052861,unknown,unknown,unknown,"1
def min_effort_to_breach(test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        min_effort = sum(firewalls)  # Default case: No skips
6
        7
        for i in range(n - k + 1):  # Try skipping from each valid position
8
            effort = sum(firewalls[:i])  # Effort before skipped firewalls
9
            extra_security = 0
10
            11
            for j in range(i, n):
12
                if j - i < k:  # Skip up to k firewalls
13
                    extra_security += 1
14
                else:
15
                    effort += firewalls[j] + extra_security  # Apply increment effect
16
            17
            min_effort = min(min_effort, effort)
18
        19
        results.append(min_effort)
20
    21
    return ""\n"".join(map(str, results))
22
23
# Read input
24
t = int(input())
25
test_cases = []
26
for _ in range(t):
27
    n, k = map(int, input().split())
28
    firewalls = list(map(int, input().split()))
29
    test_cases.append((n, k, firewalls))
30
31
# Compute and print results
32
print(min_effort_to_breach(test_cases))
33",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052861
1390052862,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Solution {
4
    public static void main(String[] args) {
5
        Scanner s = new Scanner(System.in);
6
        int t = s.nextInt();  // Number of test cases
7
        8
        while (t-- > 0) {
9
            int n = s.nextInt();
10
            int k = s.nextInt();
11
            int[] arr = new int[n];
12
13
            for (int i = 0; i < n; i++) {
14
                arr[i] = s.nextInt();
15
            }
16
17
            // Using a queue to track the index of negative numbers
18
            Queue<Integer> queue = new LinkedList<>();
19
            int i = 0;
20
21
            // Process first window
22
            for (i = 0; i < k; i++) {
23
                if (arr[i] < 0) {
24
                    queue.add(i);
25
                }
26
            }
27
28
            // Process remaining windows
29
            for (; i < n; i++) {
30
                // Print first negative number of previous window
31
                if (!queue.isEmpty()) {
32
                    System.out.print(arr[queue.peek()] + "" "");
33
                } else {
34
                    System.out.print(""0 "");
35
                }
36
37
                // Remove elements that are out of this window
38
                while (!queue.isEmpty() && queue.peek() <= i - k) {
39
                    queue.poll();
40
                }
41
42
                // Add current element if it's negative
43
                if (arr[i] < 0) {
44
                    queue.add(i);
45
                }
46
            }
47
48
            // Print for last window
49
            if (!queue.isEmpty()) {
50
                System.out.print(arr[queue.peek()] + "" "");
51
            } else {
52
                System.out.print(""0 "");
53
            }
54
55
            System.out.println();
56
        }
57
        s.close();
58
    }
59
}
60",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052862
1390052863,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    min_cost = float('inf')
6
    7
    for i in range(n + 1):
8
        for j in range(n - i + 1):
9
            10
            remaining = s[i:n - j]
11
            12
            idle_remaining = remaining.count('0')
13
            active_removed = s[:i].count('1') + s[n - j:].count('1')
14
            15
            cost = max(idle_remaining, active_removed)
16
            min_cost = min(min_cost, cost)
17
            18
    print(min_cost)
19
20
t = int(input())
21
for _ in range(t):
22
    solve()",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052863
1390052860,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
        while (t-- > 0) {
9
            int n = scanner.nextInt();
10
            int k = scanner.nextInt();
11
            int[] a = new int[n];
12
            for (int j = 0; j < n; j++) {
13
                a[j] = scanner.nextInt();
14
            }
15
            solve(n, k, a);
16
        }
17
        scanner.close();
18
    }
19
20
    public static void solve(int n, int k, int[] a) {
21
        long minEffort = Long.MAX_VALUE;
22
23
        for (int i = 0; i < (1 << n); i++) {
24
            int skippedCount = Integer.bitCount(i);
25
26
            if (skippedCount <= k) {
27
                long effort = 0;
28
                int increasedStrength = 0;
29
                int currentSkippedIndex = 0;
30
                int[] skippedIndices = new int[skippedCount];
31
                int skippedIndexPointer = 0;
32
33
                for (int j = 0; j < n; j++) {
34
                    if ((i & (1 << j)) != 0) {
35
                        skippedIndices[skippedIndexPointer++] = j;
36
                    }
37
                }
38
39
                for (int j = 0; j < n; j++) {
40
                    if (currentSkippedIndex < skippedCount && currentSkippedIndex < skippedIndices.length && skippedIndices[currentSkippedIndex] == j) {
41
                        increasedStrength++;
42
                        currentSkippedIndex++;
43
                    } else {
44
                        effort += (long) a[j] + increasedStrength;
45
                    }
46
                }
47
                minEffort = Math.min(minEffort, effort);
48
            }
49
        }
50
        System.out.println(minEffort);
51
    }
52
}",163,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052860
