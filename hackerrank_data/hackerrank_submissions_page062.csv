submission_id,username,problem_name,language,code,page,url
1390054871,unknown,unknown,unknown,"1
def min_decommission_cost(s: str) -> int:
2
    n = len(s)
3
    ones_pos = [i for i, ch in enumerate(s) if ch == '1']
4
    T = len(ones_pos)
5
    6
    if T == 0:
7
        return 0
8
    9
    zeros_total = s.count('0')
10
    ans = min(zeros_total, T) 
11
    12
    for X in range(1, T + 1):
13
        for i in range(0, T - X + 1):
14
            left = ones_pos[i]
15
            right = ones_pos[i + X - 1]
16
            length = right - left + 1
17
            zeros_in_block = length - X
18
            candidate = max(zeros_in_block, T - X)
19
            ans = min(ans, candidate)
20
    21
    return ans
22
23
if __name__ == '__main__':
24
    T = int(input().strip())
25
    for _ in range(T):
26
        s = input().strip()
27
        print(min_decommission_cost(s))
28",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054871
1390054872,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054872
1390054873,unknown,unknown,unknown,"1
def min_cost_server_optimization(server_rack):
2
    n = len(server_rack)
3
    4
    total_active = server_rack.count('1')
5
    total_idle = server_rack.count('0')
6
    7
    min_cost = float('inf')
8
    9
    10
    for prefix_len in range(n + 1):
11
        prefix_active = server_rack[:prefix_len].count('1')
12
        prefix_idle = prefix_len - prefix_active
13
        14
       15
        for suffix_len in range(n + 1 - prefix_len):
16
            if prefix_len + suffix_len == n:
17
                continue  
18
                19
            suffix_active = server_rack[n-suffix_len:].count('1')
20
            suffix_idle = suffix_len - suffix_active
21
            22
            active_removed = prefix_active + suffix_active
23
            idle_removed = prefix_idle + suffix_idle
24
            25
            remaining_active = total_active - active_removed
26
            remaining_idle = total_idle - idle_removed
27
            28
            cost = max(remaining_idle, active_removed)
29
            min_cost = min(min_cost, cost)
30
    31
    return min_cost
32
33
def main():
34
    t = int(input().strip())
35
    36
    for _ in range(t):
37
        server_rack = input().strip()
38
        result = min_cost_server_optimization(server_rack)
39
        print(result)
40
41
if __name__ == ""__main__"":
42
    main()",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054873
1390054870,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner sc = new Scanner(System.in);
11
        int T = sc.nextInt();
12
        while (T-- > 0) {
13
            String servers = sc.next();
14
            int n = servers.length();
15
            int total0 = 0;
16
            for (int i = 0; i < n; i++) {
17
                if (servers.charAt(i) == '0') {
18
                    total0++;
19
                }
20
            }
21
            int total1 = n - total0;
22
            int[] prefix0 = new int[n + 1], prefix1 = new int[n + 1];
23
            for (int i = 1; i <= n; i++) {
24
                prefix0[i] = prefix0[i - 1] + (servers.charAt(i - 1) == '0' ? 1 : 0);
25
                prefix1[i] = prefix1[i - 1] + (servers.charAt(i - 1) == '1' ? 1 : 0);
26
            }
27
            int[] suffix0 = new int[n + 1], suffix1 = new int[n + 1];
28
            for (int j = 1; j <= n; j++) {
29
                suffix0[j] = suffix0[j - 1] + (servers.charAt(n - j) == '0' ? 1 : 0);
30
                suffix1[j] = suffix1[j - 1] + (servers.charAt(n - j) == '1' ? 1 : 0);
31
            }
32
            int minCost = Integer.MAX_VALUE;
33
            for (int i = 0; i <= n; i++) {
34
                int jMax = n - i;
35
                int left = 0, right = jMax;
36
                int bestJ = 0, bestCost = Integer.MAX_VALUE;
37
                while (left <= right) {
38
                    int mid = (left + right) / 2;
39
                    int remaining0 = total0 - (prefix0[i] + suffix0[mid]);
40
                    int decommissioned1 = prefix1[i] + suffix1[mid];
41
                    int currentCost = Math.max(remaining0, decommissioned1);
42
                    if (currentCost < bestCost) {
43
                        bestCost = currentCost;
44
                        bestJ = mid;
45
                    } else if (currentCost == bestCost && mid < bestJ) {
46
                        bestJ = mid;
47
                    }
48
                    if (decommissioned1 < remaining0) {
49
                        left = mid + 1;
50
                    } else {
51
                        right = mid - 1;
52
                    }
53
                }
54
                for (int dj = -1; dj <= 1; dj++) {
55
                    int j = bestJ + dj;
56
                    if (j >= 0 && j <= jMax) {
57
                        int remaining0 = total0 - (prefix0[i] + suffix0[j]);
58
                        int decommissioned1 = prefix1[i] + suffix1[j];
59
                        int currentCost = Math.max(remaining0, decommissioned1);
60
                        bestCost = Math.min(bestCost, currentCost);
61
                    }
62
                }
63
                minCost = Math.min(minCost, bestCost);
64
            }
65
            System.out.println(minCost);
66
        }
67
        sc.close();
68
    }
69
}
70",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054870
1390054860,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
    public static void main(String[] args) {
5
        import java.util.Scanner;
6
7
public class Main {
8
9
    public static void main(String[] args) {
10
        Scanner sc = new Scanner(System.in);
11
        int T = sc.nextInt();
12
        sc.nextLine(); // Consume the newline after T
13
        while (T-- > 0) {
14
            String s = sc.nextLine().trim();
15
            int n = s.length();
16
            int totalOnes = 0;
17
            int maxConsecutiveOnes = 0;
18
            int currentConsecutiveOnes = 0;
19
            20
            // Calculate totalOnes and maxConsecutiveOnes
21
            for (char c : s.toCharArray()) {
22
                if (c == '1') {
23
                    currentConsecutiveOnes++;
24
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
25
                    totalOnes++;
26
                } else {
27
                    currentConsecutiveOnes = 0;
28
                }
29
            }
30
            31
            // Handle cases where the cost is trivially 0
32
            if (totalOnes == 0) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            if (maxConsecutiveOnes == totalOnes) {
37
                System.out.println(0);
38
                continue;
39
            }
40
            41
            int totalZeros = n - totalOnes;
42
            int low = 0;
43
            int high = Math.max(totalOnes, totalZeros);
44
            int answer = high;
45
            46
            // Binary search for the minimal possible cost
47
            while (low <= high) {
48
                int mid = (low + high) / 2;
49
                int requiredOnes = Math.max(0, totalOnes - mid);
50
                51
                if (requiredOnes == 0) {
52
                    answer = mid;
53
                    high = mid - 1;
54
                    continue;
55
                }
56
                57
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
58
                if (maxOnes >= requiredOnes) {
59
                    answer = mid;
60
                    high = mid - 1;
61
                } else {
62
                    low = mid + 1;
63
                }
64
            }
65
            66
            System.out.println(answer);
67
        }
68
        sc.close();
69
    }
70
    71
    // Helper function to calculate maximum ones in any window with at most k zeros
72
    private static int maxOnesWithAtMostKZeros(String s, int k) {
73
        int left = 0;
74
        int zeros = 0;
75
        int maxOnes = 0;
76
        int n = s.length();
77
        78
        for (int right = 0; right < n; right++) {
79
            if (s.charAt(right) == '0') {
80
                zeros++;
81
            }
82
            // Shrink the window if zeros exceed k
83
            while (zeros > k) {
84
                if (s.charAt(left) == '0') {
85
                    zeros--;
86
                }
87
                left++;
88
            }
89
            // Calculate current number of ones in the window
90
            int currentOnes = (right - left + 1) - zeros;
91
            maxOnes = Math.max(maxOnes, currentOnes);
92
        }
93
        94
        return maxOnes;
95
    }
96
}",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054860
1390054856,unknown,unknown,unknown,"1
def bf(arr, k):
2
    if k >= len(arr):
3
        return 0  
4
    arr.sort(reverse=True)  
5
    rem = arr[k:]
6
    return sum(rem)+1
7
8
t = int(input())
9
for _ in range(t):
10
    n, k = map(int, input().split())
11
    arr = list(map(int, input().split()))
12
    print(bf(arr, k))",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054856
1390054857,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommissioning {
4
5
    public static int minDecommissioningCost(String serverRack) {
6
        int firstOne = serverRack.indexOf('1');
7
        int lastOne = serverRack.lastIndexOf('1');
8
9
        // If there are no active servers (all 0s), cost is 0
10
        if (firstOne == -1) {
11
            return 0;
12
        }
13
14
        // Extract the core segment containing all necessary servers
15
        String coreSegment = serverRack.substring(firstOne, lastOne + 1);
16
17
        // Count remaining idle servers (0s)
18
        int remainingIdle = (int) coreSegment.chars().filter(ch -> ch == '0').count();
19
20
        // Count removed active servers (1s) from the prefix and suffix
21
        int removedActive = (int) serverRack.substring(0, firstOne).chars().filter(ch -> ch == '1').count() +
22
                            (int) serverRack.substring(lastOne + 1).chars().filter(ch -> ch == '1').count();
23
24
        // Return the minimum cost
25
        return Math.max(remainingIdle, removedActive);
26
    }
27
28
    public static void main(String[] args) {
29
        Scanner scanner = new Scanner(System.in);
30
        int T = scanner.nextInt(); // Number of test cases
31
        scanner.nextLine(); // Consume the newline
32
33
        while (T-- > 0) {
34
            String serverRack = scanner.nextLine();
35
            System.out.println(minDecommissioningCost(serverRack));
36
        }
37
38
        scanner.close();
39
    }
40
}
41",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054857
1390054858,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    if k >= n:
3
        return 0
4
5
    impacts = []
6
    7
    for i in range(n):
8
        impact = strengths[i] - (n - i - 1)
9
        impacts.append((impact, i))
10
    11
    impacts.sort(reverse=True)
12
    13
    to_skip = set(impacts[i][1] for i in range(k))
14
    15
    total_effort = 0
16
    penalty = 0
17
    18
    for i in range(n):
19
        if i in to_skip:
20
            penalty += 1
21
        else:
22
            total_effort += strengths[i] + penalty
23
    24
    return total_effort
25
26
def solve_test_cases():
27
28
    t = int(input())  
29
    results = []
30
    31
    for _ in range(t):
32
        n, k = map(int, input().split())
33
        strengths = list(map(int, input().split()))
34
        results.append(min_effort_to_breach(n, k, strengths))
35
    36
    return results
37
38
def main():
39
    results = solve_test_cases()
40
    41
    for result in results:
42
        print(result)
43
44
if __name__ == ""__main__"":
45
    main()
46",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054858
1390054855,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",62,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054855
