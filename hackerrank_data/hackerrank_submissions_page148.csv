submission_id,username,problem_name,language,code,page,url
1390053203,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(test_cases):
4
    results = []
5
    for n, k, arr in test_cases:
6
        dq = deque()
7
        res = []
8
        9
        10
        for i in range(k):
11
            if arr[i] < 0:
12
                dq.append(i)
13
        14
        15
        res.append(arr[dq[0]] if dq else 0)
16
        17
        18
        for i in range(k, n):
19
            20
            if dq and dq[0] <= i - k:
21
                dq.popleft()
22
            23
           24
            if arr[i] < 0:
25
                dq.append(i)
26
            27
            28
            res.append(arr[dq[0]] if dq else 0)
29
        30
        results.append("" "".join(map(str, res)))
31
    32
    return ""\n"".join(results)
33
34
35
t = int(input())
36
test_cases = []
37
for _ in range(t):
38
    n, k = map(int, input().split())
39
    arr = list(map(int, input().split()))
40
    test_cases.append((n, k, arr))
41
42
43
print(earliest_faulty_readings(test_cases))
44",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053203
1390053204,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    for _ in range(test_cases):
4
        n, k = map(int, input().split())
5
        arr = list(map(int, input().split()))
6
        result = []
7
        for i in range(n - k + 1):
8
            batch = arr[i:i+k]
9
            faulty = 0
10
            for num in batch:
11
                if num < 0:
12
                    faulty = num
13
                    break
14
            result.append(faulty)
15
        results.append(result)
16
    return results
17
18
# Read the number of test cases
19
test_cases = int(input())
20
results = earliest_faulty_readings(test_cases)
21
22
# Print the results
23
for result in results:
24
    print(' '.join(map(str, result)) + ' ')",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053204
1390053208,unknown,unknown,unknown,"1
def find_faults(readings, batch_size):
2
    results = []
3
    for i in range(len(readings) - batch_size + 1):
4
        batch = readings[i:i + batch_size]
5
        fault = 0
6
        for r in batch:
7
            if r < 0:
8
                fault = r
9
                break
10
        results.append(fault)
11
    return results
12
13
def process_tests():
14
    tests = int(input())
15
    for _ in range(tests):
16
        n, k = map(int, input().split())
17
        sensor_data = list(map(int, input().split()))
18
        fault_results = find_faults(sensor_data, k)
19
        print(*fault_results)
20
21
process_tests()",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053208
1390053200,unknown,unknown,unknown,"1
def minimum_effort(n, k, arr):
2
    3
    if k == n:
4
        return 0
5
    6
    7
    total_effort = sum(arr)
8
    min_effort = total_effort  # Start with worst case
9
    10
    11
    for i in range(n - k + 1):
12
        current_effort = 0
13
        14
        current_effort += sum(arr[:i])
15
        16
        17
        for j in range(i + k, n):
18
            current_effort += arr[j] + 1
19
        20
        21
        min_effort = min(min_effort, current_effort)
22
    23
    return min_effort
24
25
26
T = int(input())
27
results = []
28
for _ in range(T):
29
    n, k = map(int, input().split())
30
    arr = list(map(int, input().split()))
31
    results.append(str(minimum_effort(n, k, arr)))
32
33
34
print('\n'.join(results))
35",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053200
1390053201,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # Base case: If we skip all firewalls, total effort = 0
3
    if k == n:
4
        return 0
5
6
    # If no skips are allowed, total effort is just the sum of all firewalls
7
    if k == 0:
8
        return sum(firewalls)
9
10
    min_effort = float('inf')
11
12
    # Try skipping up to 'k' firewalls
13
    for i in range(n):
14
        # Skip 'k' firewalls starting from index 'i'
15
        skipped = 0
16
        effort = 0
17
18
        # Count skips and apply penalties
19
        for j in range(n):
20
            if skipped < k and j >= i:
21
                skipped += 1
22
            else:
23
                effort += firewalls[j] + skipped
24
25
        # Track the minimum effort
26
        min_effort = min(min_effort, effort)
27
28
    return min_effort
29
30
31
# Reading input
32
T = int(input().strip())
33
results = []
34
35
for _ in range(T):
36
    n, k = map(int, input().split())
37
    firewalls = list(map(int, input().split()))
38
    results.append(min_effort(n, k, firewalls))
39
40
# Output the results for each test case
41
for res in results:
42
    print(res)
43",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053201
1390053202,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque() 
7
    8
   9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
  14
    result.append(arr[dq[0]] if dq else 0)
15
    16
   17
    for i in range(k, n):
18
        19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
  23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
       27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
32
t = int(input()) 
33
for _ in range(t):
34
    n, k = map(int, input().split())  
35
    arr = list(map(int, input().split()))  
36
    37
    print(*earliest_faulty_readings(arr, k))",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053202
1390053194,unknown,unknown,unknown,"1
import sys
2
3
def f(n, k, a):
4
    if k >= n:
5
        return 0
6
7
    b = sum(a)
8
    c = b
9
10
    for i in range(n):
11
        d = 0
12
        e = 0
13
14
        for j in range(n):
15
            if d < k and j == i:
16
                d += 1
17
                continue
18
            e += a[j] + d
19
20
        c = min(c, e)
21
22
    return c
23
24
t = int(sys.stdin.readline().strip())
25
26
for _ in range(t):
27
    n, k = map(int, sys.stdin.readline().split())
28
    a = list(map(int, sys.stdin.readline().split()))
29
    print(f(n, k, a))
30",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053194
1390053196,unknown,unknown,unknown,"1
import java.util.Arrays;
2
import java.util.Scanner;
3
4
public class FirewallBreachOptimized {
5
6
    public static void main(String[] args) {
7
        Scanner scanner = new Scanner(System.in);
8
        int t = scanner.nextInt();
9
10
        while (t-- > 0) {
11
            int n = scanner.nextInt();
12
            int k = scanner.nextInt();
13
            long[] a = new long[n];
14
            for (int i = 0; i < n; i++) {
15
                a[i] = scanner.nextLong();
16
            }
17
18
            long minEffort = solveOptimized(a, k);
19
            System.out.println(minEffort);
20
        }
21
        scanner.close();
22
    }
23
24
    private static long solveOptimized(long[] a, int k) {
25
        long minEffort = Long.MAX_VALUE;
26
        long[][] dp = new long[a.length + 1][k + 1];
27
28
        for (int i = 0; i <= a.length; i++) {
29
            Arrays.fill(dp[i], Long.MAX_VALUE);
30
        }
31
32
        dp[0][0] = 0;
33
34
        for (int i = 1; i <= a.length; i++) {
35
            for (int j = 0; j <= k; j++) {
36
                // Option 1: Don't skip the current firewall
37
                if (dp[i - 1][j] != Long.MAX_VALUE) {
38
                    long currentEffort = dp[i - 1][j];
39
                    long increasedStrength = a[i - 1];
40
                    for(int l = 0; l < j; l++){
41
                        increasedStrength++;
42
                    }
43
                    dp[i][j] = Math.min(dp[i][j], currentEffort + increasedStrength);
44
                }
45
46
                // Option 2: Skip the current firewall
47
                if (j > 0 && dp[i - 1][j - 1] != Long.MAX_VALUE) {
48
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1]);
49
                }
50
            }
51
        }
52
53
        for (int j = 0; j <= k; j++) {
54
            minEffort = Math.min(minEffort, dp[a.length][j]);
55
        }
56
57
        return minEffort;
58
    }
59
}",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053196
1390053199,unknown,unknown,unknown,"1
def min_effort(firewalls, k):
2
    n = len(firewalls)
3
    4
    if k >= n:
5
        return 0
6
    7
    # dp[i][j] represents min effort for firewalls[i:] with j skips available
8
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
9
    10
    # Base case: when we've processed all firewalls
11
    for j in range(k + 1):
12
        dp[n][j] = 0
13
    14
    # Fill DP table from right to left
15
    for i in range(n - 1, -1, -1):
16
        for j in range(k + 1):
17
            # Option 1: Skip this firewall (if skips remain)
18
            if j > 0:
19
                skip_option = dp[i + 1][j - 1]
20
                dp[i][j] = min(dp[i][j], skip_option)
21
            22
            # Option 2: Don't skip this firewall
23
            # The effort is the firewall value plus the number of skips used so far (k-j)
24
            effort_factor = k - j
25
            no_skip_option = firewalls[i] + effort_factor + dp[i + 1][j]
26
            dp[i][j] = min(dp[i][j], no_skip_option)
27
    28
    return dp[0][k]
29
30
# Handle automatic input
31
t = int(input())
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    firewalls = list(map(int, input().split()))
35
    result = min_effort(firewalls, k)
36
    print(result)",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053199
1390053193,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FaultyComponentDetector {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int t = sc.nextInt(); // Number of test cases
7
8
        while (t-- > 0) {
9
            int n = sc.nextInt(); // Size of the array
10
            int k = sc.nextInt(); // Batch size
11
            int[] arr = new int[n];
12
13
            for (int i = 0; i < n; i++) {
14
                arr[i] = sc.nextInt();
15
            }
16
17
            List<Integer> result = findEarliestFaults(arr, k);
18
            for (int num : result) {
19
                System.out.print(num + "" "");
20
            }
21
            System.out.println();
22
        }
23
24
        sc.close();
25
    }
26
27
    private static List<Integer> findEarliestFaults(int[] arr, int k) {
28
        List<Integer> result = new ArrayList<>();
29
        Deque<Integer> deque = new LinkedList<>();
30
31
        for (int i = 0; i < arr.length; i++) {
32
            // Remove elements that are out of the current window
33
            if (!deque.isEmpty() && deque.peek() < i - k + 1) {
34
                deque.poll();
35
            }
36
37
            // Add new negative number index to the deque
38
            if (arr[i] < 0) {
39
                deque.offer(i);
40
            }
41
42
            // Start collecting results when we have a complete window
43
            if (i >= k - 1) {
44
                result.add(deque.isEmpty() ? 0 : arr[deque.peek()]);
45
            }
46
        }
47
48
        return result;
49
    }
50
}
51",148,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053193
