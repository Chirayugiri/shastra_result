submission_id,username,problem_name,language,code,page,url
1390054690,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
int main() {
5
    int T;
6
    cin >> T; 
7
    for (int t = 0; t < T; t++) {
8
        string s;
9
        cin >> s; 
10
        int n = s.length();
11
12
    13
        vector<int> prefix_0(n + 1, 0);
14
        vector<int> prefix_1(n + 1, 0);
15
        for (int i = 1; i <= n; i++) {
16
            prefix_0[i] = prefix_0[i - 1] + (s[i - 1] == '0' ? 1 : 0);
17
            prefix_1[i] = prefix_1[i - 1] + (s[i - 1] == '1' ? 1 : 0);
18
        }
19
20
      21
        auto check = [&](int k) {
22
            int l = 0;
23
         24
            for (int r = 0; r < n; r++) {
25
              26
                while (l <= r && prefix_0[r + 1] - prefix_0[l] > k) {
27
                    l++;
28
                }
29
    30
                if (l <= r && prefix_1[l] + (prefix_1[n] - prefix_1[r + 1]) <= k) {
31
                    return true;
32
                }
33
            }
34
      35
            if (prefix_1[n] <= k) {
36
                return true;
37
            }
38
            return false;
39
        };
40
41
42
        int low = 0, high = n;
43
        while (low < high) {
44
            int mid = (low + high) / 2;
45
            if (check(mid)) {
46
                high = mid;
47
            } else {
48
                low = mid + 1;
49
            }
50
        }
51
        cout << low << endl;
52
    }
53
    return 0;
54
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054690
1390054696,unknown,unknown,unknown,"1
import sys
2
import threading
3
4
def main():
5
    T = int(sys.stdin.readline())
6
    7
    for _ in range(T):
8
        n, k = map(int, sys.stdin.readline().split())
9
        a = list(map(int, sys.stdin.readline().split()))
10
11
        benefits = []
12
        for i in range(n):
13
            benefit = a[i] - (n - i - 1)
14
            benefits.append((benefit, i))
15
        16
        benefits.sort(reverse=True)
17
18
        skipped = [False] * n
19
20
        for i in range(k):
21
            _, idx = benefits[i]
22
            skipped[idx] = True
23
24
        25
        total_effort = 0
26
        penalty = 0  
27
        for i in range(n):
28
            if skipped[i]:
29
                penalty += 1
30
            else:
31
                total_effort += a[i] + penalty
32
33
        print(total_effort)
34
35
threading.Thread(target=main).start()",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054696
1390054693,unknown,unknown,unknown,"1
def min_cost_server_pruning(server_rack):
2
3
    n = len(server_rack)
4
5
    min_cost = float('inf')
6
7
    8
9
    for i in range(n + 1):
10
11
        for j in range(n + 1 - i):
12
13
            remaining = server_rack[i:n-j]
14
15
            16
17
            # Skip if we've removed everything
18
19
            if not remaining:
20
21
                if server_rack.count('1') == 0:  # If there are no active servers
22
23
                    return 0
24
25
                continue
26
27
            28
29
            idle_remaining = remaining.count('0')
30
31
            32
33
            active_decommissioned = 0
34
35
            if i > 0:
36
37
                active_decommissioned += server_rack[:i].count('1')
38
39
            if j > 0:
40
41
                active_decommissioned += server_rack[n-j:].count('1')
42
43
            44
45
            cost = max(idle_remaining, active_decommissioned)
46
47
            min_cost = min(min_cost, cost)
48
49
    50
51
    return min_cost
52
53
t = int(input())
54
55
for _ in range(t):
56
57
    server_rack = input().strip()
58
59
    print(min_cost_server_pruning(server_rack))",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054693
1390054685,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
int main() {
9
    ios::sync_with_stdio(false);
10
    cin.tie(nullptr);
11
    12
    int T;
13
    cin >> T;
14
    while(T--) {
15
        string s;
16
        cin >> s;
17
        int n = s.size();
18
        19
        vector<int> prefix0(n+1, 0), prefix1(n+1, 0);
20
        for (int i = 0; i < n; i++) {
21
            prefix0[i+1] = prefix0[i] + (s[i] == '0');
22
            prefix1[i+1] = prefix1[i] + (s[i] == '1');
23
        }
24
        int totalOnes = prefix1[n];
25
        26
        // We'll binary search for the minimal cost C in the range [0, n].
27
        int low = 0, high = n, ans = n;
28
        while(low <= high) {
29
            int mid = (low + high) / 2;
30
            bool feasible = false;
31
            32
            33
            for (int l = 0; l <= n; l++) {
34
                35
                int allowed = prefix0[l] + mid;
36
                // Find the first index r (in [l, n+1)) where prefix0[r] > allowed.
37
                int r = upper_bound(prefix0.begin() + l, prefix0.end(), allowed) - prefix0.begin();
38
                // Then the maximum r with zeros constraint is r_max = r - 1.
39
                if(r - 1 < l) continue; // should not happen because at least r = l exists.
40
                int r_max = r - 1;
41
                // Ones kept in s[l, r_max) is:
42
                int onesKept = prefix1[r_max] - prefix1[l];
43
                // We need onesKept >= totalOnes - mid.
44
                if(onesKept >= totalOnes - mid) {
45
                    feasible = true;
46
                    break;
47
                }
48
            }
49
            50
            if(feasible) {
51
                ans = mid;
52
                high = mid - 1;
53
            } else {
54
                low = mid + 1;
55
            }
56
        }
57
        58
        cout << ans << ""\n"";
59
    }
60
    return 0;
61
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054685
1390054686,unknown,unknown,unknown,"1
def minimum_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        skipped = set()
6
        total_effort = 0
7
        penalty = 0
8
        9
        # Find k firewalls with the highest strength to skip
10
        a_sorted_indices = sorted(range(n), key=lambda i: a[i], reverse=True)[:k]
11
        skipped.update(a_sorted_indices)
12
        13
        # Calculate total effort
14
        for i in range(n):
15
            if i in skipped:
16
                penalty += 1
17
            else:
18
                total_effort += a[i] + penalty
19
        20
        print(total_effort)  # Print result instead of returning a list
21
22
# Example test cases for debugging
23
test_cases = [
24
    (4, 1, [5, 10, 11, 5]),
25
    (4, 4, [8, 7, 1, 4])
26
]
27
28
# Running test cases
29
minimum_effort(test_cases)
30",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054686
1390054689,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class FirewallBreach {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt(); // Number of test cases
7
8
        while (T-- > 0) {
9
            int n = scanner.nextInt(); // Number of firewalls
10
            int k = scanner.nextInt(); // Max number of firewalls that can be skipped
11
12
            long[] strengths = new long[n];
13
            for (int i = 0; i < n; i++) {
14
                strengths[i] = scanner.nextLong(); // Strength of each firewall
15
            }
16
17
            System.out.println(minimumEffort(n, k, strengths));
18
        }
19
        scanner.close();
20
    }
21
22
    private static long minimumEffort(int n, int k, long[] strengths) {
23
        if (k >= n) {
24
            return 0; // If we can skip all, then no effort is needed.
25
        }
26
        27
        long totalEffort = 0;
28
        for (int i = 0; i < n; i++) {
29
            totalEffort += strengths[i]; // Calculate total effort without skips
30
        }
31
        32
        // Best effort starts as the scenario where no skips are made
33
        long minEffort = totalEffort;
34
35
        // Iterate through each possible skip quantity
36
        for (int skips = 1; skips <= k; skips++) {
37
            for (int start = 0; start + skips <= n; start++) {
38
                long skippedEffort = 0;
39
40
                // Calculate effort if skipping from 'start' to 'start + skips - 1'
41
                for (int i = 0; i < start; i++) {
42
                    skippedEffort += strengths[i];
43
                }
44
                for (int i = start + skips; i < n; i++) {
45
                    skippedEffort += strengths[i] + (i - (start + skips) + 1);
46
                }
47
48
                minEffort = Math.min(minEffort, skippedEffort);
49
            }
50
        }
51
52
        return minEffort;
53
    }
54
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390054689
1390054669,unknown,unknown,unknown,"1
def min_decommission_cost(s):
2
    n, total_ones = len(s), s.count('1')
3
    min_cost, left_ones = n, 0  
4
5
    for l in range(n + 1):
6
        right_ones = 0
7
        for r in range(n - l + 1):
8
            cost = max(s[l:n-r].count('0'), left_ones + right_ones)
9
            min_cost = min(min_cost, cost)
10
            if r < n - l and s[n - r - 1] == '1':
11
                right_ones += 1
12
        if l < n and s[l] == '1':
13
            left_ones += 1
14
15
    return min_cost
16
17
# Read input
18
t = int(input())
19
for _ in range(t):
20
    print(min_decommission_cost(input()))
21",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054669
1390054670,unknown,unknown,unknown,"1
def solve():
2
    """"""Solves the server decommissioning problem.""""""
3
4
    T = int(input())
5
    for _ in range(T):
6
        servers = input().strip()
7
        n = len(servers)
8
9
        min_cost = float('inf')
10
11
        for i in range(n + 1):  # Remove i from start
12
            for j in range(n - i + 1):  # Remove j from end
13
                remaining = servers[i:n - j]
14
15
                idle_count = remaining.count('0')
16
                active_removed = servers[:i].count('1') + servers[n - j:].count('1')
17
18
                min_cost = min(min_cost, max(idle_count, active_removed))
19
20
        print(min_cost)
21
22
solve()
23
24",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054670
1390054681,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054681
1390054667,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
3
using namespace std;
4
5
int main() {
6
7
    int T;
8
9
    cin >> T; 
10
11
    for (int t = 0; t < T; t++) {
12
13
        string s;
14
15
        cin >> s; 
16
17
        int n = s.length();
18
19
    20
21
        vector<int> prefix_0(n + 1, 0);
22
23
        vector<int> prefix_1(n + 1, 0);
24
25
        for (int i = 1; i <= n; i++) {
26
27
            prefix_0[i] = prefix_0[i - 1] + (s[i - 1] == '0' ? 1 : 0);
28
29
            prefix_1[i] = prefix_1[i - 1] + (s[i - 1] == '1' ? 1 : 0);
30
31
        }
32
33
      34
35
        auto check = [&](int k) {
36
37
            int l = 0;
38
39
         40
41
            for (int r = 0; r < n; r++) {
42
43
              44
45
                while (l <= r && prefix_0[r + 1] - prefix_0[l] > k) {
46
47
                    l++;
48
49
                }
50
51
                // wtf ,  check number of 1's decommissioned
52
53
                if (l <= r && prefix_1[l] + (prefix_1[n] - prefix_1[r + 1]) <= k) {
54
55
                    return true;
56
57
                }
58
59
            }
60
61
      62
63
            if (prefix_1[n] <= k) {
64
65
                return true;
66
67
            }
68
69
            return false;
70
71
        };
72
73
        // Binary search for minimum cost
74
75
        int low = 0, high = n;
76
77
        while (low < high) {
78
79
            int mid = (low + high) / 2;
80
81
            if (check(mid)) {
82
83
                high = mid;
84
85
            } else {
86
87
                low = mid + 1;
88
89
            }
90
91
        }
92
93
        cout << low << endl;
94
95
    }
96
97
    return 0;
98
99
}",71,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390054667
