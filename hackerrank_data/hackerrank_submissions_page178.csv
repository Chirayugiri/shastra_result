submission_id,username,problem_name,language,code,page,url
1390052461,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
8
    # Process first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
13
    # Process all sliding windows
14
    for i in range(n - k + 1):
15
        # Append first negative in current window
16
        if dq:
17
            result.append(arr[dq[0]])
18
        else:
19
            result.append(0)
20
21
        # Remove elements that are out of window
22
        while dq and dq[0] < i + 1:
23
            dq.popleft()
24
25
        # Add next element if negative
26
        if i + k < n and arr[i + k] < 0:
27
            dq.append(i + k)
28
29
    print(*result)
30
31
# Reading input
32
t = int(input())
33
for _ in range(t):
34
    n, k = map(int, input().split())
35
    arr = list(map(int, input().split()))
36
    earliest_faulty_readings(arr, k)",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052461
1390052462,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052462
1390052468,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
        while (t-- > 0) {
9
            int n = scanner.nextInt();
10
            int k = scanner.nextInt();
11
            int[] a = new int[n];
12
            for (int i = 0; i < n; i++) {
13
                a[i] = scanner.nextInt();
14
            }
15
            System.out.println(solve(n, k, a));
16
        }
17
        scanner.close();
18
    }
19
20
    public static long solve(int n, int k, int[] a) {
21
        long minEffort = Long.MAX_VALUE;
22
23
        for (int i = 0; i <= k; i++) {
24
            long effort = 0;
25
            int skipped = 0;
26
            int increasedStrength = 0;
27
            int remainingSkips = k;
28
29
            for (int j = 0; j < n; j++) {
30
                if (skipped < i && remainingSkips > 0) {
31
                    skipped++;
32
                    remainingSkips--;
33
                    increasedStrength++;
34
                } else {
35
                    effort += a[j] + increasedStrength -1;
36
                    if(a[j] < 0){
37
                      effort +=1;
38
                    }
39
                }
40
            }
41
42
            minEffort = Math.min(minEffort, effort);
43
        }
44
45
        return minEffort;
46
    }
47
}",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052468
1390052454,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner scanner = new Scanner(System.in);
11
        int t = scanner.nextInt(); // Number of test cases
12
        13
        for (int testCase = 0; testCase < t; testCase++) {
14
            int n = scanner.nextInt(); // Size of array
15
            int k = scanner.nextInt(); // Batch size
16
            17
            int[] arr = new int[n];
18
            for (int i = 0; i < n; i++) {
19
                arr[i] = scanner.nextInt();
20
            }
21
            22
            // Process each batch and find earliest fault
23
            for (int i = 0; i <= n - k; i++) {
24
                int earliestFault = findEarliestFault(arr, i, i + k - 1);
25
                System.out.print(earliestFault + "" "");
26
            }
27
            System.out.println();
28
        }
29
        30
        scanner.close();
31
    }
32
    33
    // Function to find the earliest fault (negative reading) in a batch
34
    private static int findEarliestFault(int[] arr, int start, int end) {
35
        for (int i = start; i <= end; i++) {
36
            if (arr[i] < 0) {
37
                return arr[i]; // Return the first negative reading
38
            }
39
        }
40
        return 0; // No faults found
41
    }
42
}",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052454
1390052456,unknown,unknown,unknown,"1
def faulty_sensor_readings(arr, k):
2
    """"""
3
    Determines the earliest faulty reading for each consecutive batch of size k.
4
5
    Args:
6
        arr: A list of sensor readings.
7
        k: The batch size.
8
9
    Returns:
10
        A list containing the earliest faulty reading for each batch.
11
    """"""
12
    result = []
13
    for i in range(len(arr) - k + 1):
14
        batch = arr[i:i + k]
15
        fault = 0
16
        for num in batch:
17
            if num < 0:
18
                fault = num
19
                break
20
        result.append(fault)
21
    return result
22
23
if __name__ == ""__main__"":
24
    t = int(input())
25
    for _ in range(t):
26
        n, k = map(int, input().split())
27
        arr = list(map(int, input().split()))
28
        result = faulty_sensor_readings(arr, k)
29
        print(*result)",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052456
1390052458,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_reading(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process the first k elements
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the first result
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process the remaining elements
16
    for i in range(k, len(arr)):
17
        # Remove elements not in the current window
18
        while dq and dq[0] <= i - k:
19
            dq.popleft()
20
        21
        # Add the new element if it is negative
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store the result
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
# Reading input
31
t = int(input())
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    36
    # Get the earliest faulty readings for each batch
37
    output = earliest_faulty_reading(arr, k)
38
    print("" "".join(map(str, output)))
39",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052458
1390052443,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
using namespace std;
4
5
int main() {
6
    int t;
7
    cin >> t; 
8
    for (int test = 0; test < t; test++) {
9
        int n, k;
10
        cin >> n >> k; 
11
        vector<int> arr(n);
12
        for (int i = 0; i < n; i++) {
13
            cin >> arr[i]; 
14
        }
15
16
        //Compute next_neg array
17
        vector<int> next_neg(n);
18
        for (int i = n - 1; i >= 0; i--) {
19
            if (arr[i] < 0) {
20
                next_neg[i] = i; 
21
            } else {
22
                next_neg[i] = (i + 1 < n) ? next_neg[i + 1] : n; 
23
            }
24
        }
25
26
    27
        for (int i = 0; i <= n - k; i++) {
28
            if (next_neg[i] < i + k) {
29
                cout << arr[next_neg[i]] << "" ""; 
30
            } else {
31
                cout << ""0 ""; 
32
            }
33
        }
34
        cout << endl; 
35
    }
36
    return 0;
37
}",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052443
1390052445,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_reading(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(k):
8
        if arr[i] < 0:
9
            dq.append(i)
10
    11
    result.append(arr[dq[0]] if dq else 0)
12
    13
    for i in range(k, len(arr)):
14
        while dq and dq[0] <= i - k:
15
            dq.popleft()
16
        17
        if arr[i] < 0:
18
            dq.append(i)
19
        20
        result.append(arr[dq[0]] if dq else 0)
21
    22
    return result
23
24
t = int(input())
25
for _ in range(t):
26
    n, k = map(int, input().split())
27
    arr = list(map(int, input().split()))
28
    output = earliest_faulty_reading(arr, k)
29
    print("" "".join(map(str, output)))
30",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052445
1390052451,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    for i in range(len(arr)):
8
        # Remove elements not part of the current batch
9
        while dq and dq[0] < i - k + 1:
10
            dq.popleft()
11
        12
        # If current element is faulty, add its index to deque
13
        if arr[i] < 0:
14
            dq.append(i)
15
        16
        # Add the first faulty element of the batch to result
17
        if i >= k - 1:
18
            result.append(arr[dq[0]] if dq else 0)
19
    20
    return result
21
22
def main():
23
    t = int(input())
24
    for _ in range(t):
25
        n, k = map(int, input().split())
26
        arr = list(map(int, input().split()))
27
        print("" "".join(map(str, earliest_faulty_readings(arr, k))))
28
29
if __name__ == ""__main__"":
30
    main()
31",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052451
1390052440,unknown,unknown,unknown,"1
def solve_breach_problem(n, k, firewall_strengths):
2
    # Create a 2D dp array where:
3
    # dp[i][j] = minimum effort needed to breach first i firewalls 
4
    # after skipping exactly j firewalls
5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    7
    # Base case: No firewall, no effort
8
    dp[0][0] = 0
9
    10
    for i in range(1, n + 1):
11
        current_strength = firewall_strengths[i - 1]
12
        13
        for j in range(k + 1):
14
            # Option 1: Don't skip the current firewall (if j firewalls already skipped)
15
            if j <= i - 1:  # We can only skip j firewalls out of i-1 previous ones
16
                # Current firewall strength increases by j (number of previously skipped firewalls)
17
                dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength + j)
18
            19
            # Option 2: Skip the current firewall (if we haven't used all our skips)
20
            if j > 0:
21
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
22
    23
    # Find minimum effort considering all possible numbers of skipped firewalls
24
    return min(dp[n])
25
26
def main():
27
    test_cases = int(input())
28
    29
    for _ in range(test_cases):
30
        n, k = map(int, input().split())
31
        firewall_strengths = list(map(int, input().split()))
32
        33
        min_effort = solve_breach_problem(n, k, firewall_strengths)
34
        print(min_effort)
35
36
if __name__ == ""__main__"":
37
    main()",178,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052440
