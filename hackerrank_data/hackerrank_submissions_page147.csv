submission_id,username,problem_name,language,code,page,url
1390053219,unknown,unknown,unknown,"1
def main():
2
    t = int(input())
3
    4
    for _ in range(t):
5
        n, k = map(int, input().split())
6
        strengths = list(map(int, input().split()))
7
        8
        if k >= n:
9
            print(0)
10
            continue
11
12
        dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
13
        dp[0][0] = 0
14
        15
        for i in range(1, n + 1):
16
            for j in range(k + 1):
17
                if j > 0:
18
                    dp[i][j] = min(dp[i][j], dp[i-1][j-1])
19
                20
                if dp[i-1][j] != float('inf'):
21
                    dp[i][j] = min(dp[i][j], dp[i-1][j] + strengths[i-1] + j)
22
        23
        print(min(dp[n]))
24
25
if __name__ == ""__main__"":
26
    main()",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053219
1390053223,unknown,unknown,unknown,"1
from collections import deque
2
def earliest_faulty_reading(arr, n, k):
3
    result = []
4
    dq = deque()
5
    6
    for i in range(n):
7
        if dq and dq[0] < i - k + 1:
8
            dq.popleft()
9
            10
        if arr[i] < 0:
11
            dq.append(i)
12
            13
        if i >= k - 1:
14
            result.append(arr[dq[0]] if dq else 0)
15
            16
    return result
17
18
t = int(input())
19
for _ in range(t):
20
    n, k = map(int, input().split())
21
    arr = list(map(int, input().split()))
22
    print("" "".join(map(str, earliest_faulty_reading(arr, n, k))))",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053223
1390053221,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # We need to handle the case where k >= n (can skip all firewalls)
3
    if k >= n:
4
        return 0
5
    6
    # Initialize DP array
7
    # dp[i][j] = min effort to breach first i firewalls using at most j skips
8
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
9
    10
    # Base case: no firewalls, no effort
11
    for j in range(k + 1):
12
        dp[0][j] = 0
13
    14
    for i in range(1, n + 1):
15
        for j in range(k + 1):
16
            # Option 1: Don't skip current firewall
17
            # Current strength is increased by the number of skips used so far
18
            # But j could be larger than what's possible with i-1 firewalls
19
            # So we need to cap the number of skips considered
20
            if j <= i - 1:
21
                dp[i][j] = min(dp[i][j], dp[i-1][j] + strengths[i-1] + j)
22
            elif j == 0:  # Special case when no skips are used
23
                dp[i][j] = dp[i-1][j] + strengths[i-1]
24
            25
            # Option 2: Skip current firewall (if we have skips left)
26
            if j > 0:
27
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
28
    29
    return dp[n][k]
30
31
def solve():
32
    t = int(input())
33
    34
    for _ in range(t):
35
        n, k = map(int, input().split())
36
        strengths = list(map(int, input().split()))
37
        38
        # Special case: if we can skip all firewalls
39
        if k >= n:
40
            print(0)
41
        else:
42
            print(min_effort_to_breach(n, k, strengths))
43
44
# Run the solution
45
solve()",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053221
1390053215,unknown,unknown,unknown,"1
t = int(input())
2
3
4
for _ in range(t):
5
   6
    n, k = map(int, input().split())
7
    a = list(map(int, input().split()))
8
    9
    10
    #sort
11
    12
    value_idx = [(a[i], i) for i in range(n)]
13
14
    value_idx.sort(reverse=True)
15
    16
    17
    18
    #possible skips
19
    20
 21
    k = min(k, n)  
22
    candidates = value_idx[:k]  
23
    24
  25
    min_cost = float('inf')
26
    27
    for skips in range(k + 1):
28
       29
        skip_positions = set(c[1] for c in candidates[:skips])
30
        31
        32
        num_skips_so_far = 0
33
        current_cost = 0
34
        35
      36
        for i in range(n):
37
            38
            if i in skip_positions:
39
               40
                current_cost += 0
41
                num_skips_so_far += 1
42
                43
            else:
44
              45
                current_cost += a[i] + num_skips_so_far
46
        47
       48
        min_cost = min(min_cost, current_cost)
49
    50
  51
    print(min_cost)",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053215
1390053217,unknown,unknown,unknown,"1
#include <iostream>
2
#include <string>
3
#include <algorithm>
4
using namespace std;
5
6
int main() {
7
    int T;
8
    cin >> T;
9
10
    while (T--) {
11
        string servers;
12
        cin >> servers;
13
14
        int n = servers.size();
15
        int min_cost = n;
16
17
        int total_1 = count(servers.begin(), servers.end(), '1');
18
        int total_0 = n - total_1;
19
20
        int count_1_removed = 0;
21
        int count_0_remaining = total_0;
22
23
        for (int i = 0; i <= n; ++i) {
24
            if (i > 0) {
25
                if (servers[i - 1] == '1') {
26
                    count_1_removed++;
27
                } else {
28
                    count_0_remaining--;
29
                }
30
            }
31
32
            for (int j = 0; j <= n - i; ++j) {
33
                int count_0_remaining_after_back = count_0_remaining;
34
                int count_1_removed_after_back = count_1_removed;
35
36
                if (j > 0) {
37
                    if (servers[n - j] == '1') {
38
                        count_1_removed_after_back++;
39
                    } else {
40
                        count_0_remaining_after_back--;
41
                    }
42
                }
43
44
                min_cost = min(min_cost, max(count_1_removed_after_back, count_0_remaining_after_back));
45
            }
46
        }
47
48
        cout << min_cost << endl;
49
    }
50
51
    return 0;
52
}
53",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053217
1390053214,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int t = sc.nextInt();
8
        while (t-- > 0) {
9
            int n = sc.nextInt(), k = sc.nextInt();
10
            int[] s = new int[n];
11
            for (int i = 0; i < n; i++) s[i] = sc.nextInt();
12
            System.out.println(minEffort(s, n, k));
13
        }
14
        sc.close();
15
    }
16
17
    private static long minEffort(int[] s, int n, int k) {
18
        if (k >= n) return 0;
19
20
        int[] save = new int[n];
21
        for (int i = 0; i < n; i++) save[i] = s[i] - (n - i - 1);
22
23
        Integer[] idx = new Integer[n];
24
        for (int i = 0; i < n; i++) idx[i] = i;
25
        Arrays.sort(idx, (a, b) -> Integer.compare(save[b], save[a]));
26
27
        boolean[] skip = new boolean[n];
28
        int skipped = 0;
29
        for (int i = 0; i < n && skipped < k; i++) {
30
            if (save[idx[i]] > 0) skip[idx[i]] = true;
31
            else break;
32
            skipped++;
33
        }
34
35
        long effort = 0, skips = 0;
36
        for (int i = 0; i < n; i++) {
37
            if (skip[i]) skips++;
38
            else effort += s[i] + skips;
39
        }
40
41
        return effort;
42
    }
43
}
44",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053214
1390053212,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
11
        Scanner sc = new Scanner(System.in);
12
        int t = sc.nextInt();
13
        while(t >0){
14
            int n = sc.nextInt();
15
            int k = sc.nextInt();
16
            int arr[] = new int[n];
17
            for(int i = 0; i<n; i++){
18
                arr[i] = sc.nextInt();
19
            }
20
            for(int i = 0; i <= n-k; i++){
21
                int faulty = 0;
22
                for(int j = i; j < i+k; j++){
23
                    if(arr[j] < 0){
24
                        faulty = arr[j];
25
                        break;
26
                    }
27
                }
28
                System.out.print(faulty + "" "");
29
                30
            }
31
            System.out.println();
32
            t--;
33
        }
34
        sc.close();
35
    }
36
}",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053212
1390053211,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
9
    public static void main(String[] args) {
10
        Scanner scanner = new Scanner(System.in);
11
        int t = scanner.nextInt(); // Number of test cases
12
        13
        for (int testCase = 0; testCase < t; testCase++) {
14
            int n = scanner.nextInt(); // Number of firewalls
15
            int k = scanner.nextInt(); // Max firewalls we can skip
16
            17
            long[] firewalls = new long[n];
18
            for (int i = 0; i < n; i++) {
19
                firewalls[i] = scanner.nextLong(); // Firewall strengths
20
            }
21
            22
            System.out.println(findMinimumEffort(firewalls, n, k));
23
        }
24
        25
        scanner.close();
26
    }
27
    28
    private static long findMinimumEffort(long[] firewalls, int n, int k) {
29
        // If we can skip all firewalls, the minimum effort is 0
30
        if (k >= n) {
31
            return 0;
32
        }
33
        34
        // Calculate the total sum of all firewalls
35
        long totalSum = 0;
36
        for (int i = 0; i < n; i++) {
37
            totalSum += firewalls[i];
38
        }
39
        40
        // Try all possible combinations of skipping firewalls
41
        long minEffort = totalSum;
42
        43
        // Try not skipping any firewalls
44
        minEffort = Math.min(minEffort, totalSum);
45
        46
        // Try skipping each firewall individually
47
        for (int i = 0; i < n; i++) {
48
            // Calculate the effort if we skip this firewall
49
            long effort = totalSum - firewalls[i];
50
            51
            // Add the penalty for each firewall after the skipped one
52
            for (int j = i + 1; j < n; j++) {
53
                effort += 1; // Penalty for each subsequent firewall
54
            }
55
            56
            minEffort = Math.min(minEffort, effort);
57
        }
58
        59
        return minEffort;
60
    }
61
}",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053211
1390053213,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
import java.text.*;
4
import java.math.*;
5
import java.util.regex.*;
6
7
public class Solution {
8
public static List<Integer> earliestFault(int[] arr, int k) {
9
        List<Integer> results = new ArrayList<>();
10
11
        // Loop through each possible batch
12
        for (int i = 0; i <= arr.length - k; i++) {
13
            boolean faultFound = false;
14
15
            // Find earliest fault in current batch
16
            for (int j = i; j < i + k; j++) {
17
                if (arr[j] < 0) {
18
                    results.add(arr[j]);
19
                    faultFound = true;
20
                    break;
21
                }
22
            }
23
24
            // If no fault found in batch, append 0
25
            if (!faultFound) {
26
                results.add(0);
27
            }
28
        }
29
30
        return results;
31
    }
32
33
    public static void main(String[] args) {
34
        Scanner sc = new Scanner(System.in);
35
        36
        int t = sc.nextInt(); // Number of test cases
37
        38
        while (t-- > 0) {
39
            int n = sc.nextInt(); // Size of array
40
            int k = sc.nextInt(); // Batch size
41
            int[] arr = new int[n];
42
43
            for (int i = 0; i < n; i++) {
44
                arr[i] = sc.nextInt();
45
            }
46
47
            List<Integer> result = earliestFault(arr, k);
48
            49
            // Print results in the required format
50
            for (int num : result) {
51
                System.out.print(num + "" "");
52
            }
53
            System.out.println();
54
        }
55
56
        sc.close();
57
    }
58
}",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053213
1390053210,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        min_cost_val = float('inf')
6
        7
        # Iterate over possible decommissioning points
8
        for left in range(n + 1):
9
            for right in range(n + 1):
10
                if left + right > n:
11
                    continue
12
                remaining = s[left:n - right]
13
                idle_remaining = remaining.count('0')
14
                active_removed = s[:left].count('1') + s[n - right:].count('1')
15
                current_cost = max(idle_remaining, active_removed)
16
                if current_cost < min_cost_val:
17
                    min_cost_val = current_cost
18
        19
        results.append(min_cost_val)
20
    return results
21
22
# Read input
23
T = int(input())
24
test_cases = [input().strip() for _ in range(T)]
25
26
# Compute results
27
results = min_cost(test_cases)
28
29
# Output results
30
for res in results:
31
    print(res)",147,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053210
