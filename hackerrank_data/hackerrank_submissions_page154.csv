submission_id,username,problem_name,language,code,page,url
1390053086,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process the first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store the result for the first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process the remaining windows
17
    for i in range(k, n):
18
        # Remove elements that are out of the current window
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add the current element if it is negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Store the result for the current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Size of array and batch size
35
    arr = list(map(int, input().split()))  # Array elements
36
    37
    # Get the results and print as space-separated values
38
    print(*earliest_faulty_readings(arr, k))",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053086
1390053087,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053087
1390053088,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    ans = float('inf')
5
    6
    total_ones = s.count('1')
7
8
    for i in range(n + 1):
9
        remaining = s[i:]
10
        zeros_remaining = remaining.count('0')
11
        ones_removed = total_ones - remaining.count('1')
12
        ans = min(ans, max(zeros_remaining, ones_removed))
13
14
    for j in range(n + 1):
15
        remaining = s[:n-j]
16
        zeros_remaining = remaining.count('0')
17
        ones_removed = total_ones - remaining.count('1')
18
        ans = min(ans, max(zeros_remaining, ones_removed))
19
20
    for i in range(n + 1):
21
        for j in range(n - i + 1):
22
            remaining = s[i:n-j]
23
24
            zeros_remaining = remaining.count('0')
25
            ones_removed = total_ones - remaining.count('1')
26
27
            ans = min(ans, max(zeros_remaining, ones_removed))
28
29
    print(ans)
30
31
32
t = int(input())
33
for _ in range(t):
34
    solve()",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053088
1390053083,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053083
1390053085,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <deque>
4
using namespace std;
5
6
vector<int> earliestFaultyReadings(vector<int>& arr, int n, int k) {
7
    vector<int> result;
8
    deque<int> dq;  
9
 10
    for (int i = 0; i < k; i++) {
11
        if (arr[i] < 0) {
12
            dq.push_back(i);
13
        }
14
    }
15
     16
    result.push_back(dq.empty() ? 0 : arr[dq.front()]);
17
     18
    for (int i = k; i < n; i++) { 
19
        if (!dq.empty() && dq.front() <= i - k) {
20
            dq.pop_front();
21
        }
22
         23
        if (arr[i] < 0) {
24
            dq.push_back(i);
25
        }
26
         27
        result.push_back(dq.empty() ? 0 : arr[dq.front()]);
28
    }
29
    30
    return result;
31
}
32
33
int main() {
34
    int t;
35
    cin >> t;
36
    while (t--) {
37
        int n, k;
38
        cin >> n >> k;
39
        vector<int> arr(n);
40
        for (int i = 0; i < n; i++) {
41
            cin >> arr[i];
42
        }
43
        44
        vector<int> output = earliestFaultyReadings(arr, n, k);
45
        46
        for (int val : output) {
47
            cout << val << "" "";
48
        }
49
        cout << endl;
50
    }
51
    return 0;
52
}
53",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053085
1390053081,unknown,unknown,unknown,1,154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053081
1390053075,unknown,unknown,unknown,"1
def min_effort(firewalls, k):
2
    n = len(firewalls)
3
    4
    if k >= n:
5
        return 0
6
    7
    # dp[i][j] represents min effort for firewalls[i:] with j skips used
8
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
9
    10
    # Base case: when we've processed all firewalls
11
    for j in range(k + 1):
12
        dp[n][j] = 0
13
    14
    # Fill DP table from right to left
15
    for i in range(n - 1, -1, -1):
16
        for j in range(k + 1):
17
            # Option 1: Skip this firewall (if skips remain)
18
            if j < k:
19
                dp[i][j] = dp[i + 1][j + 1]
20
            21
            # Option 2: Don't skip this firewall
22
            effort = firewalls[i] + j  # Current firewall + skips used before
23
            dp[i][j] = min(dp[i][j], effort + dp[i + 1][j])
24
    25
    return dp[0][0]
26
27
# Handle automatic input
28
t = int(input())
29
for _ in range(t):
30
    n, k = map(int, input().split())
31
    firewalls = list(map(int, input().split()))
32
    result = min_effort(firewalls, k)
33
    print(result)",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053075
1390053079,unknown,unknown,unknown,"1
def find_earliest_faults(arr, k):
2
    result = []
3
    for i in range(len(arr) - k + 1):
4
        batch = arr[i:i + k]
5
        earliest_fault = 0
6
        for j, reading in enumerate(batch):
7
            if reading < 0:
8
                earliest_fault = reading
9
                break
10
        result.append(earliest_fault)
11
    return result
12
13
def solve():
14
    t = int(input())
15
    for _ in range(t):
16
        n, k = map(int, input().split())
17
        arr = list(map(int, input().split()))
18
        result = find_earliest_faults(arr, k)
19
        print(*result)
20
21
solve()",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053079
1390053080,unknown,unknown,unknown,"1
def minimum_effort(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n, k = test_cases[t][0]
6
        strengths = test_cases[t][1]
7
        8
        if k == n:
9
            results.append(0)
10
            continue
11
        12
        total_effort = sum(strengths)
13
        min_effort = total_effort
14
        15
        for i in range(n):
16
            skip_effort = total_effort - strengths[i]
17
            for j in range(1, k + 1):
18
                if i + j < n:
19
                    skip_effort += 1  # Adding penalty for skipping next k firewalls
20
            min_effort = min(min_effort, skip_effort)
21
        22
        results.append(min_effort)
23
    24
    return results
25
26
# Input processing
27
def main():
28
    T = int(input().strip())
29
    test_cases = []
30
    31
    for _ in range(T):
32
        n, k = map(int, input().split())
33
        strengths = list(map(int, input().split()))
34
        test_cases.append(((n, k), strengths))
35
    36
    results = minimum_effort(T, test_cases)
37
    for res in results:
38
        print(res)
39
40
if __name__ == ""__main__"":
41
    main()
42",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053080
1390053073,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    servers = [int(c) for c in server_string]
4
    5
    # Total number of ones and zeros
6
    total_ones = sum(servers)
7
    total_zeros = n - total_ones
8
    9
    # Pre-compute prefix sums
10
    prefix_ones = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_ones[i+1] = prefix_ones[i] + servers[i]
13
    14
    min_cost = float('inf')
15
    16
    # For each number of servers to keep (not remove)
17
    for keep_len in range(1, n):
18
        # For each possible starting position of the kept segment
19
        for start in range(n - keep_len + 1):
20
            end = start + keep_len
21
            22
            # Calculate ones removed
23
            ones_removed = total_ones - (prefix_ones[end] - prefix_ones[start])
24
            25
            # Calculate zeros kept
26
            zeros_kept = keep_len - (prefix_ones[end] - prefix_ones[start])
27
            28
            # Calculate cost
29
            cost = max(zeros_kept, ones_removed)
30
            min_cost = min(min_cost, cost)
31
    32
    return min_cost
33
34
def optimize_by_sliding_window(server_string):
35
   36
    n = len(server_string)
37
    total_ones = server_string.count('1')
38
    39
    min_cost = float('inf')
40
    41
    # For each possible continuous segment to keep
42
    for length in range(1, n):
43
        # Compute initial window
44
        window = server_string[:length]
45
        ones_in_window = window.count('1')
46
        zeros_in_window = length - ones_in_window
47
        ones_removed = total_ones - ones_in_window
48
        cost = max(zeros_in_window, ones_removed)
49
        min_cost = min(min_cost, cost)
50
        51
        # Slide the window
52
        for i in range(1, n - length + 1):
53
            # Remove leftmost character from window
54
            if server_string[i-1] == '1':
55
                ones_in_window -= 1
56
            else:
57
                zeros_in_window -= 1
58
                59
            # Add rightmost character to window
60
            if server_string[i+length-1] == '1':
61
                ones_in_window += 1
62
            else:
63
                zeros_in_window += 1
64
                65
            ones_removed = total_ones - ones_in_window
66
            cost = max(zeros_in_window, ones_removed)
67
            min_cost = min(min_cost, cost)
68
    69
    return min_cost
70
71
def optimize_further(server_string):
72
  73
    n = len(server_string)
74
    75
    # Precompute ones count
76
    ones = []
77
    for c in server_string:
78
        ones.append(1 if c == '1' else 0)
79
    80
    total_ones = sum(ones)
81
    min_cost = n  # worst case is keeping all zeros
82
    83
    # For each possible length of servers to keep
84
    for length in range(1, n):
85
        # Initialize window sum
86
        ones_in_window = sum(ones[:length])
87
        zeros_in_window = length - ones_in_window
88
        89
        # Check cost for this window
90
        ones_removed = total_ones - ones_in_window
91
        cost = max(zeros_in_window, ones_removed)
92
        min_cost = min(min_cost, cost)
93
        94
        # Slide window
95
        for i in range(length, n):
96
            # Add new element, remove old element
97
            ones_in_window += ones[i] - ones[i-length]
98
            zeros_in_window = length - ones_in_window
99
            100
            ones_removed = total_ones - ones_in_window
101
            cost = max(zeros_in_window, ones_removed)
102
            min_cost = min(min_cost, cost)
103
    104
    return min_cost
105
106
def solve():
107
    t = int(input())
108
    109
    for _ in range(t):
110
        server_string = input().strip()
111
        # Use the most optimized solution
112
        result = optimize_further(server_string)
113
        print(result)
114
115
# Execute the solution
116
solve()",154,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053073
