submission_id,username,problem_name,language,code,page,url
1390055405,unknown,unknown,unknown,"1
import sys
2
data = sys.stdin.read().split()
3
if not data:
4
    exit()
5
t = int(data[0])
6
ptr = 1
7
res = []
8
for _ in range(t):
9
    s = data[ptr]
10
    ptr += 1
11
    n = len(s)
12
    pre = [0]*(n+1)
13
    for i in range(n):
14
        pre[i+1] = pre[i] + (1 if s[i]=='1' else 0)
15
    O = pre[n]
16
    best = 10**9
17
    for L in range(n+1):
18
        if L <= n - O:
19
            cost = O - (pre[L+O] - pre[L])
20
        else:
21
            cost = pre[L] + ((n - L - O) if n - L - O > 0 else 0)
22
        if cost < best:
23
            best = cost
24
    res.append(str(best))
25
sys.stdout.write(""\n"".join(res))",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055405
1390055407,unknown,unknown,unknown,"1
def min_cost(server_rack):
2
    n = len(server_rack)
3
    total_zeros = server_rack.count('0')
4
    total_ones = n - total_zeros
5
    min_cost = float('inf')
6
    7
    left = 0
8
    current_zeros = 0
9
    for right in range(n):
10
        if server_rack[right] == '0':
11
            current_zeros += 1
12
        13
        zeros_remaining = current_zeros
14
        ones_removed = total_ones - (right - left + 1 - current_zeros)
15
        16
        cost = max(zeros_remaining, ones_removed)
17
        if cost < min_cost:
18
            min_cost = cost
19
        20
        while left <= right and cost > min_cost:
21
            if server_rack[left] == '0':
22
                current_zeros -= 1
23
            left += 1
24
            zeros_remaining = current_zeros
25
            ones_removed = total_ones - (right - left + 1 - current_zeros)
26
            cost = max(zeros_remaining, ones_removed)
27
            if cost < min_cost:
28
                min_cost = cost
29
    30
    return min_cost
31
32
T = int(input())
33
for _ in range(T):
34
    server_rack = input().strip()
35
    print(min_cost(server_rack))",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055407
1390055412,unknown,unknown,unknown,1,36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055412
1390055398,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <string.h>
3
#include <math.h>
4
#include <stdlib.h>
5
void early_fulat(int* arr, int n, int k) {
6
    int front = 0, rear = 0, dq[n], result[n - k + 1], resIndex = 0;
7
      int extra_var = 0; 
8
      9
      for (int i = 0; i < n; i++) {
10
          extra_var += arr[i] * 0;
11
          if (front < rear && dq[front] == i - k) {
12
              front++;
13
          }
14
          if (arr[i] < 0) {
15
              dq[rear++] = i;
16
          }
17
          if (i >= k - 1) {
18
              result[resIndex++] = (front < rear) ? arr[dq[front]] : 0;
19
          }
20
      }
21
      for (int i = 0; i < resIndex; i++) {
22
          printf(""%d "", result[i]);
23
      }
24
      printf(""\n"");
25
}
26
27
int main() {
28
    int t;
29
    scanf(""%d"", &t);
30
    while (t--) {
31
        int n, k;
32
        scanf(""%d %d"", &n, &k);
33
        int* arr = (int*)malloc(n * sizeof(int));
34
        for (int i = 0; i < n; i++) {
35
            scanf(""%d"", &arr[i]);
36
        }
37
        early_fulat(arr, n, k);
38
        free(arr);
39
    }
40
    return 0;
41
}
42",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055398
1390055404,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt(); 
8
        9
        while(T-- > 0) {
10
            int n = sc.nextInt();
11
            int k = sc.nextInt();
12
            int[] a = new int[n];
13
            for (int i = 0; i < n; i++){
14
                a[i] = sc.nextInt();
15
            }
16
            17
           18
            if(k >= n) {
19
                System.out.println(0);
20
                continue;
21
            }
22
            23
         24
            long INF = Long.MAX_VALUE / 2;
25
            long[] dp = new long[k+1];
26
            Arrays.fill(dp, INF);
27
            dp[0] = 0;
28
            29
            30
            for (int i = 0; i < n; i++) {
31
                int lim = Math.min(i+1, k);
32
                long[] newdp = new long[k+1];
33
                Arrays.fill(newdp, INF);
34
                35
               36
                for (int j = lim; j >= 0; j--) {
37
                   38
                    newdp[j] = Math.min(newdp[j], dp[j] + a[i] + j);
39
                    40
                   41
                    if(j < k) {
42
                        newdp[j+1] = Math.min(newdp[j+1], dp[j]);
43
                    }
44
                }
45
                dp = newdp;
46
            }
47
            48
           49
            long ans = INF;
50
            for (int j = 0; j <= k; j++) {
51
                ans = Math.min(ans, dp[j]);
52
            }
53
            System.out.println(ans);
54
        }
55
        sc.close();
56
    }
57
}",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055404
1390055397,unknown,unknown,unknown,"1
def min_decommissioning_cost(servers):
2
    n = len(servers)
3
    4
    # Create prefix sums for 1's to optimize counting
5
    prefix_ones = [0] * (n + 1)
6
    for i in range(n):
7
        prefix_ones[i + 1] = prefix_ones[i] + (1 if servers[i] == '1' else 0)
8
    9
    # Create prefix sums for 0's
10
    prefix_zeros = [0] * (n + 1)
11
    for i in range(n):
12
        prefix_zeros[i + 1] = prefix_zeros[i] + (1 if servers[i] == '0' else 0)
13
    14
    min_cost = float('inf')
15
    16
    # Try all possible substrings (start, end)
17
    for start in range(n + 1):
18
        for end in range(start, n + 1):
19
            # Active servers removed = ones before start + ones after end
20
            active_removed = prefix_ones[start] + (prefix_ones[n] - prefix_ones[end])
21
            # Idle servers remaining = zeros between start and end
22
            idle_remaining = prefix_zeros[end] - prefix_zeros[start]
23
            24
            cost = max(idle_remaining, active_removed)
25
            min_cost = min(min_cost, cost)
26
    27
    return min_cost
28
29
# Process test cases
30
t = int(input())
31
for _ in range(t):
32
    servers = input().strip()
33
    print(min_decommissioning_cost(servers))",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055397
1390055390,unknown,unknown,unknown,"1
def min_effort_to_breach(arr, k):
2
    n = len(arr)
3
    4
    # If we can skip all firewalls, effort is 0
5
    if k >= n:
6
        return 0
7
    8
    # Initialize DP table
9
    # dp[i][j] = min effort to breach first i firewalls using exactly j skips
10
    dp = {}
11
    12
    # Base case: no firewalls, no effort
13
    dp[(0, 0)] = 0  # (firewalls processed, skips used) -> min effort
14
    15
    for i in range(n):
16
        new_dp = {}
17
        18
        for (processed, skips), effort in dp.items():
19
            # Option 1: Skip current firewall
20
            if skips < k:
21
                new_state = (processed + 1, skips + 1)
22
                new_effort = effort
23
                if new_state not in new_dp or new_effort < new_dp[new_state]:
24
                    new_dp[new_state] = new_effort
25
            26
            # Option 2: Breach current firewall
27
            new_state = (processed + 1, skips)
28
            new_effort = effort + arr[i] + skips
29
            if new_state not in new_dp or new_effort < new_dp[new_state]:
30
                new_dp[new_state] = new_effort
31
        32
        dp = new_dp
33
    34
    # Find minimum effort among all states that processed all firewalls
35
    min_effort = float('inf')
36
    for (processed, skips), effort in dp.items():
37
        if processed == n:
38
            min_effort = min(min_effort, effort)
39
    40
    return min_effort
41
42
def solve_test_cases():
43
    t = int(input())  # Number of test cases
44
    results = []
45
    46
    for _ in range(t):
47
        n, k = map(int, input().split())
48
        arr = list(map(int, input().split()))
49
        50
        result = min_effort_to_breach(arr, k)
51
        results.append(result)
52
    53
    # Print results
54
    for result in results:
55
        print(result)
56
57
# Execute program
58
if __name__ == ""__main__"":
59
    solve_test_cases()",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055390
1390055392,unknown,unknown,unknown,"1
def min_effort_to_breach_firewalls(t, test_cases):
2
    results = []
3
4
    for test in test_cases:
5
        n, k = test[0]
6
        arr = test[1]
7
8
        # Sort firewall strengths in descending order
9
        arr_sorted = sorted(arr, reverse=True)
10
11
        # Choose top k strong firewalls to skip
12
        skips = set()
13
        for i in range(k):
14
            skips.add(arr_sorted[i])
15
16
        total_effort = 0
17
        skipped = 0
18
19
        for strength in arr:
20
            if strength in skips and skipped < k:
21
                skipped += 1
22
                skips.remove(strength)  # Remove to handle duplicates properly
23
            else:
24
                total_effort += strength + skipped  # Each skip adds +1 to every subsequent effort
25
26
        results.append(total_effort)
27
28
    return results
29
30
31
# -------- DRIVER CODE --------
32
T = int(input())
33
test_cases = []
34
35
for _ in range(T):
36
    n, k = map(int, input().split())
37
    arr = list(map(int, input().split()))
38
    test_cases.append(((n, k), arr))
39
40
answers = min_effort_to_breach_firewalls(T, test_cases)
41
42
for ans in answers:
43
    print(ans)
44",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055392
1390055394,unknown,unknown,unknown,"1
def minimize_decommission_cost(test_cases):
2
    results = []
3
4
    for binary_string in test_cases:
5
        n = len(binary_string)
6
        total_idle = binary_string.count('0')  
7
        total_active = binary_string.count('1')  
8
        min_cost = float('inf')  
9
10
        11
        for start in range(n + 1):  
12
            for end in range(n - start + 1):  
13
               14
                remaining = binary_string[start:n - end]
15
16
       17
                remaining_idle = remaining.count('0')
18
                decommissioned_active = total_active - remaining.count('1')
19
20
               21
                cost = max(remaining_idle, decommissioned_active)
22
                min_cost = min(min_cost, cost)
23
24
        results.append(min_cost)
25
26
    return results
27
28
29
30
T = int(input().strip())
31
test_cases = [input().strip() for _ in range(T)]
32
33
34
results = minimize_decommission_cost(test_cases)
35
for result in results:
36
    print(result)
37",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055394
1390055389,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    # Read number of test cases
5
    T = int(input())
6
    for _ in range(T):
7
        # Read the binary string
8
        S = input().strip()
9
        n = len(S)
10
        11
        # Compute prefix sums for '0's and '1's
12
        prefix_zeros = [0] * (n + 1)
13
        prefix_ones = [0] * (n + 1)
14
        for i in range(1, n + 1):
15
            prefix_zeros[i] = prefix_zeros[i - 1] + (S[i - 1] == '0')
16
            prefix_ones[i] = prefix_ones[i - 1] + (S[i - 1] == '1')
17
        18
        # Initialize minimum cost
19
        min_cost = float('inf')
20
        21
        # Iterate over all possible end indices j
22
        for j in range(n + 1):
23
            # Number of '1's in the suffix from j to n
24
            C = prefix_ones[n] - prefix_ones[j]
25
            26
            # Binary search to find the smallest m where:
27
            # Number of '0's in [m, j-1] <= Number of '1's in [0, m-1] + [j, n-1]
28
            left, right = 0, j
29
            while left < right:
30
                mid = left + (right - left) // 2
31
                if prefix_zeros[j] - prefix_zeros[mid] <= prefix_ones[mid] + C:
32
                    right = mid
33
                else:
34
                    left = mid + 1
35
            m = left
36
            37
            # Compute cost based on the optimal m
38
            if m == 0:
39
                # If m is 0, no prefix is removed, cost is just '1's in suffix
40
                cost = C
41
            else:
42
                # Cost is min of '0's in [m-1, j-1] and '1's in [0, m-1] + [j, n-1]
43
                cost = min(prefix_zeros[j] - prefix_zeros[m - 1], prefix_ones[m] + C)
44
            min_cost = min(min_cost, cost)
45
        46
        # Output the minimum cost for this test case
47
        print(min_cost)
48
49
if __name__ == ""__main__"":
50
    main()",36,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055389
