submission_id,username,problem_name,language,code,page,url
1390055885,unknown,unknown,unknown,"1
import sys
2
3
def solve():
4
    x = sys.stdin.buffer.read().split()
5
    if not x: return
6
    t = int(x[0])  # Number of test cases
7
    i = 1
8
    o = []
9
    10
    for _ in range(t):
11
        s = x[i].decode()  # Read the binary string
12
        i += 1
13
        n = len(s)
14
        15
        A = [0] * (n + 1)
16
        B = [0] * (n + 1)
17
        18
        for j in range(n):
19
            B[j + 1] = B[j] + (s[j] == '1')
20
            A[j + 1] = A[j] + (s[j] == '0')
21
        22
        T = A[n]  # Total count of '0' in s
23
        C = [0] * (n + 1)
24
        E = [0] * (n + 1)
25
        26
        for j in range(n):
27
            E[j + 1] = E[j] + (s[n - 1 - j] == '1')
28
            C[j + 1] = C[j] + (s[n - 1 - j] == '0')
29
        30
        r = 10**9  # Large initial value
31
        32
        for x_ in range(n + 1):
33
            m = n - x_
34
            y = T - A[x_] - B[x_]
35
            if y < 0:
36
                y = 0
37
            if y > m:
38
                y = m
39
            40
            for z in (y, y - 1, y + 1):
41
                if 0 <= z <= m:
42
                    v1 = B[x_] + E[z]
43
                    v2 = T - (A[x_] + C[z])
44
                    v = max(v1, v2)
45
                    if v < r:
46
                        r = v
47
        48
        o.append(str(r))
49
    50
    sys.stdout.write(""\n"".join(o) + ""\n"")  # Add newline at the end for proper output formatting
51
52
if __name__ == ""__main__"":
53
    solve()
54",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055885
1390055888,unknown,unknown,unknown,"1
def minimize_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    4
    # Create list of (value + index) for each firewall
5
    skip_value = []
6
    for i in range(n):
7
        skip_value.append((firewalls[i] + i, i))
8
9
    # Sort by descending benefit to skip
10
    skip_value.sort(reverse=True)
11
12
    # Mark which firewalls to skip
13
    skipped = [0] * n
14
    for i in range(k):
15
        _, idx = skip_value[i]
16
        skipped[idx] = 1
17
18
    # Now calculate final effort
19
    effort = 0
20
    penalty = 0
21
    for i in range(n):
22
        if skipped[i]:
23
            penalty += 1
24
        else:
25
            effort += firewalls[i] + penalty
26
27
    return effort
28
29
# Main driver
30
T = int(input())
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    firewalls = list(map(int, input().split()))
34
    print(minimize_effort(n, k, firewalls))",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055888
1390055892,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
# Input Handling
60
if __name__ == ""__main__"":
61
    T = int(input())
62
    test_cases = [input().strip() for _ in range(T)]
63
    results = min_decommissioning_cost(test_cases)
64
    for result in results:
65
        print(result)",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055892
1390055874,unknown,unknown,unknown,"1
def compute_min_cost(s):
2
    T = s.count('1')
3
    if T == 0:
4
        return 0
5
    n = len(s)
6
    7
    # Compute x_max_case1: max number of 1's in window of length T
8
    x_max_case1 = 0
9
    if T <= n:
10
        current = sum(1 for c in s[:T] if c == '1')
11
        x_max_case1 = current
12
        for i in range(1, n - T + 1):
13
            if s[i-1] == '1':
14
                current -= 1
15
            if s[i + T - 1] == '1':
16
                current += 1
17
            if current > x_max_case1:
18
                x_max_case1 = current
19
    20
    # Compute x_max_case2: max of min(run_length, T-1) for all runs of 1's
21
    x_max_case2 = 0
22
    current_run = 0
23
    for c in s:
24
        if c == '1':
25
            current_run += 1
26
        else:
27
            if current_run > 0:
28
                candidate = min(current_run, T-1)
29
                if candidate > x_max_case2:
30
                    x_max_case2 = candidate
31
                current_run = 0
32
    # Check the last run
33
    if current_run > 0:
34
        candidate = min(current_run, T-1)
35
        if candidate > x_max_case2:
36
            x_max_case2 = candidate
37
    38
    case1_cost = T - x_max_case1
39
    case2_cost = T - x_max_case2
40
    return min(case1_cost, case2_cost)
41
42
def main():
43
    import sys
44
    input = sys.stdin.read().split()
45
    T_cases = int(input[0])
46
    for i in range(1, T_cases + 1):
47
        s = input[i]
48
        print(compute_min_cost(s))
49
50
if __name__ == ""__main__"":
51
    main()
52",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055874
1390055876,unknown,unknown,unknown,"1
import sys
2
def solve():
3
    x = sys.stdin.buffer.read().split()
4
    if not x: return
5
    t = int(x[0])
6
    i = 1
7
    o = []
8
    for _ in range(t):
9
        s = x[i].decode()
10
        i += 1
11
        n = len(s)
12
        A = [0]*(n+1)
13
        B = [0]*(n+1)
14
        for j in range(n):
15
            B[j+1] = B[j] + (s[j]=='1')
16
            A[j+1] = A[j] + (s[j]=='0')
17
        T = A[n]
18
        C = [0]*(n+1)
19
        E = [0]*(n+1)
20
        for j in range(n):
21
            E[j+1] = E[j] + (s[n-1-j]=='1')
22
            C[j+1] = C[j] + (s[n-1-j]=='0')
23
        r = 10**9
24
        for x_ in range(n+1):
25
            m = n - x_
26
            y = T - A[x_] - B[x_]
27
            if y < 0: y = 0
28
            if y > m: y = m
29
            for z in (y, y-1, y+1):
30
                if z < 0 or z > m: continue
31
                v1 = B[x_] + E[z]
32
                v2 = T - (A[x_] + C[z])
33
                v = v1 if v1 >= v2 else v2
34
                if v < r: r = v
35
        o.append(str(r))
36
    sys.stdout.write(""\n"".join(o))
37
if __name__==""__main__"":
38
    solve()",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055876
1390055880,unknown,unknown,unknown,"1
import sys
2
3
def min_pruning_cost(T, test_cases):
4
    results = []
5
    6
    for servers in test_cases:
7
        first_one = servers.find('1') 
8
        last_one = servers.rfind('1')  
9
10
        if first_one == -1:  
11
            results.append(""0"")
12
            continue
13
        core_segment = servers[first_one:last_one + 1]
14
        idle_remaining = core_segment.count('0')  
15
        active_removed = servers[:first_one].count('1') + servers[last_one + 1:].count('1')
16
        results.append(str(max(idle_remaining, active_removed)))
17
T = int(sys.stdin.readline().strip())  
18
test_cases = [sys.stdin.readline().strip() for _ in range(T)]
19
min_pruning_cost(T, test_cases)
20",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055880
1390055869,unknown,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def min_decommissioning_cost(rack):
5
    left = rack.find('1')
6
    right = rack.rfind('1')
7
    8
    # If no active servers (all zeros), cost = 0
9
    if left == -1:
10
        return 0
11
    12
    # Trim the rack from leftmost '1' to rightmost '1'
13
    trimmed_rack = rack[left:right + 1]
14
    15
    # Remaining idle servers after trimming
16
    remaining_idle = trimmed_rack.count('0')
17
    18
    # Removed active servers from the left and right sides
19
    removed_active = rack[:left].count('1') + rack[right + 1:].count('1')
20
    21
    # Cost = max(remaining idle servers, removed active servers)
22
    return max(remaining_idle, removed_active)
23
24
# Efficient Input Handling
25
data = input().strip().split(""\n"")
26
t = int(data[0])
27
test_cases = data[1:t + 1]
28
29
# Compute results
30
results = [str(min_decommissioning_cost(tc)) for tc in test_cases]
31
32
# Fast Output
33
sys.stdout.write(""\n"".join(results) + ""\n"")
34",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055869
1390055872,unknown,unknown,unknown,"1
import java.io.*;
2
3
import java.util.*;
4
5
public class Solution {
6
7
    8
9
    10
11
    static boolean feasible(int X, int[] onesIndices, int total1) {
12
13
       14
15
        if (X >= total1) return true;
16
17
        int j = 0;
18
19
        for (int i = 0; i < total1; i++) {
20
21
            22
23
            if (j < i) j = i;
24
25
            26
27
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
28
29
                j++;
30
31
            }
32
33
            int m = j - i; 
34
35
            if (m >= total1 - X) return true;
36
37
        }
38
39
        return false;
40
41
    }
42
43
    44
45
    public static void main(String[] args) {
46
47
        Scanner sc = new Scanner(System.in);
48
49
        int T = sc.nextInt();
50
51
        52
53
        while(T-- > 0) {
54
55
            String s = sc.next();
56
57
            int n = s.length();
58
59
            60
61
           62
63
            ArrayList<Integer> onesList = new ArrayList<>();
64
65
            for (int i = 0; i < n; i++) {
66
67
                if (s.charAt(i) == '1') {
68
69
                    onesList.add(i);
70
71
                }
72
73
            }
74
75
            int total1 = onesList.size();
76
77
            78
79
           80
81
            if (total1 == 0) {
82
83
                System.out.println(0);
84
85
                continue;
86
87
            }
88
89
            90
91
           92
93
            int[] onesIndices = new int[total1];
94
95
            for (int i = 0; i < total1; i++) {
96
97
                onesIndices[i] = onesList.get(i);
98
99
            }
100
101
            102
103
           104
105
            int low = 0, high = total1, ans = high;
106
107
            while (low <= high) {
108
109
                int mid = low + (high - low) / 2;
110
111
                if (feasible(mid, onesIndices, total1)) {
112
113
                    ans = mid;
114
115
                    high = mid - 1;
116
117
                } else {
118
119
                    low = mid + 1;
120
121
                }
122
123
            }
124
125
            System.out.println(ans);
126
127
        }
128
129
        sc.close();
130
131
    }
132
133
}",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055872
1390055870,unknown,unknown,unknown,"1
import java.io.*;
2
3
import java.util.*;
4
5
public class Solution {
6
7
    8
9
    10
11
    static boolean feasible(int X, int[] onesIndices, int total1) {
12
13
       14
15
        if (X >= total1) return true;
16
17
        int j = 0;
18
19
        for (int i = 0; i < total1; i++) {
20
21
            22
23
            if (j < i) j = i;
24
25
            26
27
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
28
29
                j++;
30
31
            }
32
33
            int m = j - i; 
34
35
            if (m >= total1 - X) return true;
36
37
        }
38
39
        return false;
40
41
    }
42
43
    44
45
    public static void main(String[] args) {
46
47
        Scanner sc = new Scanner(System.in);
48
49
        int T = sc.nextInt();
50
51
        52
53
        while(T-- > 0) {
54
55
            String s = sc.next();
56
57
            int n = s.length();
58
59
            60
61
           62
63
            ArrayList<Integer> onesList = new ArrayList<>();
64
65
            for (int i = 0; i < n; i++) {
66
67
                if (s.charAt(i) == '1') {
68
69
                    onesList.add(i);
70
71
                }
72
73
            }
74
75
            int total1 = onesList.size();
76
77
            78
79
           80
81
            if (total1 == 0) {
82
83
                System.out.println(0);
84
85
                continue;
86
87
            }
88
89
            90
91
           92
93
            int[] onesIndices = new int[total1];
94
95
            for (int i = 0; i < total1; i++) {
96
97
                onesIndices[i] = onesList.get(i);
98
99
            }
100
101
            102
103
           104
105
            int low = 0, high = total1, ans = high;
106
107
            while (low <= high) {
108
109
                int mid = low + (high - low) / 2;
110
111
                if (feasible(mid, onesIndices, total1)) {
112
113
                    ans = mid;
114
115
                    high = mid - 1;
116
117
                } else {
118
119
                    low = mid + 1;
120
121
                }
122
123
            }
124
125
            System.out.println(ans);
126
127
        }
128
129
        sc.close();
130
131
    }
132
133
}",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055870
1390055865,unknown,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    s = input().strip()
4
    init_0 = s.count('0')
5
    best = float('inf')
6
    7
    n = len(s)
8
    9
    for p in range(n + 1):  
10
        for q in range(n + 1 - p):
11
            if p + q > n:
12
                continue
13
            14
            mid = s[p:n-q]
15
            16
            if not mid: 
17
                zeros = 0
18
                ones_cut = s.count('1')
19
            else:
20
                zeros = mid.count('0')
21
                ones_cut = s.count('1') - mid.count('1')
22
            23
            c = max(zeros, ones_cut)
24
            best = min(best, c)
25
    26
    print(best)",17,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055865
