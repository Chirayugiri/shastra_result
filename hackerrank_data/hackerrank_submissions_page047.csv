submission_id,username,problem_name,language,code,page,url
1390055175,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        total_ones = s.count('1')
6
        total_zeros = s.count('0')
7
        min_cost = float('inf')
8
        for i in range(n + 1):
9
            for j in range(i, n + 1):
10
                window_zeros = s[i:j].count('0')
11
                window_ones = s[i:j].count('1')               
12
                removed_ones = total_ones - window_ones
13
                remaining_zeros = window_zeros
14
                cost = max(remaining_zeros, removed_ones)
15
                min_cost = min(min_cost, cost)
16
        results.append(min_cost)
17
    return results
18
T = int(input()) 
19
test_cases = [input().strip() for _ in range(T)]
20
results = min_decommissioning_cost(test_cases)
21
for result in results:
22
    print(result)
23",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055175
1390055176,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(t, test_cases):
4
    results = []
5
    6
    for case in test_cases:
7
        n, k, arr = case
8
        dq = deque()
9
        output = []
10
        11
        for i in range(n):
12
            # Remove elements that are out of this window
13
            if dq and dq[0] < i - k + 1:
14
                dq.popleft()
15
            16
            # Add current element if it is faulty (negative)
17
            if arr[i] < 0:
18
                dq.append(i)
19
            20
            # Process first valid window
21
            if i >= k - 1:
22
                output.append(arr[dq[0]] if dq else 0)
23
        24
        results.append(output)
25
    26
    return results
27
28
# Reading input
29
t = int(input())
30
test_cases = []
31
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    test_cases.append((n, k, arr))
36
37
# Processing and printing output
38
results = earliest_faulty_readings(t, test_cases)
39
for res in results:
40
    print("" "".join(map(str, res)))",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055176
1390055177,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        reductions = []
6
        for i in range(n):
7
            reductions.append(a[i] - (n - i - 1))
8
        positive_reductions = [r for r in reductions if r > 0]
9
        positive_reductions.sort(reverse=True)
10
        skip_count = min(k, len(positive_reductions))
11
        total_reduction = sum(positive_reductions[:skip_count])
12
       13
        firewall_indices = [(a[i], i) for i in range(n)]
14
        firewall_indices.sort(key=lambda x: x[0] - (n - x[1] - 1), reverse=True)
15
        skip_indices = set()
16
        for i in range(min(k, n)):
17
            skip_indices.add(firewall_indices[i][1])
18
        total_effort = 0
19
        increase = 0
20
        for i in range(n):
21
            if i in skip_indices:
22
                increase += 1
23
            else:
24
                total_effort += a[i] + increase
25
        26
        results.append(total_effort)
27
    return results
28
29
T = int(input())
30
test_cases = []
31
for _ in range(T):
32
    n, k = map(int, input().split())
33
    a = list(map(int, input().split()))
34
    test_cases.append((n, k, a))
35
36
results = min_effort(test_cases)
37
38
for res in results:
39
    print(res)",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055177
1390055168,unknown,unknown,unknown,"1
def find_faulty_readings(arr, k):
2
    result = []
3
    for i in range(len(arr) - k + 1):
4
        batch = arr[i:i + k]
5
        faulty_reading = 0
6
        for num in batch:
7
            if num < 0:
8
                faulty_reading = num
9
                break
10
        result.append(faulty_reading)
11
    return result
12
13
if __name__ == ""__main__"":
14
    t = int(input())
15
    for _ in range(t):
16
        n, k = map(int, input().split())
17
        arr = list(map(int, input().split()))
18
        output = find_faulty_readings(arr, k)
19
        print(*output)",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390055168
1390055169,unknown,unknown,unknown,"1
import sys
2
from itertools import accumulate
3
4
def min_effort(arr, k):
5
    n = len(arr)
6
    T = sum(arr)
7
    A = [arr[i] + (i+1) for i in range(n)]
8
    A.sort(reverse=True)
9
    P = [0] + list(accumulate(A))
10
    m_max = min(k, n)
11
    best = float('inf')
12
    for m in range(m_max + 1):
13
        cost = T + m * n - (m * m - m) // 2 - P[m]
14
        if cost < best:
15
            best = cost
16
    return best
17
18
def solve():
19
    data = sys.stdin.read().strip().split()
20
    if not data:
21
        return
22
    t = int(data[0])
23
    index = 1
24
    res = []
25
    for _ in range(t):
26
        n = int(data[index]); index += 1
27
        k = int(data[index]); index += 1
28
        arr = list(map(int, data[index:index+n])); index += n
29
        res.append(str(min_effort(arr, k)))
30
    sys.stdout.write(""\n"".join(res))
31
32
if __name__ == ""__main__"":
33
    solve()",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055169
1390055174,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Main {
4
5
    public static void main(String[] args) {
6
        Scanner sc = new Scanner(System.in);
7
        int T = sc.nextInt();
8
        sc.nextLine(); // Consume the newline after T
9
        while (T-- > 0) {
10
            String s = sc.nextLine().trim();
11
            int n = s.length();
12
            int totalOnes = 0;
13
            int maxConsecutiveOnes = 0;
14
            int currentConsecutiveOnes = 0;
15
            16
            // Calculate totalOnes and maxConsecutiveOnes
17
            for (char c : s.toCharArray()) {
18
                if (c == '1') {
19
                    currentConsecutiveOnes++;
20
                    maxConsecutiveOnes = Math.max(maxConsecutiveOnes, currentConsecutiveOnes);
21
                    totalOnes++;
22
                } else {
23
                    currentConsecutiveOnes = 0;
24
                }
25
            }
26
            27
            // Handle cases where the cost is trivially 0
28
            if (totalOnes == 0) {
29
                System.out.println(0);
30
                continue;
31
            }
32
            if (maxConsecutiveOnes == totalOnes) {
33
                System.out.println(0);
34
                continue;
35
            }
36
            37
            int totalZeros = n - totalOnes;
38
            int low = 0;
39
            int high = Math.max(totalOnes, totalZeros);
40
            int answer = high;
41
            42
            // Binary search for the minimal possible cost
43
            while (low <= high) {
44
                int mid = (low + high) / 2;
45
                int requiredOnes = Math.max(0, totalOnes - mid);
46
                47
                if (requiredOnes == 0) {
48
                    answer = mid;
49
                    high = mid - 1;
50
                    continue;
51
                }
52
                53
                int maxOnes = maxOnesWithAtMostKZeros(s, mid);
54
                if (maxOnes >= requiredOnes) {
55
                    answer = mid;
56
                    high = mid - 1;
57
                } else {
58
                    low = mid + 1;
59
                }
60
            }
61
            62
            System.out.println(answer);
63
        }
64
        sc.close();
65
    }
66
    67
    // Helper function to calculate maximum ones in any window with at most k zeros
68
    private static int maxOnesWithAtMostKZeros(String s, int k) {
69
        int left = 0;
70
        int zeros = 0;
71
        int maxOnes = 0;
72
        int n = s.length();
73
        74
        for (int right = 0; right < n; right++) {
75
            if (s.charAt(right) == '0') {
76
                zeros++;
77
            }
78
            // Shrink the window if zeros exceed k
79
            while (zeros > k) {
80
                if (s.charAt(left) == '0') {
81
                    zeros--;
82
                }
83
                left++;
84
            }
85
            // Calculate current number of ones in the window
86
            int currentOnes = (right - left + 1) - zeros;
87
            maxOnes = Math.max(maxOnes, currentOnes);
88
        }
89
        90
        return maxOnes;
91
    }
92
}",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055174
1390055158,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    ans = float('inf')
6
    7
    for i in range(n + 1):
8
        decommissioned_ones_left = s[:i].count('1')
9
        10
        for j in range(n - i + 1):
11
            decommissioned_ones_right = s[n - j:].count('1')
12
            remaining_zeros = s[i:n - j].count('0')
13
            14
            ans = min(ans, max(decommissioned_ones_left + decommissioned_ones_right, remaining_zeros))
15
            16
    print(ans)
17
18
t = int(input())
19
for _ in range(t):
20
    solve()",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055158
1390055160,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for servers in test_cases:
4
        n = len(servers)
5
        total_ones = servers.count('1')
6
        min_cost = float('inf')
7
        for p in range(n + 1):
8
            for s in range(n - p + 1):
9
                remaining = servers[p:n-s]
10
                remaining_zeros = remaining.count('0')
11
                remaining_ones = remaining.count('1')
12
                removed_ones = total_ones - remaining_ones
13
                cost = max(remaining_zeros, removed_ones)
14
                min_cost = min(min_cost, cost)
15
        results.append(min_cost)
16
    return results
17
T = int(input().strip())
18
test_cases = [input().strip() for _ in range(T)]
19
results = min_cost(test_cases)
20
print(""\n"".join(map(str, results)))",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055160
1390055163,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
    left = 0
3
    zeros = 0
4
    max_ones = 0
5
    n = len(s)
6
    7
    for right in range(n):
8
        if s[right] == '0':
9
            zeros += 1
10
        11
        while zeros > k:
12
            if s[left] == '0':
13
                zeros -= 1
14
            left += 1
15
        16
        current_ones = (right - left + 1) - zeros
17
        max_ones = max(max_ones, current_ones)
18
    19
    return max_ones
20
21
def min_cost_to_prune(s):
22
    n = len(s)
23
    total_ones = s.count('1')
24
    max_consecutive_ones = max(map(len, s.split('0')))
25
    26
    if total_ones == 0:
27
        return 0
28
    if max_consecutive_ones == total_ones:
29
        return 0
30
    31
    total_zeros = n - total_ones
32
    low, high = 0, max(total_ones, total_zeros)
33
    answer = high
34
    35
    while low <= high:
36
        mid = (low + high) // 2
37
        required_ones = max(0, total_ones - mid)
38
        39
        if required_ones == 0:
40
            answer = mid
41
            high = mid - 1
42
            continue
43
        44
        max_ones = max_ones_with_at_most_k_zeros(s, mid)
45
        if max_ones >= required_ones:
46
            answer = mid
47
            high = mid - 1
48
        else:
49
            low = mid + 1
50
    51
    return answer
52
53
54
def main():
55
    t = int(input().strip())
56
    for _ in range(t):
57
        s = input().strip()
58
        print(min_cost_to_prune(s))
59
60
if __name__ == ""__main__"":
61
    main()",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055163
1390055156,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
    5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):
8
        skipped = []
9
        efforts = []
10
        11
        for j in range(n):
12
            if (i >> j) & 1:
13
                skipped.append(j)
14
            else:
15
                efforts.append(j)
16
        17
        if len(skipped) <= k:
18
            effort = 0
19
            skipped_count = 0
20
            for j in range(n):
21
                if j in skipped:
22
                    skipped_count += 1
23
                else:
24
                    effort += a[j] + skipped_count
25
            min_effort = min(min_effort, effort)
26
    27
    print(min_effort)
28
    29
t = int(input())
30
for _ in range(t):
31
    solve()",47,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055156
