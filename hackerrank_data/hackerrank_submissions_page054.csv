submission_id,username,problem_name,language,code,page,url
1390055012,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
    5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):
8
        skipped = []
9
        efforts = []
10
        11
        for j in range(n):
12
            if (i >> j) & 1:
13
                skipped.append(j)
14
            else:
15
                efforts.append(j)
16
        17
        if len(skipped) <= k:
18
            effort = 0
19
            skipped_count = 0
20
            for j in range(n):
21
                if j in skipped:
22
                    skipped_count += 1
23
                else:
24
                    effort += a[j] + skipped_count
25
            min_effort = min(min_effort, effort)
26
    27
    print(min_effort)
28
    29
t = int(input())
30
for _ in range(t):
31
    solve()",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055012
1390055013,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    """"""
3
    Calculate the minimum effort needed to breach the network.
4
    5
    Args:
6
        n (int): Number of firewalls
7
        k (int): Maximum number of firewalls that can be skipped
8
        strengths (list): List of firewall strengths
9
    10
    Returns:
11
        int: Minimum effort required
12
    """"""
13
    # Edge case: if we can skip all firewalls
14
    if k >= n:
15
        return 0
16
        17
    # We need to find the optimal firewalls to skip
18
    # This is a combinatorial problem
19
    20
    # First, let's calculate the impact of skipping each firewall
21
    # Impact = firewall's strength - penalty to subsequent firewalls
22
    impacts = []
23
    24
    for i in range(n):
25
        # If we skip this firewall, we save its strength
26
        # But we impose a penalty of +1 on (n-i-1) remaining firewalls
27
        impact = strengths[i] - (n - i - 1)
28
        impacts.append((impact, i))
29
    30
    # Sort by impact in descending order
31
    impacts.sort(reverse=True)
32
    33
    # Select the k firewalls with the highest impact to skip
34
    to_skip = set(impacts[i][1] for i in range(k))
35
    36
    # Calculate the total effort
37
    total_effort = 0
38
    penalty = 0
39
    40
    for i in range(n):
41
        if i in to_skip:
42
            # Skip this firewall
43
            penalty += 1
44
        else:
45
            # Breach this firewall (with penalty applied)
46
            total_effort += strengths[i] + penalty
47
    48
    return total_effort
49
50
def solve_test_cases():
51
    """"""
52
    Process all test cases and return the minimum effort for each.
53
    """"""
54
    t = int(input())  # Number of test cases
55
    results = []
56
    57
    for _ in range(t):
58
        n, k = map(int, input().split())
59
        strengths = list(map(int, input().split()))
60
        results.append(min_effort_to_breach(n, k, strengths))
61
    62
    return results
63
64
# Main function to run the solution
65
def main():
66
    results = solve_test_cases()
67
    68
    # Print the results
69
    for result in results:
70
        print(result)
71
72
if __name__ == ""__main__"":
73
    main()",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055013
1390055017,unknown,unknown,unknown,"1
import sys
2
input = sys.stdin.read
3
4
def minimum_effort(arr, k):
5
    n = len(arr)
6
    7
    if k == n:
8
        return 0
9
    10
    total_effort = sum(arr)
11
    min_effort = total_effort
12
    13
    # Sliding window to calculate the sum of any skipped window of size k
14
    window_sum = sum(arr[:k])
15
    for i in range(n - k + 1):
16
        skipped_effort = total_effort - window_sum + k
17
        min_effort = min(min_effort, skipped_effort)
18
        19
        # Slide the window to the right
20
        if i + k < n:
21
            window_sum = window_sum - arr[i] + arr[i + k]
22
    23
    return min_effort
24
25
# Efficient Input Handling with ASCII Conversion
26
data = input().encode('ascii', 'ignore').decode('ascii').strip().split(""\n"")
27
t = int(data[0])
28
index = 1
29
30
results = []
31
for _ in range(t):
32
    n, k = map(int, data[index].split())
33
    arr = list(map(int, data[index + 1].split()))
34
    results.append(str(minimum_effort(arr, k)))
35
    index += 2
36
37
# Fast Output
38
sys.stdout.write(""\n"".join(results) + ""\n"")
39",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055017
1390055009,unknown,unknown,unknown,"1
t = int(input())
2
for _ in range(t):
3
    n, k = map(int, input().split())
4
    arr = list(map(int, input().split()))
5
    if k == n:
6
        print(0)
7
        continue
8
9
    effort_sum = sum(arr)
10
    11
    for i in range(1, n+1):
12
        temp = arr[i-1]
13
        arr[i-1] = 0   
14
        effort_sum = min(effort_sum, sum(arr[:]) + (1 * (n-i)))
15
        arr[i-1] = temp 
16
       17
    print(effort_sum)",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055009
1390055010,unknown,unknown,unknown,"1
def minimize_cost(s):
2
    total_ones = s.count('1')
3
    total_zeros = len(s) - total_ones
4
    low = 0
5
    high = max(total_ones, total_zeros)
6
    answer = high  # Initialize with the maximum possible value
7
8
    while low <= high:
9
        mid = (low + high) // 2
10
        K = total_ones - mid
11
12
        # Check if current mid is feasible
13
        if K <= 0:
14
            feasible = (total_zeros <= mid)
15
        else:
16
            current_0 = 0
17
            current_1 = 0
18
            left = 0
19
            feasible = False
20
            for right in range(len(s)):
21
                if s[right] == '0':
22
                    current_0 += 1
23
                else:
24
                    current_1 += 1
25
                # Move left pointer to ensure current_0 <= mid
26
                while current_0 > mid:
27
                    if s[left] == '0':
28
                        current_0 -= 1
29
                    else:
30
                        current_1 -= 1
31
                    left += 1
32
                # Check if current window meets the 1's requirement
33
                if current_1 >= K:
34
                    feasible = True
35
                    break
36
        if feasible:
37
            answer = mid
38
            high = mid - 1
39
        else:
40
            low = mid + 1
41
    return answer
42
43
T = int(input())
44
for _ in range(T):
45
    s = input().strip()
46
    print(minimize_cost(s))",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055010
1390055011,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for s in test_cases:
5
        # Remove leading and trailing zeros, they don't contribute to cost
6
        trimmed = s.strip('0')
7
8
        if not trimmed:  # If string becomes empty after trimming
9
            results.append(0)
10
            continue
11
12
        total_ones = trimmed.count('1')
13
        min_cost = float('inf')
14
15
        # Try removing from both ends
16
        left_zeros = 0
17
        left_ones_removed = 0
18
        n = len(trimmed)
19
20
        for i in range(n + 1):
21
            # Calculate remaining zeros
22
            right_zeros = trimmed[i:].count('0')
23
            cost = max(right_zeros, left_ones_removed)
24
            min_cost = min(min_cost, cost)
25
26
            # If not at the end, update counts
27
            if i < n:
28
                if trimmed[i] == '1':
29
                    left_ones_removed += 1
30
                else:
31
                    left_zeros += 1
32
33
        results.append(min_cost)
34
35
    return results
36
37
38
# Reading input
39
t = int(input().strip())
40
test_cases = [input().strip() for _ in range(t)]
41
result = min_decommissioning_cost(test_cases)
42
43
# Output results
44
for res in result:
45
    print(res)
46",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055011
1390055004,unknown,unknown,unknown,"1
import sys
2
3
from itertools import accumulate
4
5
def min_effort(arr, k):
6
    7
8
    n = len(arr)
9
10
    T = sum(arr)
11
    12
13
    A = [arr[i] + (i+1) for i in range(n)]
14
    15
    16
17
    A.sort(reverse=True)
18
19
    P = [0] + list(accumulate(A))
20
21
    m_max = min(k, n)
22
23
    best = float('inf')
24
    25
    26
27
    for m in range(m_max + 1):
28
        29
30
        cost = T + m * n - (m * m - m) // 2 - P[m]
31
        32
        33
34
        if cost < best:
35
36
            best = cost
37
            38
            39
40
    return best
41
42
43
44
def solve():
45
46
    data = sys.stdin.read().strip().split()
47
48
    if not data:
49
50
        return
51
    52
    53
54
    t = int(data[0])
55
56
    index = 1
57
    58
59
    res = []
60
    61
    62
63
    for _ in range(t):
64
65
        n = int(data[index]); index += 1
66
67
        k = int(data[index]); index += 1
68
69
        arr = list(map(int, data[index:index+n])); index += n
70
71
        res.append(str(min_effort(arr, k)))
72
        73
74
    sys.stdout.write(""\n"".join(res))
75
    76
    77
78
if __name__ == ""__main__"":
79
    80
81
    solve()",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055004
1390055007,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    min_cost = float('inf')
5
    6
    for i in range(n + 1):  
7
        for j in range(n + 1 - i):  
8
            if i + j > n:
9
                continue
10
                11
            remaining = server_rack[i:n-j]
12
            13
            if not remaining:
14
                continue  
15
                16
            idle_remaining = remaining.count('0')
17
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
18
            19
            cost = max(idle_remaining, active_removed)
20
            21
            min_cost = min(min_cost, cost)
22
    23
    return min_cost
24
25
t = int(input())
26
results = []
27
28
for _ in range(t):
29
    server_rack = input().strip()
30
    results.append(min_decommissioning_cost(server_rack))
31
32
for result in results:
33
    print(result)",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055007
1390055008,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_zeros = servers.count('0')
7
        total_ones = n - total_zeros
8
        9
        prefix_zeros = [0] * (n + 1)
10
        prefix_ones = [0] * (n + 1)
11
        for i in range(1, n + 1):
12
            prefix_zeros[i] = prefix_zeros[i - 1] + (servers[i - 1] == '0')
13
            prefix_ones[i] = prefix_ones[i - 1] + (servers[i - 1] == '1')
14
        15
        suffix_zeros = [0] * (n + 1)
16
        suffix_ones = [0] * (n + 1)
17
        for j in range(1, n + 1):
18
            suffix_zeros[j] = suffix_zeros[j - 1] + (servers[n - j] == '0')
19
            suffix_ones[j] = suffix_ones[j - 1] + (servers[n - j] == '1')
20
        21
        min_cost = float('inf')
22
        23
        for i in range(n + 1):
24
            j_max = n - i
25
            left, right = 0, j_max
26
            best_j = 0
27
            best_cost = float('inf')
28
            29
            while left <= right:
30
                mid = (left + right) // 2
31
                remaining_zeros = total_zeros - (prefix_zeros[i] + suffix_zeros[mid])
32
                decommissioned_ones = prefix_ones[i] + suffix_ones[mid]
33
                current_cost = max(remaining_zeros, decommissioned_ones)
34
                35
                if current_cost < best_cost:
36
                    best_cost = current_cost
37
                    best_j = mid
38
                elif current_cost == best_cost and mid < best_j:
39
                    best_j = mid
40
                41
                if decommissioned_ones < remaining_zeros:
42
                    left = mid + 1
43
                else:
44
                    right = mid - 1
45
            46
            for dj in [-1, 0, 1]:
47
                j = best_j + dj
48
                if 0 <= j <= j_max:
49
                    remaining_zeros = total_zeros - (prefix_zeros[i] + suffix_zeros[j])
50
                    decommissioned_ones = prefix_ones[i] + suffix_ones[j]
51
                    current_cost = max(remaining_zeros, decommissioned_ones)
52
                    if current_cost < best_cost:
53
                        best_cost = current_cost
54
            55
            if best_cost < min_cost:
56
                min_cost = best_cost
57
        58
        results.append(min_cost)
59
    60
    return results
61
62
if __name__ == ""__main__"":
63
    test_cases_count = int(input())
64
    test_cases = [input().strip() for _ in range(test_cases_count)]
65
    66
    results = min_decommissioning_cost(test_cases)
67
    68
    for result in results:
69
        print(result)
70",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055008
1390055003,unknown,unknown,unknown,"1
def minimize_effort(n, k, a):
2
    a.sort(reverse=True)  # Sort firewalls in descending order (strongest first)
3
4
    # Total effort without skipping any firewall
5
    total_effort = sum(a)
6
7
    # If we can skip all firewalls, effort becomes 0
8
    if k == n:
9
        return 0
10
11
    # Pick the strongest `k` firewalls to skip
12
    skip_total = sum(a[:k])  # Sum of the `k` highest firewalls we skip
13
14
    # Calculate penalty for remaining firewalls
15
    penalty = sum(range(k))  # Sum of first `k` natural numbers (0, 1, 2, ..., k-1)
16
17
    # Minimum effort calculation
18
    return (total_effort - skip_total + penalty)
19
20
# Driver Code
21
T = int(input().strip())  # Number of test cases
22
for _ in range(T):
23
    n, k = map(int, input().split())  # Read n (firewalls) and k (skips)
24
    a = list(map(int, input().split()))  # Read firewall strengths
25
    26
    result = minimize_effort(n, k, a)
27
    print(result)
28",54,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055003
