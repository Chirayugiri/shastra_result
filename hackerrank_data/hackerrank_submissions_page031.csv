submission_id,username,problem_name,language,code,page,url
1390055533,unknown,unknown,unknown,"1
def min_server_pruning_cost(binary_string):
2
    # Find the first and last occurrence of '1'
3
    first_one = binary_string.find('1')
4
    last_one = binary_string.rfind('1')
5
6
    if first_one == -1:  # If there are no '1s', we can remove everything
7
        return 0
8
9
    # Trim the string to only the relevant section
10
    trimmed_string = binary_string[first_one:last_one + 1]
11
12
    # Count idle servers (0s) remaining and active servers (1s) removed
13
    remaining_idle_servers = trimmed_string.count('0')
14
    removed_active_servers = first_one + (len(binary_string) - 1 - last_one)
15
16
    # Return the minimum possible cost
17
    return max(remaining_idle_servers, removed_active_servers)
18
19
def solve():
20
    t = int(input().strip())  # Number of test cases
21
    results = []
22
    23
    for _ in range(t):
24
        binary_string = input().strip()
25
        results.append(str(min_server_pruning_cost(binary_string)))
26
27
    # Print all results for test cases
28
    print(""\n"".join(results))
29
30
# Execute the solution
31
if _name_ == ""_main_"":
32
    solve()",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055533
1390055534,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
# Input Handling
60
if __name__ == ""__main__"":
61
    T = int(input())
62
    test_cases = [input().strip() for _ in range(T)]
63
    results = min_decommissioning_cost(test_cases)
64
    for result in results:
65
        print(result)",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055534
1390055535,unknown,unknown,unknown,"1
def minimum_decommission_cost(servers):
2
    n = len(servers)
3
    4
    # Convert the string to a list of integers (0 or 1)
5
    server_list = [int(c) for c in servers]
6
7
    # Compute prefix sum of active servers (1s)
8
    prefix_sum = [0] * (n + 1)
9
    for i in range(n):
10
        prefix_sum[i + 1] = prefix_sum[i] + server_list[i]
11
12
    total_ones = prefix_sum[n]  # Total active servers
13
    min_cost = total_ones  # Worst case: decommission all active servers
14
15
    j = 0  # Right boundary of the window
16
    for i in range(n + 1):
17
        # Move j to maintain segment_zeros >= total_ones_removed
18
        while j <= n and (j - i) - (prefix_sum[j] - prefix_sum[i]) <= (prefix_sum[i] + (total_ones - prefix_sum[j])):
19
            j += 1
20
        21
        # Calculate cost at current window
22
        segment_zeros = (j - i - 1) - (prefix_sum[j - 1] - prefix_sum[i])
23
        left_ones = prefix_sum[i]
24
        right_ones = total_ones - prefix_sum[j - 1]
25
        cost = max(segment_zeros, left_ones + right_ones)
26
        27
        min_cost = min(min_cost, cost)
28
29
    return min_cost
30
31
def process_input():
32
    import sys
33
    input = sys.stdin.read
34
    data = input().split()
35
    36
    t = int(data[0])
37
    results = []
38
    39
    for i in range(1, t + 1):
40
        results.append(str(minimum_decommission_cost(data[i])))
41
    42
    print(""\n"".join(results))
43
44
if __name__ == ""__main__"":
45
    process_input()",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055535
1390055529,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
 3
    if k >= n:
4
        return 0
5
    6
    min_effort = float('inf')
7
    8
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
9
    dp[0][0] = 0  
10
    for i in range(1, n + 1):
11
        current_firewall = firewalls[i - 1]
12
        13
        for j in range(k + 1):
14
   15
            if j <= i - 1:
16
                dp[i][j] = min(dp[i][j], dp[i-1][j] + current_firewall + j)
17
           18
            if j > 0:
19
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
20
    21
    return min(dp[n][j] for j in range(k + 1))
22
23
def solve_test_cases():
24
    T = int(input().strip())
25
    results = []
26
    27
    for _ in range(T):
28
        n, k = map(int, input().strip().split())
29
        firewalls = list(map(int, input().strip().split()))
30
        results.append(min_effort_to_breach(n, k, firewalls))
31
    32
    return results
33
34
if __name__ == ""__main__"":
35
    results = solve_test_cases()
36
    for result in results:
37
        print(result)",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055529
1390055530,unknown,unknown,unknown,"1
import sys
2
3
def findMinCost():
4
    input_data = sys.stdin.read().splitlines()
5
    t = int(input_data[0].strip())
6
    line = 1
7
    ans = []
8
    9
    for _ in range(t):
10
        servers = input_data[line].strip()
11
        line += 1
12
        n = len(servers)
13
        14
        active_positions = [i for i, ch in enumerate(servers) if ch == '1']
15
        active_count = len(active_positions)
16
        17
        if active_count == 0:
18
            ans.append(""0"")
19
            continue
20
        21
        offset_positions = [active_positions[i] - i for i in range(active_count)]
22
        23
        def check(limit):
24
            if active_count - limit <= 0:
25
                return True
26
            j = 0
27
            for i in range(active_count):
28
                if j < i:
29
                    j = i
30
                while j < active_count and offset_positions[j] - offset_positions[i] <= limit:
31
                    j += 1
32
                if j - i >= active_count - limit:
33
                    return True
34
            return False
35
        36
        lo, hi, min_cost = 0, n, n
37
        while lo <= hi:
38
            mid = (lo + hi) // 2
39
            if check(mid):
40
                min_cost = mid
41
                hi = mid - 1
42
            else:
43
                lo = mid + 1
44
        45
        ans.append(str(min_cost))
46
    47
    sys.stdout.write(""\n"".join(ans))
48
    49
if __name__ == ""__main__"":
50
    findMinCost()",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055530
1390055531,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include<bits/stdc++.h>
7
using namespace std;
8
9
int solve(vector<int>& arr, int k){
10
    int n = arr.size();
11
    int ans = 0;
12
    13
    set<int> st;
14
    vector<int> right(n,0);
15
    for(int i=0; i<n; i++) right[i]=n-i-1;
16
    priority_queue<pair<int,int>, vector<pair<int,int>>> pq;
17
    for(int i=0; i<n; i++) pq.push({arr[i],i});
18
    19
    while(!pq.empty()){
20
        auto [val,idx] = pq.top(); pq.pop();
21
        22
        if(right[idx] < val && k){
23
            val=n-idx-1;
24
            st.insert(idx);
25
            k--;
26
            for(int i=0; i<idx; i++){
27
                right[i]--;
28
            }
29
            // cout<<""inserted ""<<idx<<"" k:""<<k<<"" "";
30
        }    
31
    }
32
    33
    // for(int i=0; i<n; i++) cout<<right[i]<<"" "";
34
    35
    int val=0, count=0; //count of k that is used.. val is no of -1 to be added
36
    37
    for(int i=0; i<n; i++){
38
        if(st.find(i)!=st.end()){
39
            if(count) val-=count;
40
            val += n-i-1;
41
            count++;
42
            continue;
43
        }
44
        ans += arr[i];
45
    }
46
    47
    ans += val;
48
    49
    return ans;
50
}
51
52
53
int main() {
54
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
55
    int t;
56
    cin>>t;
57
    while(t--){
58
        int n,k;
59
        cin>>n>>k;
60
        vector<int> arr(n);
61
        for(int i=0; i<n ;i++) cin>>arr[i];
62
        63
        int ans = solve(arr,k);
64
        cout<<ans<<endl;
65
    }
66
    return 0;
67
}
68",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055531
1390055526,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
3
    for j in range(k + 1):
4
        dp[0][j] = 0
5
    6
    for i in range(1, n + 1):
7
        for j in range(k + 1):
8
            if j > 0:
9
                dp[i][j] = dp[i-1][j-1]
10
            current_strength = strengths[i-1] + j 
11
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
12
    return min(dp[n])
13
14
def solve():
15
    t = int(input())
16
    results = []
17
    18
    for _ in range(t):
19
        n, k = map(int, input().split())
20
        strengths = list(map(int, input().split()))
21
        results.append(min_effort_to_breach(n, k, strengths))
22
    23
    for result in results:
24
        print(result)
25
26
solve()",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055526
1390055527,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
9
        for (int testCase = 0; testCase < t; testCase++) {
10
            int n = scanner.nextInt();
11
            int k = scanner.nextInt();
12
13
            int[] strengths = new int[n];
14
            for (int i = 0; i < n; i++) {
15
                strengths[i] = scanner.nextInt();
16
            }
17
18
            System.out.println(minimumEffort(strengths, k));
19
        }
20
21
        scanner.close();
22
    }
23
24
    public static long minimumEffort(int[] strengths, int k) {
25
        int n = strengths.length;
26
27
        if (k >= n) {
28
            return 0;
29
        }
30
31
        long[][] dp = new long[n + 1][k + 1];
32
33
        for (int i = 0; i <= n; i++) {
34
            for (int j = 0; j <= k; j++) {
35
                dp[i][j] = Long.MAX_VALUE / 2;
36
            }
37
        }
38
        dp[0][0] = 0;
39
40
        for (int i = 1; i <= n; i++) {
41
            int currentStrength = strengths[i - 1];
42
43
            for (int j = 0; j <= k; j++) {
44
                if (dp[i - 1][j] != Long.MAX_VALUE / 2) {
45
                    dp[i][j] = dp[i - 1][j] + currentStrength + j;
46
                }
47
            }
48
49
            for (int j = 1; j <= k; j++) {
50
                if (dp[i - 1][j - 1] != Long.MAX_VALUE / 2) {
51
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1]);
52
                }
53
            }
54
        }
55
56
        long minEffort = Long.MAX_VALUE;
57
        for (int j = 0; j <= k; j++) {
58
            minEffort = Math.min(minEffort, dp[n][j]);
59
        }
60
61
        return minEffort;
62
    }
63
}
64",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055527
1390055523,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}
69",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055523
1390055517,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
    left = 0
3
    zeros = 0
4
    max_ones = 0
5
    n = len(s)
6
    7
    for right in range(n):
8
        if s[right] == '0':
9
            zeros += 1
10
        while zeros > k:
11
            if s[left] == '0':
12
                zeros -= 1
13
            left += 1
14
        current_ones = (right - left + 1) - zeros
15
        max_ones = max(max_ones, current_ones)
16
    17
    return max_ones
18
19
def min_flips_to_make_ones_consecutive(s):
20
    n = len(s)
21
    total_ones = s.count('1')
22
    23
    if total_ones == 0 or '1' * total_ones in s:
24
        return 0
25
    26
    total_zeros = n - total_ones
27
    max_consecutive_ones = max(map(len, s.split('0')))
28
    29
    low, high = 0, max(total_ones, total_zeros)
30
    answer = high
31
32
    while low <= high:
33
        mid = (low + high) // 2
34
        required_ones = max(0, total_ones - mid)
35
36
        if required_ones == 0:
37
            answer = mid
38
            high = mid - 1
39
            continue
40
        41
        max_ones = max_ones_with_at_most_k_zeros(s, mid)
42
        if max_ones >= required_ones:
43
            answer = mid
44
            high = mid - 1
45
        else:
46
            low = mid + 1
47
    48
    return answer
49
50
# Input handling
51
T = int(input().strip())
52
for _ in range(T):
53
    s = input().strip()
54
    print(min_flips_to_make_ones_consecutive(s))
55",31,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055517
