submission_id,username,problem_name,language,code,page,url
1390052922,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_zeros = servers.count('0')
7
        total_ones = servers.count('1')
8
        9
        min_cost = float('inf')
10
        11
        for i in range(n + 1):  
12
            for j in range(n + 1):  
13
                if i + j > n:
14
                    continue 
15
                16
                active_decommissioned = servers[:i].count('1') + servers[n-j:].count('1')
17
                18
                remaining_zeros = total_zeros - (servers[:i].count('0') + servers[n-j:].count('0'))
19
                20
                cost = max(active_decommissioned, remaining_zeros)
21
                22
                min_cost = min(min_cost, cost)
23
        24
        results.append(min_cost)
25
    26
    return results
27
28
T = int(input())
29
test_cases = [input().strip() for _ in range(T)]
30
31
results = min_decommissioning_cost(test_cases)
32
33
for result in results:
34
    print(result)",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052922
1390052925,unknown,unknown,unknown,"1
def min_cost(servers):
2
    n = len(servers)
3
    min_cost_val = float('inf')
4
5
    for i in range(n + 1): 
6
        for j in range(n - i + 1):  
7
            remaining_servers = servers[i:n - j]
8
            9
            idle_count = remaining_servers.count('0')
10
            active_removed = servers[:i].count('1') + servers[n - j:].count('1')
11
            12
            cost = max(idle_count, active_removed)
13
            min_cost_val = min(min_cost_val, cost)
14
            15
    return min_cost_val
16
17
if __name__ == ""__main__"":
18
    t = int(input())
19
    for _ in range(t):
20
        servers = input()
21
        print(min_cost(servers))",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052925
1390052921,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()
7
    8
    9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
  14
    result.append(arr[dq[0]] if dq else 0)
15
16
    17
    for i in range(k, n):
18
       19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
def process_test_cases():
32
    t = int(input())  
33
    results = []
34
    35
    for _ in range(t):
36
        n, k = map(int, input().split())  
37
        arr = list(map(int, input().split()))  
38
        39
        results.append(earliest_faulty_readings(arr, k))
40
    41
    42
    for res in results:
43
        print(*res)
44
45
46
process_test_cases()
47",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052921
1390052917,unknown,unknown,unknown,"1
def minimum_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        if k >= n:
6
            results.append(0)
7
            continue
8
        9
        # Calculate the total effort if no firewalls are skipped
10
        total_effort = sum(a)
11
        12
        # Calculate the reduction for each firewall if it were skipped
13
        # The reduction is a[i] - (number of firewalls after it)
14
        # Because each skipped firewall increases the strength of all subsequent firewalls by 1
15
        reduction = []
16
        for i in range(n):
17
            reduction.append(a[i] - (n - i - 1))
18
        19
        # Sort the reduction values in descending order
20
        reduction.sort(reverse=True)
21
        22
        # Sum the top k reductions
23
        max_reduction = sum(reduction[:k])
24
        25
        # Subtract the maximum reduction from the total effort
26
        results.append(total_effort - max_reduction)
27
    return results
28
29
def main():
30
    import sys
31
    input = sys.stdin.read
32
    data = input().split()
33
    idx = 0
34
    T = int(data[idx])
35
    idx += 1
36
    test_cases = []
37
    for _ in range(T):
38
        n, k = int(data[idx]), int(data[idx + 1])
39
        idx += 2
40
        a = list(map(int, data[idx:idx + n]))
41
        idx += n
42
        test_cases.append((n, k, a))
43
    results = minimum_effort(test_cases)
44
    for res in results:
45
        print(res)
46
47
if __name__ == ""__main__"":
48
    main()",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052917
1390052919,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n, k, a = case
5
        # Calculate the potential reduction for each firewall if skipped
6
        # Reduction for a[i] is a[i] - (number of firewalls after it) * 1
7
        # Because skipping it increases the strength of all subsequent firewalls by 1
8
        # So, the net reduction is a[i] - (n - i - 1)
9
        reductions = []
10
        for i in range(n):
11
            reductions.append(a[i] - (n - i - 1))
12
        13
        # Select the top k reductions (most positive)
14
        # If a reduction is negative, it's better not to skip that firewall
15
        # So, we only consider positive reductions
16
        positive_reductions = [r for r in reductions if r > 0]
17
        positive_reductions.sort(reverse=True)
18
        19
        # Take the top min(k, len(positive_reductions)) reductions
20
        skip_count = min(k, len(positive_reductions))
21
        total_reduction = sum(positive_reductions[:skip_count])
22
        23
        # Calculate the total effort
24
        # Initial total effort is sum(a)
25
        # After skipping, the total effort is sum(a) - total_reduction
26
        # Because the skipped firewalls are reduced by their a[i], but the subsequent firewalls are increased by skip_count
27
        # Wait, no. The total effort is sum(a) - sum of a[i] for skipped firewalls + skip_count * (number of firewalls after the last skipped firewall)
28
        # This is getting complicated. Let's think differently.
29
        30
        # Alternative approach:
31
        # Sort the firewalls in descending order of a[i] - (n - i - 1)
32
        # Skip the top k firewalls in this order
33
        # Calculate the total effort accordingly
34
        35
        # Let's implement this alternative approach
36
        # Create a list of tuples (a[i], i)
37
        firewall_indices = [(a[i], i) for i in range(n)]
38
        # Sort by a[i] - (n - i - 1) in descending order
39
        firewall_indices.sort(key=lambda x: x[0] - (n - x[1] - 1), reverse=True)
40
        41
        # Select the top k firewalls to skip
42
        skip_indices = set()
43
        for i in range(min(k, n)):
44
            skip_indices.add(firewall_indices[i][1])
45
        46
        # Calculate the total effort
47
        total_effort = 0
48
        increase = 0
49
        for i in range(n):
50
            if i in skip_indices:
51
                increase += 1
52
            else:
53
                total_effort += a[i] + increase
54
        55
        results.append(total_effort)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = []
61
for _ in range(T):
62
    n, k = map(int, input().split())
63
    a = list(map(int, input().split()))
64
    test_cases.append((n, k, a))
65
66
# Compute results
67
results = min_effort(test_cases)
68
69
# Output results
70
for res in results:
71
    print(res)",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052919
1390052920,unknown,unknown,unknown,"1
def solution(n, k, arr):
2
    result = []
3
    4
    for i in range(n - k + 1):  
5
        found_faulty = False
6
        for j in range(k):
7
            if arr[i + j] < 0:
8
                result.append(arr[i + j]) 
9
                found_faulty = True
10
                break
11
        if not found_faulty:
12
            result.append(0)  
13
    14
    return "" "".join(map(str, result))  
15
16
17
t = int(input())
18
for _ in range(t):
19
    n, k = map(int, input().split())
20
    arr = list(map(int, input().split()))
21
    print(solution(n, k, arr))",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052920
1390052906,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    result = []
5
    dq = deque()
6
    7
    # Process first window
8
    for i in range(k):
9
        if arr[i] < 0:
10
            dq.append(i)
11
    12
    # Store the first result
13
    result.append(arr[dq[0]] if dq else 0)
14
    15
    # Process remaining windows
16
    for i in range(k, len(arr)):
17
        # Remove elements that are out of this window
18
        if dq and dq[0] < i - k + 1:
19
            dq.popleft()
20
        21
        # Add new element if it's negative
22
        if arr[i] < 0:
23
            dq.append(i)
24
        25
        # Store result for the current window
26
        result.append(arr[dq[0]] if dq else 0)
27
    28
    return result
29
30
# Reading input
31
t = int(input())
32
for _ in range(t):
33
    n, k = map(int, input().split())
34
    arr = list(map(int, input().split()))
35
    36
    print(*earliest_faulty_readings(arr, k))",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052906
1390052908,unknown,unknown,unknown,"1
def calculate_minimum_cost(rack):
2
    n = len(rack)
3
    min_cost = float('inf')
4
    5
    for i in range(n+1):
6
        for j in range(n+1):
7
            if i + j <= n:
8
                remaining_rack = rack[i:n-j]
9
                idle_servers = remaining_rack.count('0')
10
                active_servers_removed = rack[:i].count('1') + rack[n-j:].count('1')
11
                cost = max(idle_servers, active_servers_removed)
12
                min_cost = min(min_cost, cost)
13
    14
    return min_cost
15
16
def process_test_cases():
17
    t = int(input()) 
18
    for _ in range(t):
19
        rack = input().strip()  
20
        print(calculate_minimum_cost(rack))
21
22
23
process_test_cases()
24",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390052908
1390052910,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class Solution {
4
5
    public static void main(String[] args) {
6
        Scanner scanner = new Scanner(System.in);
7
        int t = scanner.nextInt();
8
        while (t-- > 0) {
9
            int n = scanner.nextInt();
10
            int k = scanner.nextInt();
11
            int[] a = new int[n];
12
            for (int j = 0; j < n; j++) {
13
                a[j] = scanner.nextInt();
14
            }
15
            solve(n, k, a);
16
        }
17
        scanner.close();
18
    }
19
20
    public static void solve(int n, int k, int[] a) {
21
        long minEffort = Long.MAX_VALUE;
22
23
        // Try all possible combinations of skipping elements
24
        for (int i = 0; i < (1 << n); i++) {
25
            int skippedCount = 0;
26
            // Count how many elements are skipped in this combination
27
            for (int j = 0; j < n; j++) {
28
                if ((i & (1 << j)) != 0) {
29
                    skippedCount++;
30
                }
31
            }
32
33
            // If the number of skipped elements is within the allowed limit
34
            if (skippedCount <= k) {
35
                long effort = 0;
36
                int increasedStrength = 0;
37
                int skippedIndex = 0;
38
                int[] skipped = new int[skippedCount];
39
                int skippedPtr = 0;
40
                //store the indexes of the skipped elements
41
                for (int j = 0; j < n; j++){
42
                    if((i & (1 << j)) != 0){
43
                        skipped[skippedPtr++] = j;
44
                    }
45
                }
46
47
                // Calculate the effort for this combination
48
                for (int j = 0; j < n; j++) {
49
                    // If this element is skipped, increase strength
50
                    if (skippedIndex < skippedCount && skipped[skippedIndex] == j) {
51
                        increasedStrength++;
52
                        skippedIndex++;
53
                    } else {
54
                        // Otherwise, add effort
55
                        effort += (long) a[j] + increasedStrength;
56
                    }
57
                }
58
59
                // Update the minimum effort if this combination is better
60
                minEffort = Math.min(minEffort, effort);
61
            }
62
        }
63
64
        System.out.println(minEffort);
65
    }
66
}",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390052910
1390052905,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    for _ in range(test_cases):
4
        n, k = map(int, input().split())
5
        arr = list(map(int, input().split()))
6
        result = []
7
        for i in range(n - k + 1):
8
            batch = arr[i:i+k]
9
            faulty = 0
10
            for num in batch:
11
                if num < 0:
12
                    faulty = num
13
                    break
14
            result.append(faulty)
15
        results.append(result)
16
    return results
17
18
# Read the number of test cases
19
test_cases = int(input())
20
results = earliest_faulty_readings(test_cases)
21
22
# Print the results
23
for result in results:
24
    print(' '.join(map(str, result)) + ' ')",161,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390052905
