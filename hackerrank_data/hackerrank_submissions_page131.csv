submission_id,username,problem_name,language,code,page,url
1390053546,unknown,unknown,unknown,"1
def find_min_cost(server_rack):
2
 3
    total_idle_servers = server_rack.count('0')
4
    total_active_servers = server_rack.count('1')
5
6
    # Start scanning from both ends
7
    start = 0
8
    end = len(server_rack) - 1
9
10
    # Move 'start' forward while there are idle servers at the beginning
11
    while start < len(server_rack) and server_rack[start] == '0':
12
        start += 1
13
14
    # Move 'end' backward while there are idle servers at the end
15
    while end >= 0 and server_rack[end] == '0':
16
        end -= 1
17
18
    # After removing leading and trailing idle servers, count remaining idle servers
19
    if start <= end:
20
        remaining_idle_servers = server_rack[start:end+1].count('0')
21
        remaining_active_servers = server_rack[start:end+1].count('1')
22
    else:
23
        # If all servers are removed, then no remaining servers
24
        remaining_idle_servers = 0
25
        remaining_active_servers = 0
26
27
    # Active servers that were removed
28
    removed_active_servers = total_active_servers - remaining_active_servers
29
30
    # The cost is determined by the max of remaining idle servers and removed active servers
31
    return min(
32
        max(remaining_idle_servers, removed_active_servers),
33
        max(total_idle_servers, total_active_servers)
34
    )
35
36
# Read number of test cases
37
T = int(input(""Enter number of test cases: "").strip())
38
39
# Process each test case
40
for _ in range(T):
41
    server_rack = input(""Enter server rack binary string: "").strip()
42
    print(find_min_cost(server_rack))
43",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053546
1390053547,unknown,unknown,unknown,"1
from collections import deque
2
3
def earliest_faulty_readings(arr, k):
4
    n = len(arr)
5
    result = []
6
    dq = deque()  # To store indices of negative numbers
7
    8
    # Process the first window
9
    for i in range(k):
10
        if arr[i] < 0:
11
            dq.append(i)
12
    13
    # Store the result for the first window
14
    result.append(arr[dq[0]] if dq else 0)
15
    16
    # Process the remaining windows
17
    for i in range(k, n):
18
        # Remove elements that are out of the current window
19
        if dq and dq[0] < i - k + 1:
20
            dq.popleft()
21
        22
        # Add the current element if it is negative
23
        if arr[i] < 0:
24
            dq.append(i)
25
        26
        # Store the result for the current window
27
        result.append(arr[dq[0]] if dq else 0)
28
    29
    return result
30
31
# Reading input
32
t = int(input())  # Number of test cases
33
for _ in range(t):
34
    n, k = map(int, input().split())  # Size of array and batch size
35
    arr = list(map(int, input().split()))  # Array elements
36
    37
    # Get the results and print as space-separated values
38
    print(*earliest_faulty_readings(arr, k))",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053547
1390053548,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    """"""
3
    Calculate minimum effort to breach n firewalls with optimal strategy.
4
    5
    Args:
6
        n: Number of firewalls
7
        k: Maximum number of firewalls that can be skipped
8
        firewalls: List of firewall strengths
9
        10
    Returns:
11
        Minimum effort required
12
    """"""
13
    # If we can skip all firewalls, return 0
14
    if k >= n:
15
        return 0
16
    17
    # We'll use a more memory-efficient approach that avoids potential
18
    # runtime errors with large inputs
19
    20
    # For each firewall, calculate the ""gain"" from skipping it
21
    # Gain = firewall strength - penalty to subsequent firewalls
22
    gains = []
23
    for i in range(n):
24
        # Original cost of the firewall
25
        original_cost = firewalls[i]
26
        27
        # Penalty to subsequent firewalls if we skip this one
28
        penalty = n - i - 1
29
        30
        # Gain = what we save by skipping this firewall
31
        gain = original_cost - penalty
32
        33
        gains.append((gain, i))
34
    35
    # Sort by gain in descending order
36
    gains.sort(reverse=True)
37
    38
    # Mark the firewalls to skip (the k firewalls with highest gain)
39
    to_skip = set()
40
    for i in range(min(k, n)):
41
        if i < len(gains) and gains[i][0] > 0:  # Only skip if gain is positive
42
            to_skip.add(gains[i][1])
43
    44
    # Calculate the total effort
45
    skipped_so_far = 0
46
    total_effort = 0
47
    48
    for i in range(n):
49
        if i in to_skip:
50
            # Skip this firewall
51
            skipped_so_far += 1
52
        else:
53
            # Pay the cost of this firewall (including penalties)
54
            total_effort += firewalls[i] + skipped_so_far
55
    56
    return total_effort
57
58
def main():
59
    t = int(input())  # Number of test cases
60
    61
    for _ in range(t):
62
        n, k = map(int, input().split())
63
        firewalls = list(map(int, input().split()))
64
        65
        min_effort = min_effort_to_breach(n, k, firewalls)
66
        print(min_effort)
67
68
if __name__ == ""__main__"":
69
    main()",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053548
1390053542,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    min_effort = float('inf')
3
4
    def backtrack(start, chosen):
5
        nonlocal min_effort
6
        if len(chosen) == k:
7
            effort = 0
8
            skipped = set(chosen)
9
            security_increase = 0
10
11
            for i in range(n):
12
                if i in skipped:
13
                    security_increase += 1
14
                else:
15
                    effort += firewalls[i] + security_increase
16
17
            min_effort = min(min_effort, effort)
18
            return
19
20
        for i in range(start, n):
21
            backtrack(i + 1, chosen + [i])
22
23
    backtrack(0, [])
24
    return min_effort
25
26
T = int(input())
27
for _ in range(T):
28
    n, k = map(int, input().split())
29
    firewalls = list(map(int, input().split()))
30
    print(min_effort_to_breach(n, k, firewalls))
31",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053542
1390053543,unknown,unknown,unknown,"1
def min_server_pruning_cost(binary_string):
2
    # Count total idle (0s) and active (1s) servers
3
    total_zeros = binary_string.count('0')
4
    total_ones = binary_string.count('1')
5
6
    # Initialize cost to a large value
7
    min_cost = float('inf')
8
9
    # Left and right pointers to remove servers from both ends
10
    left_zeros = 0
11
    left_ones = 0
12
13
    # Iterate to remove servers from both ends and minimize cost
14
    for i in range(len(binary_string) + 1):
15
        # Remaining idle servers in the middle
16
        remaining_zeros = total_zeros - left_zeros
17
        # Removed active servers
18
        removed_ones = left_ones
19
20
        # Update minimum cost
21
        min_cost = min(min_cost, max(remaining_zeros, removed_ones))
22
23
        # Expand left boundary (remove one more character from the start)
24
        if i < len(binary_string):
25
            if binary_string[i] == '0':
26
                left_zeros += 1
27
            else:
28
                left_ones += 1
29
30
    return min_cost
31
32
# Read input
33
T = int(input())  # Number of test cases
34
for _ in range(T):
35
    binary_string = input().strip()
36
    print(min_server_pruning_cost(binary_string))
37",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053543
1390053545,unknown,unknown,unknown,"1
def find_earliest_faults(t, data):
2
3
    results = []
4
5
    6
7
    for case in range(t):
8
9
        n, k = data[case][0]
10
11
        arr = data[case][1]
12
13
        14
15
        result = []
16
17
        # Initialize the deque to store indices of negative numbers
18
19
        from collections import deque
20
21
        dq = deque()
22
23
        24
25
        # Process the first window
26
27
        for i in range(k):
28
29
            if arr[i] < 0:
30
31
                dq.append(i)
32
33
        34
35
        # For the first window, append the result
36
37
        if dq:
38
39
            result.append(arr[dq[0]])
40
41
        else:
42
43
            result.append(0)
44
45
        46
47
        # Process the rest of the windows
48
49
        for i in range(k, n):
50
51
            # Remove elements that are out of this window
52
53
            if dq and dq[0] < i - k + 1:
54
55
                dq.popleft()
56
57
            58
59
            # Add new element if it's negative
60
61
            if arr[i] < 0:
62
63
                dq.append(i)
64
65
            66
67
            # Append the result for the current window
68
69
            if dq:
70
71
                result.append(arr[dq[0]])
72
73
            else:
74
75
                result.append(0)
76
77
        78
79
        results.append(result)
80
81
    82
83
    return results
84
85
# Test cases as described in the input format
86
87
test_cases = [
88
89
    ((5, 2), [-8, 2, 3, -6, 10]),
90
91
    ((8, 3), [12, -1, -7, 8, -15, 30, 16, 28])
92
93
]
94
95
# Number of test cases
96
97
t = len(test_cases)
98
99
# Calling the function
100
101
outputs = find_earliest_faults(t, test_cases)
102
103
for output in outputs:
104
105
    print("" "".join(map(str, output)))",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053545
1390053537,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    min_effort = float('inf')
6
7
    for i in range(1 << n):
8
        skipped = 0
9
        effort = 0
10
        temp_a = a[:]
11
        12
        skip_indices = []
13
        for j in range(n):
14
          if (i >> j) & 1:
15
            skipped += 1
16
            skip_indices.append(j)
17
18
        if skipped <= k:
19
            skip_count = 0
20
            for j in range(n):
21
              if j in skip_indices:
22
                skip_count +=1
23
              else:
24
                effort += temp_a[j] + skip_count
25
                26
            min_effort = min(min_effort, effort)
27
28
    print(min_effort)
29
30
t = int(input())
31
for _ in range(t):
32
    solve()",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053537
1390053539,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
    5
    min_effort = float('inf')
6
    7
    for i in range(1 << n):
8
        skipped = 0
9
        effort = 0
10
        temp_a = a[:]
11
        12
        for j in range(n):
13
            if (i >> j) & 1:
14
                skipped += 1
15
                temp_a[j] = -1
16
        17
        if skipped <= k:
18
            skipped_count = 0
19
            for j in range(n):
20
                if temp_a[j] == -1:
21
                    skipped_count+=1
22
                else:
23
                    effort += temp_a[j] + skipped_count
24
            min_effort = min(min_effort, effort)
25
    26
    print(min_effort)
27
    28
t = int(input())
29
for _ in range(t):
30
    solve()",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053539
1390053540,unknown,unknown,unknown,"1
def minimum_effort(T, test_cases):
2
    results = []
3
    4
    for t in range(T):
5
        n, k = test_cases[t][0]
6
        arr = test_cases[t][1][:]  # Create a copy of the input array
7
        8
        if k >= n:
9
            results.append(0)
10
            continue
11
        12
        min_effort = float('inf')
13
        14
        for i in range(1 << n):
15
            skipped_indices = []
16
            17
            for j in range(n):
18
                if (i >> j) & 1:
19
                    skipped_indices.append(j)
20
                    21
            if len(skipped_indices) <= k:
22
                effort = 0
23
                temp_arr = arr[:]  # Create a copy of the original array for each combination
24
                25
                skip_count = 0
26
                for j in range(n):
27
                    if (i >> j) & 1:
28
                        skip_count += 1
29
                        for l in range(j + 1, n):
30
                            if not (i >> l) & 1:
31
                                temp_arr[l] += 1
32
                    else:
33
                        effort += temp_arr[j]
34
                35
                min_effort = min(min_effort, effort)
36
        37
        results.append(min_effort)
38
        39
    return results
40
41
# Input reading
42
T = int(input())
43
test_cases = []
44
45
# Read all test cases
46
for _ in range(T):
47
    n, k = map(int, input().split())
48
    arr = list(map(int, input().split()))
49
    test_cases.append([(n, k), arr])
50
51
# Get the results and print them
52
results = minimum_effort(T, test_cases)
53
54
for result in results:
55
    print(result)",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053540
1390053536,unknown,unknown,unknown,"1
import sys
2
3
def min_effort(n, k, firewalls):
4
    # DP array, initialized with large values
5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    dp[0][0] = 0  # Base case: No firewalls, no effort
7
8
    # DP Computation
9
    for i in range(1, n + 1):
10
        for j in range(k + 1):
11
            # Case 1: Don't skip this firewall
12
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
13
14
            # Case 2: Skip this firewall (if skips available)
15
            if j > 0:
16
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
17
18
    # Answer is the minimum effort across all skip possibilities
19
    return min(dp[n])
20
21
# Read input efficiently
22
input_data = sys.stdin.read().split()
23
24
if not input_data:  # Check if input is empty
25
    sys.exit(0)  # Exit gracefully
26
27
index = 0
28
T = int(input_data[index])  # Number of test cases
29
index += 1
30
31
results = []
32
for _ in range(T):
33
    if index >= len(input_data):  # Prevent index out of range
34
        break
35
36
    n, k = map(int, input_data[index:index+2])  # Read n and k
37
    index += 2
38
39
    if index + n > len(input_data):  # Check if enough data exists for firewalls
40
        break
41
42
    firewalls = list(map(int, input_data[index:index+n]))  # Firewall strengths
43
    index += n
44
45
    # Compute and store the minimum effort
46
    results.append(str(min_effort(n, k, firewalls)))
47
48
# Print all results at once for efficiency
49
if results:
50
    sys.stdout.write(""\n"".join(results) + ""\n"")
51",131,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053536
