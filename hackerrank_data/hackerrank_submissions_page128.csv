submission_id,username,problem_name,language,code,page,url
1390053601,unknown,unknown,unknown,"1
def min_effort(test_cases):
2
    results = []
3
    4
    for n, k, arr in test_cases:
5
        total_effort = sum(arr)  # Compute total effort without skipping
6
7
        if k >= n:  
8
            results.append(""0"")  # If k >= n, we can skip all firewalls.
9
            continue
10
11
        # Compute the minimum effort after skipping one firewall
12
        min_effort = float('inf')
13
14
        for i in range(n):
15
            effort_with_skip = (total_effort - arr[i]) + k
16
            min_effort = min(min_effort, effort_with_skip)
17
18
        results.append(str(min_effort))
19
20
    return ""\n"".join(results)
21
22
23
# Reading input
24
t = int(input())  # Number of test cases
25
test_cases = []
26
27
for _ in range(t):
28
    n, k = map(int, input().split())  # Number of firewalls and penalty
29
    arr = list(map(int, input().split()))  # Firewall strengths
30
    test_cases.append((n, k, arr))
31
32
# Output results
33
print(min_effort(test_cases))
34",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053601
1390053602,unknown,unknown,unknown,"1
#include <iostream>
2
#include <string>
3
#include <algorithm>
4
#include <vector>
5
6
using namespace std;
7
8
int min_pruning_cost(const string& server_rack) {
9
    int n = server_rack.length();
10
    int min_cost = n + 1;
11
12
    for (int left_remove_count = 0; left_remove_count <= n; ++left_remove_count) {
13
        for (int right_remove_count = 0; right_remove_count <= n - left_remove_count; ++right_remove_count) {
14
            int idle_remaining = 0;
15
            int active_removed = 0;
16
17
            // Calculate active_removed
18
            for (int i = 0; i < left_remove_count; ++i) {
19
                if (server_rack[i] == '1') {
20
                    active_removed++;
21
                }
22
            }
23
            for (int i = n - right_remove_count; i < n; ++i) {
24
                if (server_rack[i] == '1') {
25
                    active_removed++;
26
                }
27
            }
28
29
            // Calculate idle_remaining
30
            for (int i = left_remove_count; i < n - right_remove_count; ++i) {
31
                if (server_rack[i] == '0') {
32
                    idle_remaining++;
33
                }
34
            }
35
36
            int cost = max(idle_remaining, active_removed);
37
            min_cost = min(min_cost, cost);
38
        }
39
    }
40
    return min_cost;
41
}
42
43
int main() {
44
    ios_base::sync_with_stdio(false);
45
    cin.tie(NULL);
46
47
    int t;
48
    cin >> t;
49
    while (t--) {
50
        string server_rack;
51
        cin >> server_rack;
52
        cout << min_pruning_cost(server_rack) << endl;
53
    }
54
    return 0;
55
}",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053602
1390053603,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static int minEffort(int[] firewalls, int k) {
7
        int n = firewalls.length;
8
        if (k >= n) return 0;
9
10
        int[] dp = new int[k + 1];
11
        Arrays.fill(dp, Integer.MAX_VALUE);
12
        dp[0] = 0;
13
14
        for (int i = 0; i < n; i++) {
15
            for (int j = k; j >= 0; j--) {
16
                if (dp[j] != Integer.MAX_VALUE) {
17
                    dp[j] += firewalls[i] + j;
18
                }
19
                if (j > 0) {
20
                    dp[j] = Math.min(dp[j], dp[j - 1]);
21
                }
22
            }
23
        }
24
25
        return dp[k];
26
    }
27
28
    public static void main(String[] args) {
29
        Scanner sc = new Scanner(System.in);
30
        int t = sc.nextInt();
31
32
        while (t-- > 0) {
33
            int n = sc.nextInt();
34
            int k = sc.nextInt();
35
            int[] firewalls = new int[n];
36
37
            for (int i = 0; i < n; i++) {
38
                firewalls[i] = sc.nextInt();
39
            }
40
41
            System.out.println(minEffort(firewalls, k));
42
        }
43
44
        sc.close();
45
    }
46
}
47",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053603
1390053596,unknown,unknown,unknown,"1
def min_decommission_cost(server_string):
2
    n = len(server_string)
3
    4
    # Count total active ('1') and idle ('0') servers
5
    total_active = server_string.count('1')
6
    total_idle = n - total_active
7
8
    # Precompute cumulative count of active servers from the left
9
    active_prefix_sum = [0] * (n + 1)
10
    for i in range(n):
11
        active_prefix_sum[i + 1] = active_prefix_sum[i] + (1 if server_string[i] == '1' else 0)
12
    13
    min_cost = float('inf')
14
15
    # Try all possible segments
16
    for left in range(n + 1):
17
        for right in range(left, n + 1):
18
            # Active servers in the selected range
19
            active_remaining = active_prefix_sum[right] - active_prefix_sum[left]
20
            idle_remaining = (right - left) - active_remaining
21
22
            # Active servers removed (total active - active in range)
23
            active_removed = total_active - active_remaining
24
25
            # Cost is max of idle servers in range or removed active servers
26
            cost = max(idle_remaining, active_removed)
27
            min_cost = min(min_cost, cost)
28
29
    return min_cost
30
31
def faster_min_decommission_cost(server_string):
32
    n = len(server_string)
33
34
    # Precompute prefix sums for active ('1') and idle ('0') servers
35
    active_prefix = [0] * (n + 1)
36
    idle_prefix = [0] * (n + 1)
37
38
    for i in range(n):
39
        active_prefix[i + 1] = active_prefix[i] + (server_string[i] == '1')
40
        idle_prefix[i + 1] = idle_prefix[i] + (server_string[i] == '0')
41
42
    min_cost = n  # Worst case scenario
43
44
    # Iterate through all possible substrings efficiently
45
    for i in range(n + 1):
46
        for j in range(i, n + 1):
47
            # Idle servers in the selected range
48
            idle_remaining = idle_prefix[j] - idle_prefix[i]
49
50
            # Active servers removed (total active - active in selected range)
51
            active_removed = active_prefix[n] - (active_prefix[j] - active_prefix[i])
52
53
            # Compute cost and update minimum
54
            cost = max(idle_remaining, active_removed)
55
            min_cost = min(min_cost, cost)
56
57
    return min_cost
58
59
def main():
60
    t = int(input().strip())
61
62
    for _ in range(t):
63
        server_string = input().strip()
64
        result = faster_min_decommission_cost(server_string)
65
        print(result)
66
67
if __name__ == ""__main__"":
68
    main()
69",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053596
1390053597,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Compute the initial total effort if we do NOT skip any firewall
3
    effort = sum(strengths[i] + i for i in range(n))
4
5
    # Create a list of (contribution, index)
6
    contributions = [(strengths[i] + i, i) for i in range(n)]
7
8
    # Sort by contribution (ascending) to skip the weakest k firewalls
9
    contributions.sort()
10
11
    # Remove k weakest firewalls from effort
12
    for i in range(k):
13
        effort -= contributions[i][0]
14
15
    return effort
16
17
def solve():
18
    t = int(input())  # Read number of test cases
19
    20
    for _ in range(t):
21
        n, k = map(int, input().split())  # Read n (firewalls) and k (max skips)
22
        strengths = list(map(int, input().split()))  # Read firewall strengths
23
24
        print(min_effort_to_breach(n, k, strengths))
25
26
# Run the solution
27
solve()
28",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053597
1390053600,unknown,unknown,unknown,"1
def min_effort_to_breach(firewalls, n, k):
2
    total_effort = sum(firewalls)  # Total effort without skipping any firewall
3
    4
    # If we can skip all firewalls, return 0
5
    if k == n:
6
        return 0
7
8
    # Sliding window approach to find the minimum effort when skipping up to k firewalls
9
    min_effort = total_effort
10
    skipped_effort = sum(firewalls[:k])  # Initial sum of the first k firewalls
11
12
    # Try different positions for skipping
13
    for i in range(k, n):
14
        min_effort = min(min_effort, total_effort - skipped_effort)
15
        skipped_effort += firewalls[i] - firewalls[i - k]
16
17
    # Final check for the last possible skip window
18
    min_effort = min(min_effort, total_effort - skipped_effort)
19
20
    return min_effort
21
22
# Read input
23
T = int(input())  # Number of test cases
24
for _ in range(T):
25
    n, k = map(int, input().split())  # Number of firewalls and max skips
26
    firewalls = list(map(int, input().split()))  # Strength of firewalls
27
    print(min_effort_to_breach(firewalls, n, k))
28",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053600
1390053591,unknown,unknown,unknown,"1
def find_earliest_faults(arr, k):
2
    result = []
3
    for i in range(len(arr) - k + 1):
4
        batch = arr[i:i + k]
5
        fault = 0
6
        for j, val in enumerate(batch):
7
            if val < 0:
8
                fault = val
9
                break
10
        result.append(fault)
11
    return result
12
13
def solve():
14
    n, k = map(int, input().split())
15
    arr = list(map(int, input().split()))
16
    result = find_earliest_faults(arr, k)
17
    print(*result)
18
19
t = int(input())
20
for _ in range(t):
21
    solve()",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053591
1390053595,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    public static int minEffort(int n, int k, int[] firewalls) {
6
        int[][] dp = new int[n + 1][k + 1];
7
        8
        // Initialize DP array with large values
9
        for (int i = 0; i <= n; i++) {
10
            Arrays.fill(dp[i], Integer.MAX_VALUE);
11
        }
12
        dp[0][0] = 0;
13
14
        // DP Computation
15
        for (int i = 1; i <= n; i++) {
16
            for (int j = 0; j <= k; j++) {
17
                // Case 1: Don't skip the firewall
18
                if (dp[i - 1][j] != Integer.MAX_VALUE) {
19
                    dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j;
20
                }
21
22
                // Case 2: Skip the firewall (if skips available)
23
                if (j > 0 && dp[i - 1][j - 1] != Integer.MAX_VALUE) {
24
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1]);
25
                }
26
            }
27
        }
28
29
        // Answer is the minimum effort across all skip possibilities
30
        int minEffort = Integer.MAX_VALUE;
31
        for (int j = 0; j <= k; j++) {
32
            minEffort = Math.min(minEffort, dp[n][j]);
33
        }
34
35
        return minEffort;
36
    }
37
38
    public static void main(String[] args) throws IOException {
39
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
40
        int T = Integer.parseInt(br.readLine().trim()); // Number of test cases
41
        StringBuilder result = new StringBuilder();
42
43
        for (int t = 0; t < T; t++) {
44
            String[] nk = br.readLine().trim().split("" "");
45
            int n = Integer.parseInt(nk[0]);
46
            int k = Integer.parseInt(nk[1]);
47
            int[] firewalls = new int[n];
48
49
            String[] firewallValues = br.readLine().trim().split("" "");
50
            for (int i = 0; i < n; i++) {
51
                firewalls[i] = Integer.parseInt(firewallValues[i]);
52
            }
53
54
            result.append(minEffort(n, k, firewalls)).append(""\n"");
55
        }
56
57
        // Print all results in one go (faster output)
58
        System.out.print(result.toString());
59
    }
60
}
61",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053595
1390053593,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, strengths):
2
    # Use dynamic programming to find optimal solution
3
    # dp[i][j] = min effort to breach first i firewalls by skipping exactly j firewalls
4
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
5
    6
    # Base case: no firewalls, no effort
7
    for j in range(k + 1):
8
        dp[0][j] = 0
9
    10
    for i in range(1, n + 1):
11
        for j in range(k + 1):
12
            # Option 1: Skip current firewall (if we still have skips left)
13
            if j > 0:
14
                # If we skip this firewall, all subsequent firewalls increase by 1
15
                dp[i][j] = dp[i-1][j-1]
16
            17
            # Option 2: Don't skip current firewall
18
            # Current firewall strength may have increased due to previous skips
19
            current_strength = strengths[i-1] + j  # j = number of firewalls skipped so far
20
            dp[i][j] = min(dp[i][j], dp[i-1][j] + current_strength)
21
    22
    # Return minimum effort among all possible ways to use up to k skips
23
    return min(dp[n])
24
25
def solve():
26
    t = int(input())
27
    results = []
28
    29
    for _ in range(t):
30
        n, k = map(int, input().split())
31
        strengths = list(map(int, input().split()))
32
        results.append(min_effort_to_breach(n, k, strengths))
33
    34
    for result in results:
35
        print(result)
36
37
solve()",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053593
1390053589,unknown,unknown,unknown,"1
def min_decommission_cost(test_cases):
2
    results = []
3
    for case in test_cases:
4
        n = len(case)
5
        min_cost = float('inf')
6
        7
        # Precompute prefix sums for 0's and 1's
8
        prefix_0 = [0] * (n + 1)
9
        prefix_1 = [0] * (n + 1)
10
        for i in range(n):
11
            prefix_0[i + 1] = prefix_0[i] + (1 if case[i] == '0' else 0)
12
            prefix_1[i + 1] = prefix_1[i] + (1 if case[i] == '1' else 0)
13
        14
        # Iterate through all possible splits
15
        for i in range(n + 1):
16
            for j in range(i, n + 1):
17
                # Remaining segment is from i to j-1
18
                remaining_0s = prefix_0[j] - prefix_0[i]
19
                removed_1s = prefix_1[i] + (prefix_1[n] - prefix_1[j])
20
                cost = max(remaining_0s, removed_1s)
21
                if cost < min_cost:
22
                    min_cost = cost
23
        results.append(min_cost)
24
    return results
25
26
# Read input
27
T = int(input())
28
test_cases = [input().strip() for _ in range(T)]
29
30
# Compute results
31
results = min_decommission_cost(test_cases)
32
33
# Print output
34
for result in results:
35
    print(result)",128,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053589
