submission_id,username,problem_name,language,code,page,url
1390053374,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
25
            low = 0
26
            high = n - left
27
            best_right = 0
28
            best_cost = float('inf')
29
            30
            while low <= high:
31
                mid = (low + high) // 2
32
                right = mid
33
                ones_removed_right = suffix_ones[n - right]
34
                total_ones_removed = ones_removed_left + ones_removed_right
35
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
36
                current_cost = max(zeros_remaining, total_ones_removed)
37
                38
                if current_cost < best_cost:
39
                    best_cost = current_cost
40
                    best_right = right
41
                42
                if zeros_remaining > total_ones_removed:
43
                    low = mid + 1
44
                else:
45
                    high = mid - 1
46
            47
            if best_cost < min_cost_val:
48
                min_cost_val = best_cost
49
        50
        results.append(min_cost_val)
51
    return results
52
53
# Read input
54
T = int(input())
55
test_cases = [input().strip() for _ in range(T)]
56
57
# Compute results
58
results = min_cost(test_cases)
59
60
# Output results
61
for res in results:
62
    print(res)",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053374
1390053376,unknown,unknown,unknown,"1
def solve():
2
    s = input()
3
    n = len(s)
4
    5
    min_cost = float('inf')
6
    7
    for i in range(n + 1):
8
        for j in range(n - i + 1):
9
            remaining = s[i:n-j]
10
            11
            idle_remaining = remaining.count('0')
12
            active_removed = s[:i].count('1') + s[n-j:].count('1')
13
            14
            cost = max(idle_remaining, active_removed)
15
            min_cost = min(min_cost, cost)
16
            17
    print(min_cost)
18
19
t = int(input())
20
for _ in range(t):
21
    solve()",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053376
1390053377,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    # DP array, initialized with large values
3
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: No firewalls, no effort
5
6
    # DP Computation
7
    for i in range(1, n + 1):
8
        for j in range(k + 1):
9
            # Case 1: Don't skip this firewall
10
            dp[i][j] = dp[i - 1][j] + firewalls[i - 1] + j
11
12
            # Case 2: Skip this firewall (if skips available)
13
            if j > 0:
14
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])
15
16
    # Answer is the minimum effort across all skip possibilities
17
    return min(dp[n])
18
19
# Read input
20
T = int(input())  # Number of test cases
21
for _ in range(T):
22
    n, k = map(int, input().split())  # Read n and k
23
    firewalls = list(map(int, input().split()))  # Firewall strengths
24
25
    # Compute and print the minimum effort
26
    print(min_effort(n, k, firewalls))",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053377
1390053363,unknown,unknown,unknown,"1
def min_decommission_cost(server_rack):
2
    n = len(server_rack)
3
    min_cost = float('inf')
4
    5
    for i in range(n + 1):
6
        for j in range(i, n + 1):
7
            remaining = server_rack[i:j]
8
            cost = max(remaining.count('0'), server_rack[:i].count('1') + server_rack[j:].count('1'))
9
            min_cost = min(min_cost, cost)
10
    11
    return min_cost
12
13
def main():
14
    T = int(input().strip())
15
    for _ in range(T):
16
        server_rack = input().strip()
17
        print(min_decommission_cost(server_rack))
18
19
if __name__ == ""__main__"":
20
    main()",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053363
1390053366,unknown,unknown,unknown,"1
def earliest_faulty_readings(test_cases):
2
    results = []
3
    4
    for n, k, arr in test_cases:
5
        res = []
6
        negatives = []
7
        8
        for i in range(k):
9
            if arr[i] < 0:
10
                negatives.append(i)
11
        12
        res.append(arr[negatives[0]] if negatives else 0)
13
        14
        for i in range(k, n):
15
            if negatives and negatives[0] < i - k + 1:
16
                negatives.pop(0)
17
            18
            if arr[i] < 0:
19
                negatives.append(i)
20
            21
            res.append(arr[negatives[0]] if negatives else 0)
22
        23
        results.append("" "".join(map(str, res)))
24
    25
    return ""\n"".join(results)
26
27
t = int(input())
28
test_cases = []
29
30
for _ in range(t):
31
    n, k = map(int, input().split())
32
    arr = list(map(int, input().split()))
33
    test_cases.append((n, k, arr))
34
35
print(earliest_faulty_readings(test_cases))
36",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053366
1390053365,unknown,unknown,unknown,"1
test_cases = int(input())
2
for t in range(test_cases):
3
    a,b = list(map(int,input().split("" "")))
4
    arr = list(map(int,input().split("" "")))
5
    l,r = 0,b-1
6
    res = []
7
    neg_index = 0
8
    while r<a:
9
        temp = None
10
        for i in range(l,r+1):
11
            if arr[i]<0:
12
                temp = arr[i]
13
                break
14
        if temp:
15
            res.append(temp)
16
        else:
17
            res.append(0)
18
        l+=1
19
        r+=1
20
    for i in res:
21
        print(i,end="" "")
22
    print()",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/faulty-sensor-readings/submissions/code/1390053365
1390053358,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommission {
4
5
    public static int minCostDecommissioning(String rack) {
6
        int n = rack.length();
7
        int totalOnes = 0;
8
9
        // Count total number of 1's in the rack
10
        for (char c : rack.toCharArray()) {
11
            if (c == '1') {
12
                totalOnes++;
13
            }
14
        }
15
16
        int minCost = Integer.MAX_VALUE;
17
18
        // Try all possible removals from left and right
19
        for (int left = 0; left <= n; left++) {
20
            for (int right = 0; right <= n - left; right++) {
21
                String remaining = rack.substring(left, n - right);
22
23
                int remainingZeros = 0, remainingOnes = 0;
24
                for (char c : remaining.toCharArray()) {
25
                    if (c == '0') {
26
                        remainingZeros++;
27
                    } else {
28
                        remainingOnes++;
29
                    }
30
                }
31
32
                int removedOnes = totalOnes - remainingOnes;
33
                int cost = Math.max(remainingZeros, removedOnes);
34
35
                minCost = Math.min(minCost, cost);
36
            }
37
        }
38
39
        return minCost;
40
    }
41
42
    public static void main(String[] args) {
43
        Scanner scanner = new Scanner(System.in);
44
        int T = scanner.nextInt();
45
        scanner.nextLine(); // Consume newline
46
47
        for (int i = 0; i < T; i++) {
48
            String rack = scanner.nextLine();
49
            System.out.println(minCostDecommissioning(rack));
50
        }
51
52
        scanner.close();
53
    }
54
}
55",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053358
1390053359,unknown,unknown,unknown,"1
def main():
2
    t = int(input())
3
    4
    for _ in range(t):
5
        n, k = map(int, input().split())
6
        strengths = list(map(int, input().split()))
7
        8
        # Edge case: if we can skip all firewalls
9
        if k >= n:
10
            print(0)
11
            continue
12
        13
        # For small test cases, use brute force
14
        if n <= 20:
15
            min_effort = float('inf')
16
            17
            # Try all possible combinations of firewalls to skip
18
            for mask in range(1 << n):
19
                if bin(mask).count('1') <= k:
20
                    effort = 0
21
                    skipped = 0
22
                    23
                    for i in range(n):
24
                        if (mask >> i) & 1:
25
                            skipped += 1
26
                        else:
27
                            effort += strengths[i] + skipped
28
                    29
                    min_effort = min(min_effort, effort)
30
            31
            print(min_effort)
32
            continue
33
        34
        # For larger test cases, use a more efficient approach
35
        # Calculate the benefit array
36
        benefits = []
37
        for i in range(n):
38
            benefits.append((strengths[i] - (n - i - 1), i))
39
        40
        # Sort by benefit
41
        benefits.sort(reverse=True)
42
        43
        # Try skipping different numbers of firewalls
44
        min_effort = float('inf')
45
        46
        for skips in range(k + 1):
47
            to_skip = set()
48
            49
            # Take the top 'skips' firewalls with highest benefit
50
            for i in range(skips):
51
                if i < len(benefits):
52
                    to_skip.add(benefits[i][1])
53
            54
            # Calculate the effort
55
            effort = 0
56
            skipped = 0
57
            58
            for i in range(n):
59
                if i in to_skip:
60
                    skipped += 1
61
                else:
62
                    effort += strengths[i] + skipped
63
            64
            min_effort = min(min_effort, effort)
65
        66
        print(min_effort)
67
68
if __name__ == ""__main__"":
69
    main()",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053359
1390053361,unknown,unknown,unknown,"1
def min_decommissioning_cost(server_rack):
2
    n = len(server_rack)
3
    4
    # Initialize counters
5
    min_cost = float('inf')
6
    7
    # Try all possible combinations of removing prefix and suffix
8
    for i in range(n + 1):  # i = length of prefix to remove
9
        for j in range(n + 1 - i):  # j = length of suffix to remove
10
            if i + j > n:
11
                continue
12
                13
            # Calculate what's left after removing prefix and suffix
14
            remaining = server_rack[i:n-j]
15
            16
            if not remaining:
17
                continue  # Cannot remove all servers
18
                19
            # Count idle servers remaining and active servers removed
20
            idle_remaining = remaining.count('0')
21
            active_removed = server_rack[:i].count('1') + server_rack[n-j:].count('1')
22
            23
            # Cost is the maximum of these two
24
            cost = max(idle_remaining, active_removed)
25
            26
            # Update min_cost if this is better
27
            min_cost = min(min_cost, cost)
28
    29
    return min_cost
30
31
# Process input
32
t = int(input())
33
results = []
34
35
for _ in range(t):
36
    server_rack = input().strip()
37
    results.append(min_decommissioning_cost(server_rack))
38
39
# Output results
40
for result in results:
41
    print(result)",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390053361
1390053356,unknown,unknown,unknown,"1
def min_effort_to_breach(n, k, firewalls):
2
    """"""
3
    Calculate minimum effort to breach n firewalls with optimal strategy.
4
    5
    Args:
6
        n: Number of firewalls
7
        k: Maximum number of firewalls that can be skipped
8
        firewalls: List of firewall strengths
9
        10
    Returns:
11
        Minimum effort required
12
    """"""
13
    # If we can skip all firewalls, return 0
14
    if k >= n:
15
        return 0
16
    17
    # Initialize dp array with infinity
18
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
19
    20
    # Base case: no firewalls, no effort
21
    dp[0][0] = 0
22
    23
    for i in range(1, n + 1):
24
        firewall_idx = i - 1  # Convert to 0-indexed
25
        26
        for j in range(k + 1):
27
            # Option 1: Don't skip the current firewall
28
            if j <= i - 1:  # Ensure we have processed enough firewalls
29
                dp[i][j] = min(dp[i][j], dp[i-1][j] + firewalls[firewall_idx] + j)
30
            31
            # Option 2: Skip the current firewall
32
            if j > 0:  # We must have at least one skip available
33
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
34
    35
    # Return the minimum effort after processing all firewalls
36
    return dp[n][k]
37
38
def main():
39
    t = int(input())  # Number of test cases
40
    41
    for _ in range(t):
42
        n, k = map(int, input().split())
43
        firewalls = list(map(int, input().split()))
44
        45
        min_effort = min_effort_to_breach(n, k, firewalls)
46
        print(min_effort)
47
48
if __name__ == ""__main__"":
49
    main()",140,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390053356
