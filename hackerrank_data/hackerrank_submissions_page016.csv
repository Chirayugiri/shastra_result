submission_id,username,problem_name,language,code,page,url
1390055908,unknown,unknown,unknown,"1
def min_firewall_effort(test_cases):
2
    results = []
3
    4
    for n, k, firewalls in test_cases:
5
        total_effort = sum(firewalls)  # Effort without skipping
6
        min_effort = total_effort  # Initialize with full effort
7
        8
        if k == n:  # If we can skip all firewalls, effort is 0
9
            results.append(0)
10
            continue
11
        12
        # Try skipping each firewall
13
        for i in range(n):
14
            skipped_effort = total_effort - firewalls[i]  # Remove skipped firewall
15
            extra_penalty = (n - 1)  # Each of remaining (n-1) gets +1
16
            17
            min_effort = min(min_effort, skipped_effort + extra_penalty)
18
        19
        results.append(min_effort)
20
    21
    return results
22
23
24
# Input Handling
25
T = int(input())  # Number of test cases
26
test_cases = []
27
28
for _ in range(T):
29
    n, k = map(int, input().split())  # Read n and k
30
    firewalls = list(map(int, input().split()))  # Read firewall strengths
31
    test_cases.append((n, k, firewalls))
32
33
# Processing and Output
34
for result in min_firewall_effort(test_cases):
35
    print(result)
36",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055908
1390055907,unknown,unknown,unknown,"1
def min_effort_to_breach(T, test_cases):
2
    results = []
3
    for n, k, strengths in test_cases:
4
        min_effort = float('inf')
5
6
        for skip in range(k + 1):  # Try skipping from 0 to k firewalls
7
            modified = strengths[:]  # Copy original list
8
            for i in range(skip, n):
9
                modified[i] += skip  # Increase firewall strength after skipping
10
            min_effort = min(min_effort, sum(modified[skip:]))  # Sum from skipped index onward
11
12
        results.append(min_effort)
13
14
    return results
15
16
# Reading input
17
T = int(input().strip())
18
test_cases = []
19
20
for _ in range(T):
21
    n, k = map(int, input().split())
22
    strengths = list(map(int, input().split()))
23
    test_cases.append((n, k, strengths))
24
25
# Compute and print results
26
results = min_effort_to_breach(T, test_cases)
27
for res in results:
28
    print(res)",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055907
1390055913,unknown,unknown,unknown,"1
#include <bits/stdc++.h>
2
using namespace std;
3
4
using ll = long long;
5
6
int main() {
7
    // Optimize input/output
8
    ios::sync_with_stdio(false);
9
    cin.tie(0);
10
11
    int T;
12
    cin >> T;
13
    for (int t = 0; t < T; t++) {
14
        int n, k;
15
        cin >> n >> k;
16
        vector<ll> a(n);
17
        for (int i = 0; i < n; i++) {
18
            cin >> a[i];
19
        }
20
21
         22
        const ll INF = 1e18;
23
24
        vector<ll> prev(k + 1, INF);
25
        prev[0] = 0; 
26
27
    28
        for (int i = 0; i < n; i++) {
29
            vector<ll> curr(k + 1, INF);
30
            for (int s = 0; s <= k; s++) {
31
                32
                curr[s] = prev[s] + a[i] + s;
33
                if (s > 0) {
34
                    curr[s] = min(curr[s], prev[s - 1]);
35
                }
36
            }
37
            prev = curr; 
38
        }
39
40
41
        ll ans = *min_element(prev.begin(), prev.end());
42
        cout << ans << '\n';
43
    }
44
    return 0;
45
}",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055913
1390055901,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class BreachFirewall {
5
    public static void main(String[] args) throws IOException {
6
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
7
        StringTokenizer st = new StringTokenizer(br.readLine());
8
        9
        int T = Integer.parseInt(st.nextToken()); // Number of test cases
10
        StringBuilder result = new StringBuilder();
11
        12
        while (T-- > 0) {
13
            st = new StringTokenizer(br.readLine());
14
            int n = Integer.parseInt(st.nextToken());
15
            int k = Integer.parseInt(st.nextToken());
16
17
            int[] firewalls = new int[n];
18
            st = new StringTokenizer(br.readLine());
19
            int totalEffort = 0;
20
21
            for (int i = 0; i < n; i++) {
22
                firewalls[i] = Integer.parseInt(st.nextToken());
23
                totalEffort += firewalls[i]; // Calculate total sum
24
            }
25
26
            List<Integer> modifiedValues = new ArrayList<>();
27
            for (int i = 0; i < n; i++) {
28
                modifiedValues.add(firewalls[i] - (n - i - 1)); // Transform the array
29
            }
30
31
            // Sort in descending order
32
            modifiedValues.sort(Collections.reverseOrder());
33
34
            // Compute prefix sum for best `t` firewalls to skip
35
            int[] prefixSum = new int[n + 1];
36
            for (int i = 0; i < n; i++) {
37
                prefixSum[i + 1] = prefixSum[i] + modifiedValues.get(i);
38
            }
39
40
            int maxSum = 0;
41
            int maxT = Math.min(k, n);
42
            for (int t = 0; t <= maxT; t++) {
43
                int current = prefixSum[t] + (t * (t - 1)) / 2;
44
                maxSum = Math.max(maxSum, current);
45
            }
46
47
            result.append(totalEffort - maxSum).append(""\n"");
48
        }
49
50
        System.out.print(result);
51
    }
52
}
53",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055901
1390055905,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055905
1390055906,unknown,unknown,unknown,"1
import sys
2
3
def min_decommission_cost(server_rack):
4
    first_one = server_rack.find('1')
5
    last_one = server_rack.rfind('1')
6
    7
    if first_one == -1:  
8
        return 0  # No active servers (all are '0'), cost is 0
9
    10
    trimmed_rack = server_rack[first_one:last_one+1]
11
    12
    idle_remaining = trimmed_rack.count('0')
13
    active_removed = first_one + (len(server_rack) - last_one - 1)
14
    15
    return max(idle_remaining, active_removed)
16
17
def main():
18
    T = int(sys.stdin.readline().strip())
19
    for _ in range(T):
20
        server_rack = sys.stdin.readline().strip()
21
        print(min_decommission_cost(server_rack))
22
23
if __name__ == ""__main__"":
24
    main()
25",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055906
1390055895,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    for servers in test_cases:
4
        first_one = servers.find('1')
5
        last_one = servers.find('1')
6
        7
        if first_one == -1:
8
            results.append(0)
9
            continue
10
            11
        trimmed = servers[first_one:last_one + 1]
12
        13
        idle_remaining = trimmed.count('0')
14
        active_removed = servers[:first_one].count('1') + servers[last_one + 1:].count('1')
15
        16
        results.append(max(idle_remaining, active_removed))
17
        18
    return results
19
20
T = int(input().strip())
21
test_cases = [input().strip() for _ in range(T)]
22
23
results in min_decommissioning_cost(test_cases)
24
for res in results:
25
    print(res)",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055895
1390055898,unknown,unknown,unknown,"1
def min_cost(binary_string):
2
    n = len(binary_string)
3
4
    prefix_ones = [0] * (n + 1)
5
    for i in range(n):
6
        prefix_ones[i + 1] = prefix_ones[i] + (1 if binary_string[i] == '1' else 0)
7
8
    suffix_ones = [0] * (n + 1)
9
    for i in range(n - 1, -1, -1):
10
        suffix_ones[n - i] = suffix_ones[n - i - 1] + (1 if binary_string[i] == '1' else 0)
11
    total_zeros = binary_string.count('0')
12
13
    min_cost = float('inf')
14
15
    for left in range(n + 1):
16
  17
        left_ones = prefix_ones[left]
18
        for right in range(n - left + 1):
19
            20
            right_ones = suffix_ones[right]
21
            remaining_string = binary_string[left:n - right]
22
            remaining_zeros = remaining_string.count('0')
23
            cost = max(remaining_zeros, left_ones + right_ones)
24
25
            min_cost = min(min_cost, cost)
26
27
    return min_cost
28
29
30
T = int(input())
31
for _ in range(T):
32
    binary_string = input().strip()
33
    print(min_cost(binary_string))",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055898
1390055896,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include<bits/stdc++.h>
7
using namespace std;
8
9
int solve(vector<int>& arr, int k){
10
    int n = arr.size();
11
    int ans = 0;
12
    13
    set<int> st;
14
    vector<int> right(n,0);
15
    for(int i=0; i<n; i++) right[i]=n-i-1;
16
    priority_queue<pair<int,int>, vector<pair<int,int>>> pq;
17
    for(int i=0; i<n; i++) pq.push({arr[i],i});
18
    19
    while(!pq.empty()){
20
        auto [val,idx] = pq.top(); pq.pop();
21
        22
        if(right[idx] < val && k){
23
            st.insert(idx);
24
            k--;
25
            for(int i=0; i<idx; i++){
26
                right[i]--;
27
            }
28
            arr[idx]=0;
29
            // cout<<""inserted ""<<idx<<"" k:""<<k<<"" "";
30
        }    
31
    }
32
    33
    // for(int i=0; i<n; i++) cout<<right[i]<<"" "";
34
    35
    36
    for(int i=0; i<n; i++){
37
        if(st.find(i)!=st.end()) ans += right[i];
38
        ans += arr[i];
39
    }
40
    41
    return ans;
42
}
43
44
45
int main() {
46
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
47
    int t;
48
    cin>>t;
49
    while(t--){
50
        int n,k;
51
        cin>>n>>k;
52
        vector<int> arr(n);
53
        for(int i=0; i<n ;i++) cin>>arr[i];
54
        55
        int ans = solve(arr,k);
56
        cout<<ans<<endl;
57
    }
58
    return 0;
59
}
60",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390055896
1390055894,unknown,unknown,unknown,"1
def minimum_decommission_cost(servers):
2
    n = len(servers)
3
    4
    # Convert the string to a list of integers (0 or 1)
5
    server_list = [int(c) for c in servers]
6
7
    # Compute prefix sum of active servers (1s)
8
    prefix_sum = [0] * (n + 1)
9
    for i in range(n):
10
        prefix_sum[i + 1] = prefix_sum[i] + server_list[i]
11
12
    total_ones = prefix_sum[n]  # Total active servers
13
    min_cost = total_ones  # Worst case: decommission all active servers
14
15
    j = 0  # Right boundary of the window
16
    for i in range(n + 1):
17
        # Move j to maintain segment_zeros >= total_ones_removed
18
        while j <= n and (j - i) - (prefix_sum[j] - prefix_sum[i]) <= (prefix_sum[i] + (total_ones - prefix_sum[j])):
19
            j += 1
20
        21
        # Calculate cost at the current window
22
        segment_zeros = (j - i - 1) - (prefix_sum[j - 1] - prefix_sum[i])
23
        left_ones = prefix_sum[i]
24
        right_ones = total_ones - prefix_sum[j - 1]
25
        cost = max(segment_zeros, left_ones + right_ones)
26
        27
        min_cost = min(min_cost, cost)
28
29
    return min_cost
30
31
def process_input():
32
    import sys
33
    input = sys.stdin.read
34
    data = input().split()
35
    36
    t = int(data[0])
37
    results = []
38
    39
    for i in range(1, t + 1):
40
        results.append(str(minimum_decommission_cost(data[i])))
41
    42
    print(""\n"".join(results))
43
44
# Correcting the name definition
45
if __name__ == ""__main__"":
46
    process_input()",16,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390055894
