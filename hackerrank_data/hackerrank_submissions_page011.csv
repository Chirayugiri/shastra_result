submission_id,username,problem_name,language,code,page,url
1390056032,unknown,unknown,unknown,"1
def solve():
2
    n, k = map(int, input().split())
3
    a = list(map(int, input().split()))
4
5
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
6
    dp[0][0] = 0
7
8
    for i in range(1, n + 1):
9
        for j in range(k + 1):
10
            if j > 0:
11
                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])  
12
            dp[i][j] = min(dp[i][j], dp[i - 1][j] + a[i - 1] + j) 
13
14
    return min(dp[n])
15
16
t = int(input())
17
for _ in range(t):
18
    print(solve())",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056032
1390056038,unknown,unknown,unknown,"1
t=int(input())
2
for _ in range(t):
3
    n,k=map(int,input().split())
4
    arr=list(map(int,input().split()))
5
    if k<n:
6
        impacts=sorted([(arr[i]-(n-i-1),i) for i in range(n)],reverse=True)
7
        skip={impacts[i][1] for i in range(k)}
8
        ans=0
9
        penalty=0
10
        for i in range(n):
11
            if i in skip:penalty+=1
12
            else:ans+=arr[i]+penalty
13
        print(ans)
14
    else:print(0)",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056038
1390056030,unknown,unknown,unknown,"1
import java.util.Scanner;
2
3
public class ServerDecommission {
4
    public static void main(String[] args) {
5
        Scanner scanner = new Scanner(System.in);
6
        int T = scanner.nextInt();  // Number of test cases
7
        scanner.nextLine();         // Consume the leftover newline
8
9
        while (T-- > 0) {
10
            String servers = scanner.nextLine();
11
            int n = servers.length();
12
13
            // Build prefix sums for '0' and '1'
14
            // zeroCount[i] = # of '0's in servers[0..i-1]
15
            // oneCount[i]  = # of '1's in servers[0..i-1]
16
            int[] zeroCount = new int[n + 1];
17
            int[] oneCount  = new int[n + 1];
18
19
            for (int i = 0; i < n; i++) {
20
                zeroCount[i + 1] = zeroCount[i] + (servers.charAt(i) == '0' ? 1 : 0);
21
                oneCount[i + 1]  = oneCount[i]  + (servers.charAt(i) == '1' ? 1 : 0);
22
            }
23
24
            int totalOnes = oneCount[n];
25
26
            // Binary search over possible cost c
27
            int low = 0;
28
            int high = n;  // cost can't exceed n (worst case: remove all or keep all)
29
            while (low < high) {
30
                int mid = (low + high) / 2;
31
                if (feasible(mid, servers, zeroCount, oneCount, totalOnes)) {
32
                    high = mid;  // we can achieve cost <= mid
33
                } else {
34
                    low = mid + 1; // we cannot achieve cost mid, so increase
35
                }
36
            }
37
38
            System.out.println(low);
39
        }
40
41
        scanner.close();
42
    }
43
44
    /**
45
     * Checks if there exists a subarray [start, end) such that:
46
     *   #0 in subarray <= c
47
     *   #1 in subarray >= totalOnes - c
48
     */
49
    private static boolean feasible(int c, String servers,
50
                                   int[] zeroCount, int[] oneCount,
51
                                   int totalOnes) {
52
        int n = servers.length();
53
        int start = 0;
54
55
        for (int end = 0; end <= n; end++) {
56
            // Move start forward while #0 in [start, end) > c
57
            while (start < end && 
58
                   (zeroCount[end] - zeroCount[start]) > c) {
59
                start++;
60
            }
61
62
            // Now #0 in [start, end) <= c (unless start==end)
63
            int subarrayOnes = oneCount[end] - oneCount[start];
64
            // Check if #1 in subarray >= totalOnes - c
65
            if (subarrayOnes >= totalOnes - c) {
66
                return true;
67
            }
68
        }
69
70
        return false;
71
    }
72
}",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056030
1390056028,unknown,unknown,unknown,"1
def max_ones_with_at_most_k_zeros(s, k):
2
    left = 0
3
    zeros = 0
4
    max_ones = 0
5
    n = len(s)
6
7
    for right in range(n):
8
        if s[right] == '0':
9
            zeros += 1
10
11
        while zeros > k:
12
            if s[left] == '0':
13
                zeros -= 1
14
            left += 1
15
16
        current_ones = (right - left + 1) - zeros
17
        max_ones = max(max_ones, current_ones)
18
19
    return max_ones
20
21
22
def minimize_cost(t, test_cases):
23
    results = []
24
25
    for s in test_cases:
26
        n = len(s)
27
        total_ones = s.count('1')
28
29
        if total_ones == 0 or total_ones == n:
30
            results.append(0)
31
            continue
32
33
        total_zeros = n - total_ones
34
        low, high = 0, max(total_ones, total_zeros)
35
        answer = high
36
37
        while low <= high:
38
            mid = (low + high) // 2
39
            required_ones = max(0, total_ones - mid)
40
41
            if required_ones == 0:
42
                answer = mid
43
                high = mid - 1
44
                continue
45
46
            max_ones = max_ones_with_at_most_k_zeros(s, mid)
47
48
            if max_ones >= required_ones:
49
                answer = mid
50
                high = mid - 1
51
            else:
52
                low = mid + 1
53
54
        results.append(answer)
55
56
    return results
57
58
59
if __name__ == ""__main__"":
60
    t = int(input())
61
    test_cases = [input().strip() for _ in range(t)]
62
63
    results = minimize_cost(t, test_cases)
64
65
    for res in results:
66
        print(res)",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056028
1390056022,unknown,unknown,unknown,"1
def minimum_effort(arr,k):
2
    n = len(arr)
3
    effort = 0
4
    5
    if k == n:
6
        return effort
7
    8
    skip=0
9
    10
    for i in range(n):
11
        if skip < k and arr[i] == max(arr):
12
            skip+=1
13
            arr[i]=0
14
            15
        else:
16
            effort += arr[i]+skip
17
            18
    return effort
19
20
t = int(input())
21
22
for _ in range(t):
23
    n,k= map(int , input().split())
24
    25
    arr = list(map(int , input().split()))
26
    27
    print(minimum_effort(arr,k))",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056022
1390056029,unknown,unknown,unknown,"1
def find_min_effort(n, k, strength):
2
    # dp[i][j] = minimum effort to process first i firewalls when j firewalls are skipped
3
    dp = [[float('inf') for _ in range(k + 1)] for _ in range(n + 1)]
4
    dp[0][0] = 0  # Base case: no firewalls, no skips, no effort
5
    6
    for i in range(1, n + 1):
7
        for j in range(min(i, k) + 1):
8
            # Skip current firewall (if we can)
9
            if j > 0:
10
                dp[i][j] = min(dp[i][j], dp[i-1][j-1])
11
            12
            # Process current firewall
13
            # Calculate any penalty from skipped firewalls
14
            penalty = 0
15
            if i > 1 and j > 0:
16
                penalty = j  # Add 1 for each skipped firewall
17
            18
            dp[i][j] = min(dp[i][j], dp[i-1][j] + strength[i-1] + penalty)
19
    20
    # Find minimum across all possible numbers of skips
21
    result = min(dp[n])
22
    23
    return result
24
25
def main():
26
    t = int(input())  # Number of test cases
27
    28
    for _ in range(t):
29
        n, k = map(int, input().split())  # Number of firewalls and max skips
30
        strength = list(map(int, input().split()))  # Strength of each firewall
31
        32
        # Edge case: if k == n, we can skip all firewalls
33
        if k == n:
34
            print(0)
35
            continue
36
        37
        # Calculate minimum effort using dp
38
        print(find_min_effort(n, k, strength))
39
40
if __name__ == ""__main__"":
41
    main()",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056029
1390056012,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read().split()
5
    idx = 0
6
    T = int(input[idx])
7
    idx += 1
8
    for _ in range(T):
9
        n, k = int(input[idx]), int(input[idx+1])
10
        idx +=2
11
        a = list(map(int, input[idx:idx+n]))
12
        idx +=n
13
        sum_a = sum(a)
14
        v = []
15
        for i in range(n):
16
            val = a[i] - (n - i -1)
17
            v.append(val)
18
        v.sort(reverse=True)
19
        prefix = [0] * (n+1)
20
        for i in range(n):
21
            prefix[i+1] = prefix[i] + v[i]
22
        max_sum = 0
23
        max_t = min(k, n)
24
        for t in range(0, max_t+1):
25
            current = prefix[t] + t*(t-1)//2
26
            if current > max_sum:
27
                max_sum = current
28
        print(sum_a - max_sum)
29
30
if __name__ == ""__main__"":
31
    main()",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056012
1390056016,unknown,unknown,unknown,"1
def min_decommissioning_cost(test_cases):
2
    results = []
3
    4
    for servers in test_cases:
5
        n = len(servers)
6
        total_0 = servers.count('0')
7
        total_1 = n - total_0
8
        9
        prefix_0 = [0] * (n + 1)
10
        prefix_1 = [0] * (n + 1)
11
        suffix_0 = [0] * (n + 1)
12
        suffix_1 = [0] * (n + 1)
13
        14
        for i in range(1, n + 1):
15
            prefix_0[i] = prefix_0[i - 1] + (1 if servers[i - 1] == '0' else 0)
16
            prefix_1[i] = prefix_1[i - 1] + (1 if servers[i - 1] == '1' else 0)
17
        18
        for j in range(1, n + 1):
19
            suffix_0[j] = suffix_0[j - 1] + (1 if servers[n - j] == '0' else 0)
20
            suffix_1[j] = suffix_1[j - 1] + (1 if servers[n - j] == '1' else 0)
21
        22
        min_cost = float('inf')
23
        24
        for i in range(n + 1):
25
            left = 0
26
            right = n - i
27
            best_cost = float('inf')
28
            best_j = 0
29
            30
            while left <= right:
31
                mid = (left + right) // 2
32
                remaining_0 = total_0 - (prefix_0[i] + suffix_0[mid])
33
                decommissioned_1 = prefix_1[i] + suffix_1[mid]
34
                current_cost = max(remaining_0, decommissioned_1)
35
                36
                if current_cost < best_cost or (current_cost == best_cost and mid < best_j):
37
                    best_cost = current_cost
38
                    best_j = mid
39
                40
                if decommissioned_1 < remaining_0:
41
                    left = mid + 1
42
                else:
43
                    right = mid - 1
44
            45
            for dj in [-1, 0, 1]:
46
                j = best_j + dj
47
                if 0 <= j <= n - i:
48
                    remaining_0 = total_0 - (prefix_0[i] + suffix_0[j])
49
                    decommissioned_1 = prefix_1[i] + suffix_1[j]
50
                    current_cost = max(remaining_0, decommissioned_1)
51
                    best_cost = min(best_cost, current_cost)
52
            53
            min_cost = min(min_cost, best_cost)
54
        55
        results.append(min_cost)
56
    57
    return results
58
59
# Input Handling
60
if _name_ == ""_main_"":
61
    T = int(input())
62
    test_cases = [input().strip() for _ in range(T)]
63
    results = min_decommissioning_cost(test_cases)
64
    for result in results:
65
        print(result)",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056016
1390056017,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056017
1390056011,unknown,unknown,unknown,"1
def min_effort(n, k, firewalls):
2
    total_effort = sum(firewalls)
3
    if k == n:
4
        return 0  
5
    min_increase = min(firewalls) + 1  
6
    min_effort = total_effort  
7
    for i in range(n):
8
        effort = total_effort - firewalls[i] + min_increase
9
        min_effort = min(min_effort, effort)
10
    return min_effort
11
t = int(input())  
12
for _ in range(t):
13
    n, k = map(int, input().split())  
14
    firewalls = list(map(int, input().split()))  
15
    print(min_effort(n, k, firewalls))  
16",11,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056011
