submission_id,username,problem_name,language,code,page,url
1390056082,unknown,unknown,unknown,"1
#include <iostream>
2
#include <vector>
3
#include <climits>
4
#include <algorithm>
5
6
using namespace std;
7
8
using ll = long long;
9
10
ll min_effort(int n, int k, const vector<int>& firewalls) {
11
    if (n == 0) return 0;
12
    13
    // Maximum useful skips is min(k, n)
14
    int max_skips = min(k, n);
15
    vector<vector<ll>> dp(n + 1, vector<ll>(max_skips + 1, LLONG_MAX));
16
    dp[0][0] = 0;
17
    18
    for (int i = 1; i <= n; ++i) {
19
        for (int j = 0; j <= max_skips; ++j) {
20
            // Case 1: Do not skip the i-th firewall
21
            if (dp[i-1][j] != LLONG_MAX) {
22
                dp[i][j] = dp[i-1][j] + firewalls[i-1] + j;
23
            }
24
            // Case 2: Skip the i-th firewall if possible
25
            if (j > 0) {
26
                if (dp[i-1][j-1] != LLONG_MAX) {
27
                    dp[i][j] = min(dp[i][j], dp[i-1][j-1]);
28
                }
29
            }
30
        }
31
    }
32
    33
    return *min_element(dp[n].begin(), dp[n].end());
34
}
35
36
int main() {
37
    ios_base::sync_with_stdio(false);
38
    cin.tie(nullptr);
39
    40
    int T;
41
    cin >> T;
42
    43
    while (T--) {
44
        int n, k;
45
        cin >> n >> k;
46
        47
        vector<int> firewalls(n);
48
        for (int i = 0; i < n; ++i) {
49
            cin >> firewalls[i];
50
        }
51
        52
        cout << min_effort(n, k, firewalls) << '\n';
53
    }
54
    55
    return 0;
56
}
57",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056082
1390056084,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
3
    results = []
4
5
    for s in test_cases:
6
7
        n = len(s)
8
9
        # Precompute prefix counts of '1's
10
11
        prefix_ones = [0] * (n + 1)
12
13
        for i in range(n):
14
15
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
16
17
        18
19
        # Precompute suffix counts of '1's
20
21
        suffix_ones = [0] * (n + 1)
22
23
        for i in range(n - 1, -1, -1):
24
25
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
26
27
        28
29
        # Precompute the number of '0's in the entire string
30
31
        total_zeros = s.count('0')
32
33
        34
35
        min_cost_val = float('inf')
36
37
        38
39
        # Iterate over all possible left decommissioning points
40
41
        for left in range(n + 1):
42
43
            # Calculate the number of '1's removed from the left
44
45
            ones_removed_left = prefix_ones[left]
46
47
            48
49
            # Calculate the remaining '0's in the middle
50
51
            # Total '0's minus the '0's removed from the left and right
52
53
            # Since we are iterating over left, we need to find the right decommissioning point
54
55
            # that minimizes the cost
56
57
            # We can use binary search to find the optimal right decommissioning point
58
59
            low = 0
60
61
            high = n - left
62
63
            best_right = 0
64
65
            best_cost = float('inf')
66
67
            68
69
            while low <= high:
70
71
                mid = (low + high) // 2
72
73
                right = mid
74
75
                ones_removed_right = suffix_ones[n - right]
76
77
                total_ones_removed = ones_removed_left + ones_removed_right
78
79
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
80
81
                current_cost = max(zeros_remaining, total_ones_removed)
82
83
                84
85
                if current_cost < best_cost:
86
87
                    best_cost = current_cost
88
89
                    best_right = right
90
91
                92
93
                if zeros_remaining > total_ones_removed:
94
95
                    low = mid + 1
96
97
                else:
98
99
                    high = mid - 1
100
101
            102
103
            if best_cost < min_cost_val:
104
105
                min_cost_val = best_cost
106
107
        108
109
        results.append(min_cost_val)
110
111
    return results
112
113
# Read input
114
115
T = int(input())
116
117
test_cases = [input().strip() for _ in range(T)]
118
119
# Compute results
120
121
results = min_cost(test_cases)
122
123
# Output results
124
125
for res in results:
126
127
    print(res)",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056084
1390056086,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
using namespace std;
7
8
9
int main() {
10
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
11
    return 0;
12
}
13",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056086
1390056070,unknown,unknown,unknown,"1
#include <stdio.h>
2
#include <stdlib.h>
3
4
5
typedef struct {
6
    long long strength;
7
    int index;
8
} Firewall;
9
10
11
int compare(const void* a, const void* b) {
12
    Firewall* fw1 = (Firewall*)a;
13
    Firewall* fw2 = (Firewall*)b;
14
    15
    if (fw1->strength > fw2->strength) return -1;
16
    if (fw1->strength < fw2->strength) return 1;
17
    return 0;
18
}
19
20
int main() {
21
    int t;
22
    scanf(""%d"", &t);
23
    24
    while (t--) {
25
        int n, k;
26
        scanf(""%d %d"", &n, &k);
27
        28
        long long* strengths = (long long*)malloc(n * sizeof(long long));
29
        Firewall* firewalls = (Firewall*)malloc(n * sizeof(Firewall));
30
        31
      32
        for (int i = 0; i < n; i++) {
33
            scanf(""%lld"", &strengths[i]);
34
            firewalls[i].strength = strengths[i];
35
            firewalls[i].index = i;
36
        }
37
        38
       39
        qsort(firewalls, n, sizeof(Firewall), compare);
40
        41
        42
        int* skip = (int*)calloc(n, sizeof(int));
43
        int skipped = 0;
44
        45
        for (int i = 0; i < n && skipped < k; i++) {
46
            skip[firewalls[i].index] = 1;
47
            skipped++;
48
        }
49
        50
      51
        long long totalEffort = 0;
52
        int penalty = 0;
53
        54
        for (int i = 0; i < n; i++) {
55
            if (skip[i]) {
56
           57
                penalty++;
58
            } else {
59
               60
                totalEffort += strengths[i] + penalty;
61
            }
62
        }
63
        64
        printf(""%lld\n"", totalEffort);
65
        66
        67
        free(strengths);
68
        free(firewalls);
69
        free(skip);
70
    }
71
    72
    return 0;
73
}",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056070
1390056077,unknown,unknown,unknown,"1
import sys
2
3
def main():
4
    input = sys.stdin.read
5
    data = input().split(""\n"")
6
    7
    t = int(data[0])
8
    index = 1
9
10
    results = []
11
    for _ in range(t):
12
        n, k = map(int, data[index].split())
13
        strengths = list(map(int, data[index + 1].split()))
14
        index += 2
15
        16
        if k >= n:
17
            results.append(""0"")
18
            continue
19
        20
       21
        impact = [(strengths[i] + i, i) for i in range(n)]
22
        23
       24
        impact.sort(reverse=True)
25
        26
        27
        to_skip = set(idx for _, idx in impact[:k])
28
        29
       30
        effort = 0
31
        skipped = 0
32
        33
        for i in range(n):
34
            if i in to_skip:
35
                skipped += 1
36
            else:
37
                effort += strengths[i] + skipped
38
        39
        results.append(str(effort))
40
    41
   42
    sys.stdout.write(""\n"".join(results) + ""\n"")
43
44
if __name__ == ""__main__"":
45
    main()",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056077
1390056078,unknown,unknown,unknown,"1
import java.util.*;
2
3
public class Main {
4
    public static void main(String[] args) {
5
        Scanner sc = new Scanner(System.in);
6
        int T = sc.nextInt();
7
        while (T-- > 0) {
8
            int n = sc.nextInt();
9
            int k = sc.nextInt();
10
            int[] a = new int[n];
11
            long sum_a = 0;
12
            for (int i = 0; i < n; i++) {
13
                a[i] = sc.nextInt();
14
                sum_a += a[i];
15
            }
16
            List<Long> values = new ArrayList<>();
17
            for (int i = 0; i < n; i++) {
18
                long val = a[i] - (n - i - 1L);
19
                values.add(val);
20
            }
21
            values.sort((x, y) -> Long.compare(y, x));
22
            long[] prefixSum = new long[n + 1];
23
            prefixSum[0] = 0;
24
            for (int i = 1; i <= n; i++) {
25
                prefixSum[i] = prefixSum[i - 1] + values.get(i - 1);
26
            }
27
            int max_m = Math.min(k, n);
28
            long maxTotal = Long.MIN_VALUE;
29
            for (int m = 0; m <= max_m; m++) {
30
                long current = prefixSum[m] + ((long) m * (m - 1)) / 2;
31
                if (current > maxTotal) {
32
                    maxTotal = current;
33
                }
34
            }
35
            long minEffort = sum_a - maxTotal;
36
            System.out.println(minEffort);
37
        }
38
        sc.close();
39
    }
40
}",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056078
1390056061,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
6
    public static void main(String[] args) {
7
      Scanner scanner = new Scanner(System.in);
8
        int t = scanner.nextInt(); 
9
10
        while (t-- > 0) {
11
            int n = scanner.nextInt(); 
12
            int k = scanner.nextInt(); 
13
            int[] arr = new int[n];
14
15
            for (int i = 0; i < n; i++) {
16
                arr[i] = scanner.nextInt();
17
            }
18
19
            int ans = findResult(arr, k);
20
21
            System.out.print(ans);
22
           23
            System.out.println();
24
        }
25
        scanner.close();
26
    }
27
    public static int findResult(int []arr, int k){
28
        int[] ans= new int[arr.length];
29
        int sum=0;
30
        for(int i =0;i<arr.length;i++){
31
            ans[i]=arr[i]-((arr.length-1)-i);
32
            sum+=arr[i];
33
        }
34
        Arrays.sort(ans);
35
        reverse(ans);
36
        for(int i =0;i<k;i++){
37
            if(ans[i]>0){
38
               // System.out.println(ans[i]+""w"");
39
                sum-=ans[i];
40
            }
41
        }
42
        43
        return Math.max(sum,0);
44
        45
    }
46
     private static void reverse(int[] arr) {
47
        int left = 0, right = arr.length - 1;
48
        while (left < right) {
49
            int temp = arr[left];
50
            arr[left] = arr[right];
51
            arr[right] = temp;
52
            left++;
53
            right--;
54
        }
55
    }
56
}",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056061
1390056067,unknown,unknown,unknown,"1
import java.io.*;
2
import java.util.*;
3
4
public class Solution {
5
    6
    7
    static boolean feasible(int X, int[] onesIndices, int total1) {
8
       9
        if (X >= total1) return true;
10
        int j = 0;
11
        for (int i = 0; i < total1; i++) {
12
            13
            if (j < i) j = i;
14
            15
            while (j < total1 && (onesIndices[j] - onesIndices[i] - (j - i)) <= X) {
16
                j++;
17
            }
18
            int m = j - i; 
19
            if (m >= total1 - X) return true;
20
        }
21
        return false;
22
    }
23
    24
    public static void main(String[] args) {
25
        Scanner sc = new Scanner(System.in);
26
        int T = sc.nextInt();
27
        28
        while(T-- > 0) {
29
            String s = sc.next();
30
            int n = s.length();
31
            32
           33
            ArrayList<Integer> onesList = new ArrayList<>();
34
            for (int i = 0; i < n; i++) {
35
                if (s.charAt(i) == '1') {
36
                    onesList.add(i);
37
                }
38
            }
39
            int total1 = onesList.size();
40
            41
           42
            if (total1 == 0) {
43
                System.out.println(0);
44
                continue;
45
            }
46
            47
           48
            int[] onesIndices = new int[total1];
49
            for (int i = 0; i < total1; i++) {
50
                onesIndices[i] = onesList.get(i);
51
            }
52
            53
           54
            int low = 0, high = total1, ans = high;
55
            while (low <= high) {
56
                int mid = low + (high - low) / 2;
57
                if (feasible(mid, onesIndices, total1)) {
58
                    ans = mid;
59
                    high = mid - 1;
60
                } else {
61
                    low = mid + 1;
62
                }
63
            }
64
            System.out.println(ans);
65
        }
66
        sc.close();
67
    }
68
}",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056067
1390056069,unknown,unknown,unknown,"1
def min_cost(test_cases):
2
    results = []
3
    for s in test_cases:
4
        n = len(s)
5
        # Precompute prefix counts of '1's
6
        prefix_ones = [0] * (n + 1)
7
        for i in range(n):
8
            prefix_ones[i + 1] = prefix_ones[i] + (1 if s[i] == '1' else 0)
9
        10
        # Precompute suffix counts of '1's
11
        suffix_ones = [0] * (n + 1)
12
        for i in range(n - 1, -1, -1):
13
            suffix_ones[i] = suffix_ones[i + 1] + (1 if s[i] == '1' else 0)
14
        15
        # Precompute the number of '0's in the entire string
16
        total_zeros = s.count('0')
17
        18
        min_cost_val = float('inf')
19
        20
        # Iterate over all possible left decommissioning points
21
        for left in range(n + 1):
22
            # Calculate the number of '1's removed from the left
23
            ones_removed_left = prefix_ones[left]
24
            25
            # Calculate the remaining '0's in the middle
26
            # Total '0's minus the '0's removed from the left and right
27
            # Since we are iterating over left, we need to find the right decommissioning point
28
            # that minimizes the cost
29
            # We can use binary search to find the optimal right decommissioning point
30
            low = 0
31
            high = n - left
32
            best_right = 0
33
            best_cost = float('inf')
34
            35
            while low <= high:
36
                mid = (low + high) // 2
37
                right = mid
38
                ones_removed_right = suffix_ones[n - right]
39
                total_ones_removed = ones_removed_left + ones_removed_right
40
                zeros_remaining = total_zeros - (left - prefix_ones[left]) - (right - suffix_ones[n - right])
41
                current_cost = max(zeros_remaining, total_ones_removed)
42
                43
                if current_cost < best_cost:
44
                    best_cost = current_cost
45
                    best_right = right
46
                47
                if zeros_remaining > total_ones_removed:
48
                    low = mid + 1
49
                else:
50
                    high = mid - 1
51
            52
            if best_cost < min_cost_val:
53
                min_cost_val = best_cost
54
        55
        results.append(min_cost_val)
56
    return results
57
58
# Read input
59
T = int(input())
60
test_cases = [input().strip() for _ in range(T)]
61
62
# Compute results
63
results = min_cost(test_cases)
64
65
# Output results
66
for res in results:
67
    print(res)",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/server-pruning/submissions/code/1390056069
1390056060,unknown,unknown,unknown,"1
#include <cmath>
2
#include <cstdio>
3
#include <vector>
4
#include <iostream>
5
#include <algorithm>
6
#include <bits/stdc++.h>
7
using namespace std;
8
9
int solve(vector<int>&arr, int i, int skip, int inc,vector<vector<long long>>&dp) {
10
    int n = arr.size();
11
    if(i==n){
12
        return 0;
13
    }
14
    if(dp[i][skip]!=-1)return dp[i][skip];
15
    //skip
16
    int ans = INT_MAX;
17
    if(skip>0) {
18
        ans = min(ans,solve(arr,i+1,skip-1,inc+1,dp));
19
    }
20
    //no skip
21
    int recAns = solve(arr,i+1,skip,inc,dp);
22
    if(recAns!=INT_MAX)
23
        ans = min(ans,arr[i]+inc+recAns);
24
    return dp[i][skip]= ans;
25
}
26
27
28
int main() {
29
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
30
    int t;
31
    cin>>t;
32
    while(t--) {
33
        int n,skip;
34
        cin>>n>>skip;
35
        vector<int>arr;
36
        vector<vector<long long>>dp(n,vector<long long>(skip+1,-1));
37
        while(n--) {
38
            int a;
39
            cin>>a;
40
            arr.push_back(a);
41
        }
42
        cout<<solve(arr,0,skip,0,dp)<<endl;
43
    }
44
    return 0;
45
}",9,https://www.hackerrank.com/contests/tcet-shastra-coding-contest-13-a/challenges/breach-firewall/submissions/code/1390056060
